Imports System.Math
Imports System.Runtime.InteropServices
Imports CosmosWorksLib
Imports MySql.Data.MySqlClient
Imports SldWorks
Imports SwConst


Public Class zhangweibin



    Public Class Module_huangzilong
        Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
        Dim OpenDoc7 As SldWorks.ModelDoc2
        Dim NewDocument As SldWorks.ModelDoc2
        'Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
        Dim part As SldWorks.ModelDoc2
        Dim SketchManager As SldWorks.SketchManager
        Dim FeatureManager As SldWorks.FeatureManager
        Dim Dimension As SldWorks.Dimension
        Dim DisplayDimension As SldWorks.DisplayDimension
        Dim sketch As SldWorks.Sketch
        Dim Getsketch As SldWorks.Feature
        Dim sketchL5 As SldWorks.SketchLine
        Dim Feature， Feature1， Feature2， Feature3, Feature4， Feature5， Feature6, Feature7, sketchfeature1, sketchfeature2, sketchfeature3, 基准轴featureX， 基准轴featureY， 基准轴featureZ,
            Feature拔模1， Feature拔模2， Feature拔模3， Feature拔模4， Feature拔模5， Feature拔模6， Feature拉伸1， Feature拉伸2， Feature拉伸3， Feature拉伸4， Feature拉伸5， Feature圆角1， Feature圆角2， Feature圆角3， Feature圆角4， Feature圆角5，
             Feature切除1， Feature切除2， Feature切除3， Feature切除4， Feature切除5 As SldWorks.Feature
        Dim SelectionMgr As SldWorks.SelectionMgr
        Dim Annotation As SldWorks.Annotation
        Dim Annotations() As Object
        Dim DimensionTolerance As SldWorks.DimensionTolerance

        Public A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 As SldWorks.SketchArc
        Public L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L12, L13, L14, L15, L01, L02, L03, L04, L05 As SldWorks.SketchLine
        Public DL1, DL2, DL3, DL4, DL5, DL6 As SldWorks.SketchLine
        Public A1Segment, A2Segment, A3Segment, A4Segment, A5Segment, L1Segment, L2Segment, L3Segment, L4Segment, L5Segment, L6Segment, L7Segment,
                    L8Segment, L9Segment, L10Segment, L11Segment, L12Segment, L13Segment, L14Segment, L15Segment, L01Segment, L02Segment, L03Segment, L04Segment, L05Segment, DL1Segment, DL2Segment,
                    DL3Segment, DL4Segment, DL5Segment, DL6Segment, SketchSegment, SketchSegment1, SketchSegment2, SketchSegment3 As SldWorks.SketchSegment
        Public SketchSegments(), points() As Object
        Public [Boolean] As Boolean
        Public p0, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10, P11, P12, P13, P14, P15, DP1, DP2, DP3, DP4, DP5, DP6, DP7, DP8, DP9, DP10, DP11, DP12, DP13, DP14, DP15 As SldWorks.SketchPoint



        Dim AssemblyDoc As SldWorks.AssemblyDoc
        Dim AssemblyTitle As String
        Dim Component2 As SldWorks.Component2
        Dim facenumber， facenumber1， facenumber2， facenumber3， facenumber4， facenumber5， facenumber6， facenumber7， facenumber8， facenumber9， facenumber10， facenumber11， facenumber12 As Integer
        Dim edgenumber， edgenumber1， edgenumber2， edgenumber3， edgenumber4， edgenumber5， edgenumber6， edgenumber7， edgenumber8， edgenumber9， edgenumber10， edgenumber11， edgenumber12 As Integer
        Dim errors As Long
        Dim longwarnings As Long
        Dim swbody, swbody1, swbody2, swbody3, swbody4, swbody5, swbody6, swbody7, swbody8, swbody9, swbody10 As SldWorks.Body2
        Dim swface As SldWorks.Face2



        Dim DFeature， DFeature1， DFeature2， DFeature3, Dsketchfeature1, Dsketchfeature2, Dsketchfeature3 As SldWorks.Feature
        Dim SelectionSet, swSelectionSet1, swSelectionSet2 As SelectionSet
        Dim SelectionSetItem As SelectionSetItem
        Dim swModel As ModelDoc2
        Dim swFeatureMgr As FeatureManager
        Dim rootNode As TreeControlItem
        Dim swModelDocExtension As ModelDocExtension
        Dim status As Boolean
        Dim warnings As Integer
        Dim fileName As String


        Dim Draw As SldWorks.DrawingDoc
        Dim View As SldWorks.View '视图对象
        Dim Notes As Object
        Dim Count As Long
        Dim Annpos() As Double
        Dim mySFSymbol As SldWorks.SFSymbol

        Dim myView As SldWorks.View
        Dim myNote As Object
        Dim face As SldWorks.Face2
        Dim edge As Edge
        Dim face1(), face2(), face3(), face4(), face5(), face6(), face7(), face8(), edge1(), edge2(), edge3(), edge4(), edge5(), edge6(), edge7(), edge8() As Object
        Dim Object数组1(), Object数组2(), Object数组3(), Object数组4(), Object数组5(), Object数组6() As Object

        Dim Object1, Object2, Object3 As Object


        Public X1, X2, X3, Y1, Y2, Y3, Z1, Z2, Z3 As Double
        Public Note As SldWorks.Note

        Dim RenderMaterial As SldWorks.RenderMaterial
        Dim swConfig As SldWorks.Configuration
        Dim Entity As SldWorks.Entity


        '仿真
        Dim COSMOSWORKSObj As CosmosWorks 'CosmosWorksLib.CosmosWorks
        Dim CWAddinCallBackObj As Object
        Dim ActiveDocObj As CWModelDoc
        Dim StudyManagerObj As CWStudyManager
        Dim LoadsAndRestraintsManagerObj As CWLoadsAndRestraintsManager
        Dim ErrorCodeObj As Long
        Dim ContactManagerObj As CWContactManager
        Dim StudyObj As CWStudy
        Dim NewStudyName As String
        Dim motionStudyMgr As Object
        Dim CWNewStudy As CWStudy
        Dim SolidManagerObj As CWSolidManager
        Dim CWRestraintObj As CWRestraint
        Dim CWForceObj As CWForce
        Dim MeshObj As CWMesh


        Dim mysqlcon, Dmysqlcon, connect1, connect2, connect3, connect4 As MySqlConnection
        Dim mysqlcom, Dmysqlcom, cursor1, cursor2, cursor3, cursor4 As MySqlCommand
        Dim read, read1, read2, Dread, Dread1, Dread2 As MySqlDataReader
        Dim fff As MySqlParameter
        Dim ffff As MySqlParameterCollection
        'Dim 
        Dim database_name1, database_name2, database_name3, database_name4, database_name5,
            table_name1, table_name2, table_name3, table_name4, table_name5,
            updata1, updata2, updata3,
            updata4, updata5, updata6, updata7, updata8, updata9, updata10, updata11, updata12, updata13,
            updata14, updata15, updata16, updata17, updata18 As String
        Dim values1, values2, values3, values4, values5 As Object()




        '仿真分析
        Sub ErrorMsg(ByVal SwApp As SldWorks.SldWorks, ByVal Message As String)
            SwApp.SendMsgToUser2(Message, 0, 0)
            SwApp.RecordLine("'*** WARNING - General")
            SwApp.RecordLine("'*** " & Message)
            SwApp.RecordLine("")
            'read()

        End Sub
        Public Sub set_attribute(name$, code$, material$, Optional ematerial$ = "合金钢") '设置零件属性
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", name)
            cusproper.Set2("代号", code)
            cusproper.Set2("材料", material)
            edit_material(ematerial)
        End Sub
        Public Sub set_attribute_news(name$, code$, material$, Optional ematerial$ = "灰铸铁") '设置零件属性
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", name)
            cusproper.Set2("代号", code)
            cusproper.Set2("材料", material)
            edit_material(ematerial)
        End Sub
        Public Sub edit_material(ematerial$) '编辑零件材料
            Dim mat As Object
            mat = part.SetMaterialPropertyName2("默认", "C:/Program Files/SOLIDWORKS Corp/SOLIDWORKS/lang/chinese-simplified/sldmaterials/solidworks materials.sldmat", ematerial)
            If mat Is Nothing Then
                part.SetMaterialPropertyName2("默认", "D:/SOLIDWORKS/SOLIDWORKS/lang/chinese-simplified/sldmaterials/solidworks materials.sldmat", ematerial)
            End If
        End Sub
        Public Sub 轴_模态响应()
            MsgBox(999)

            'swapp.l
            'swConfig = part.GetActiveConfiguration
            'status = swConfig.CreateDisplayState("Display State 2")

            part.Extension.SelectByID2("8.LY.200.001.SLDPRT", "COMPONENT", 0, 0, 0, False, 0, Nothing, 0)
            part.AddConfiguration2("应力仿真", "", "", False, False, False, True, 256)
            part.ShowConfiguration2("应力仿真")
            part.ForceRebuild3(True)

            Dim int As Integer
            int = 1
            Do Until int = 0
                int = swapp.LoadAddIn("C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\Simulation\cosworks.dll")
            Loop

            Dim COSMOSWORKSObj As CosmosWorks 'CosmosWorksLib.CosmosWorks
            Dim CWAddinCallBackObj As Object
            CWAddinCallBackObj = swapp.GetAddInObject("SldWorks.Simulation")

            COSMOSWORKSObj = CWAddinCallBackObj.COSMOSWORKS

            ' Redraw
            part.GraphicsRedraw2()
            Dim ActiveDocObj As CWModelDoc
            Dim StudyManagerObj As CWStudyManager
            Dim LoadsAndRestraintsManagerObj As CWLoadsAndRestraintsManager
            Dim ErrorCodeObj As Long
            Dim ContactManagerObj As CWContactManager
            Dim StudyObj As CWStudy
            Dim NewStudyName As String
            Dim motionStudyMgr As Object
            Dim CWNewStudy As CWStudy
            Dim SolidManagerObj As CWSolidManager
            Dim CWRestraintObj As CWRestraint
            Dim CWForceObj As CWForce
            Dim MeshObj As CWMesh






            ActiveDocObj = COSMOSWORKSObj.ActiveDoc()
            StudyManagerObj = ActiveDocObj.StudyManager()

            Do Until StudyManagerObj.StudyCount = 0
                StudyObj = StudyManagerObj.GetStudy(0)
                StudyManagerObj.DeleteStudy(StudyObj.Name)
            Loop



            NewStudyName = "静应力分析 " + (StudyManagerObj.StudyCount + 1).ToString
            StudyObj = StudyManagerObj.CreateNewStudy3(NewStudyName, 0, 0, ErrorCodeObj)
            StudyManagerObj.ActiveStudy = StudyManagerObj.StudyCount
            SolidManagerObj = StudyObj.SolidManager()
            ErrorCodeObj = SolidManagerObj.SetLibraryMaterialToAllBodiesByCompName(Left(part.GetTitle, part.GetTitle.Length - 7), "solidworks materials", "合金钢")

            MsgBox(Left(part.GetTitle, part.GetTitle.Length - 7))





            part.Extension.SelectByID2("切除-拉伸9", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature.GetFaces
            part.ClearSelection2(True)
            LoadsAndRestraintsManagerObj = StudyObj.LoadsAndRestraintsManager()
            CWRestraintObj = LoadsAndRestraintsManagerObj.AddRestraint(0, face1, Nothing, ErrorCodeObj)
            part.ClearSelection2(True)



            part.Extension.SelectByID2("凸台-拉伸6", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature.GetFaces
            '遍历（1， face1， Feature.GetFaceCount）
            face = face1(0)
            swface = face1(1)
            Object数组1 = {face}
            part.ClearSelection2(True)








            Dim DistanceValues(2) As Object
            Dim ForceValues(2) As Object
            Dim ComponentValues As Object()
            Dim data(6) As Object
            data(0) = 1
            data(1) = 1
            data(2) = 1
            data(3) = 1
            data(4) = 1
            data(5) = 1
            ComponentValues = data


            CWForceObj = LoadsAndRestraintsManagerObj.AddForce3(2, 0, 2, 0, 0, 0, (DistanceValues), (ForceValues), 0, False, 0, 0, 0, 40, (ComponentValues), False, False, Object数组1, swface, False, ErrorCodeObj)





            ' 网格
            part.GraphicsRedraw2()


            MeshObj = StudyObj.Mesh()
            MeshObj.Quality = 1
            MeshObj.UseJacobianCheckForSolids = 1
            MeshObj.MesherType = 0
            MeshObj.AutomaticTransition = False
            MeshObj.AutomaticLooping = False
            MeshObj.NumberOfLoops = 3
            MeshObj.SaveSettingsWithoutMeshing = False
            MeshObj.Unit = 0
            ErrorCodeObj = StudyObj.CreateMesh(0, 15.9343, 0.796717)


            StudyObj.RunAnalysis()



            StudyObj.GenerateReport("E:\works\仿真分析", "轴应力" + ".docx", False)









            StudyManagerObj = Nothing
            ActiveDocObj = Nothing
            CWAddinCallBackObj = Nothing
            COSMOSWORKSObj = Nothing
        End Sub
        Public Sub 轴_扭矩力()
            'MsgBox(999)

            ''swapp.l
            ''swConfig = part.GetActiveConfiguration
            ''status = swConfig.CreateDisplayState("Display State 2")

            'part.Extension.SelectByID2("8.LY.200.001.SLDPRT", "COMPONENT", 0, 0, 0, False, 0, Nothing, 0)
            'part.AddConfiguration2("应力仿真", "", "", False, False, False, True, 256)
            'part.ShowConfiguration2("应力仿真")
            'part.ForceRebuild3(True)

            'Dim int As Integer
            'int = 1
            'Do Until int = 0
            '    int = swapp.LoadAddIn("C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\Simulation\cosworks.dll")
            'Loop




            'part.GraphicsRedraw2()
            'CWAddinCallBackObj = swapp.GetAddInObject("SldWorks.Simulation")
            'COSMOSWORKSObj = CWAddinCallBackObj.COSMOSWORKS


            'ActiveDocObj = COSMOSWORKSObj.ActiveDoc()
            'StudyManagerObj = ActiveDocObj.StudyManager()

            'Do Until StudyManagerObj.StudyCount = 0
            '    StudyObj = StudyManagerObj.GetStudy(0)
            '    StudyManagerObj.DeleteStudy(StudyObj.Name)
            'Loop


            'If 类型 = "静应力分析" Then
            '    StudyObj = StudyManagerObj.CreateNewStudy3(NewStudyName, 0, 0, ErrorCodeObj)
            'ElseIf 类型 = "频率" Then
            '    StudyObj = StudyManagerObj.CreateNewStudy3(NewStudyName, 1， -1, ErrorCodeObj)
            'End If







            'NewStudyName = 类型 + (StudyManagerObj.StudyCount + 1).ToString
            'StudyObj = StudyManagerObj.CreateNewStudy3(NewStudyName, 0, 0, ErrorCodeObj)



            'StudyManagerObj.ActiveStudy = StudyManagerObj.StudyCount
            'SolidManagerObj = StudyObj.SolidManager()
            'ErrorCodeObj = SolidManagerObj.SetLibraryMaterialToAllBodiesByCompName(Left(part.GetTitle, part.GetTitle.Length - 7), "solidworks materials", "合金钢")

            'MsgBox(Left(part.GetTitle, part.GetTitle.Length - 7))












            part.Extension.SelectByID2("切除-拉伸9", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature.GetFaces
            part.ClearSelection2(True)
            LoadsAndRestraintsManagerObj = StudyObj.LoadsAndRestraintsManager()
            CWRestraintObj = LoadsAndRestraintsManagerObj.AddRestraint(0, face1, Nothing, ErrorCodeObj)
            part.ClearSelection2(True)



            part.Extension.SelectByID2("凸台-拉伸6", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature.GetFaces
            '遍历（1， face1， Feature.GetFaceCount）
            face = face1(0)
            swface = face1(1)
            Object数组1 = {face}
            part.ClearSelection2(True)








            Dim DistanceValues(2) As Object
            Dim ForceValues(2) As Object
            Dim ComponentValues As Object()
            Dim data(6) As Object
            data(0) = 1
            data(1) = 1
            data(2) = 1
            data(3) = 1
            data(4) = 1
            data(5) = 1
            ComponentValues = data


            CWForceObj = LoadsAndRestraintsManagerObj.AddForce3(2, 0, 2, 0, 0, 0, (DistanceValues), (ForceValues), 0, False, 0, 0, 0, 40, (ComponentValues), False, False, Object数组1, swface, False, ErrorCodeObj)






        End Sub
        Public Sub 生成网格运行算例(Report_dz$, Report_name$, eDrawings_dz$, eDrawings_name$)
            part.GraphicsRedraw2()
            MeshObj = StudyObj.Mesh()
            MeshObj.Quality = 1
            MeshObj.UseJacobianCheckForSolids = 1
            MeshObj.MesherType = 0
            MeshObj.AutomaticTransition = False
            MeshObj.AutomaticLooping = False
            MeshObj.NumberOfLoops = 3
            MeshObj.SaveSettingsWithoutMeshing = False
            MeshObj.Unit = 0
            ErrorCodeObj = StudyObj.CreateMesh(0, 15.9343, 0.796717)
            StudyObj.RunAnalysis()



            Dim aa As CWResults
            aa = StudyObj.Results

            Object数组1 = aa.GetPlotNames
            MsgBox(Object数组1.Count)
            For i = 1 To Object数组1.Count
                aa.SavePlotsAseDrawings(eDrawings_dz, eDrawings_name + i.ToString, Object数组1(i - 1))
            Next


            'aa.GetDeformedCoord()


            'StudyObj.GenerateReport(Report_dz, Report_name, False)
            'Dim 名字$
            'StudyObj.CreateAnalysisDatabase("E:\works\仿真分析", 名字)
            'MsgBox(名字)
            '
            '




        End Sub
        Public Sub 转子冲片热力学分析()
            '            On Error GoTo 1
            '            ' #程序代码
            '1:          MsgBox("报错")



            Dim int As Integer
            int = 1
            Do Until int = 0
                int = swapp.LoadAddIn("C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\Simulation\cosworks.dll")
            Loop
            part = swapp.ActiveDoc
            Dim COSMOSWORKSObj As CosmosWorksLib.CosmosWorks 'CosmosWorksLib.CosmosWorks
            Dim CWAddinCallBackObj As Object
            CWAddinCallBackObj = swapp.GetAddInObject("SldWorks.Simulation")
            COSMOSWORKSObj = CWAddinCallBackObj.COSMOSWORKS

            ' Redraw
            part.GraphicsRedraw2()
            Dim ActiveDocObj As CosmosWorksLib.CWModelDoc
            Dim StudyManagerObj As CosmosWorksLib.CWStudyManager
            Dim LoadsAndRestraintsManagerObj As CosmosWorksLib.CWLoadsAndRestraintsManager
            Dim ErrorCodeObj As Long
            Dim ContactManagerObj As Object
            ActiveDocObj = COSMOSWORKSObj.ActiveDoc()
            StudyManagerObj = ActiveDocObj.StudyManager()
            StudyManagerObj.ActiveStudy = 0
            Dim motionStudyMgr As Object
            motionStudyMgr = part.Extension.GetMotionStudyManager()
            StudyManagerObj.ActiveStudy = 0
            Dim NewStudyName As String
            NewStudyName = "热力 1"
            Dim CWNewStudy As CosmosWorksLib.CWStudy
            CWNewStudy = StudyManagerObj.CreateNewStudy3(NewStudyName, 3, 0, ErrorCodeObj)


            '设置零件材料
            Dim StudyObj As CosmosWorksLib.CWStudy
            StudyObj = StudyManagerObj.GetStudy(0)
            Dim SolidManagerObj As CosmosWorksLib.CWSolidManager
            SolidManagerObj = StudyObj.SolidManager()
            ErrorCodeObj = SolidManagerObj.SetLibraryMaterialToAllBodiesByCompName("8EQ.630.2005", "solidworks materials", "合金钢")



            part.Extension.SelectByID2("凸台-拉伸1", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            face1 = Feature.GetFaces
            遍历（1， face1， Feature.GetFaceCount）
            face = face1(0)
            swface = face1(1)
            Object数组1 = {face}
            part.ClearSelection2(True)


            part.GraphicsRedraw2()
            LoadsAndRestraintsManagerObj = StudyObj.LoadsAndRestraintsManager()
            Dim ErrorCode As Long
            Dim CWTemperature As Object
            CWTemperature = LoadsAndRestraintsManagerObj.AddTemperature(Object数组1, ErrorCode)
            CWTemperature.TemperatureBeginEdit
            CWTemperature.TemperatureType = 1
            CWTemperature.TemperatureValue = 50
            CWTemperature.Unit = 0
            CWTemperature.TemperatureEndEdit
            part.ClearSelection2(True)



            part.Extension.SelectByID2("切除-拉伸9", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature.GetFaces


            part.Extension.SelectByID2("阵列(圆周)9", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            face2 = Feature.GetFaces
            face3 = face1.Concat(face2).ToArray '(face1, face2)
            part.ClearSelection2(True)


            ' Redraw
            Dim CWConvection As Object
            CWConvection = LoadsAndRestraintsManagerObj.AddConvection(face3, ErrorCode)
            CWConvection.ConvectionBeginEdit
            CWConvection.BulkAmbientTemperature = 20
            CWConvection.ConvectionCoefficient = 3
            CWConvection.Unit = 0
            CWConvection.ConvectionEndEdit
            part.ClearSelection2(True)





            ' 网格
            part.GraphicsRedraw2()


            Dim MeshObj As CosmosWorksLib.CWMesh
            MeshObj = StudyObj.Mesh()
            MeshObj.Quality = 1
            MeshObj.UseJacobianCheckForSolids = 1
            MeshObj.MesherType = 0
            MeshObj.AutomaticTransition = False
            MeshObj.AutomaticLooping = False
            MeshObj.NumberOfLoops = 3
            MeshObj.SaveSettingsWithoutMeshing = False
            MeshObj.Unit = 0
            ErrorCodeObj = StudyObj.CreateMesh(0, 15.9343, 0.796717)


            StudyObj.RunAnalysis()


            'StudyObj.word

            'COSMOSWORKSObj.
            'CWAddinCallBackObj.
            'CWAddinCallBackObj.
            'COSMOSWORKSObj.w

            StudyObj.GenerateReport("E:\works\仿真分析", "温度仿真.docx", False)

            'StudyObj.CreateAnalysisDatabase("E:\works\仿真分析", "温度仿真")

            '' Redraw
            'part.GraphicsRedraw2()
            'Dim ActiveDocObj As CosmosWorksLib.CWModelDoc
            'Dim StudyManagerObj As CosmosWorksLib.CWStudyManager
            'Dim LoadsAndRestraintsManagerObj As CosmosWorksLib.CWLoadsAndRestraintsManager


            StudyManagerObj = Nothing
            ActiveDocObj = Nothing
            CWAddinCallBackObj = Nothing
            COSMOSWORKSObj = Nothing
        End Sub

        '工程图模块
        Public Sub Part_initialization_news(dz$)
            OpenDoc7 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            swapp = CreateObject("Sldworks.application")
            NewDocument = swapp.NewDocument(dz, 0, 0, 0)
            swapp.Visible = True
            swapp.FrameState = 1
            swapp.SetUserPreferenceToggle(swUserPreferenceToggle_e.swDisplayGraphicsComponents, True)
            part = swapp.ActiveDoc
            'part.Extension.InsertScene("\scenes\01 basic scenes\00 soft box.p2s") '绘图空间背景
            SketchManager = part.SketchManager
            FeatureManager = part.FeatureManager
            SelectionMgr = part.SelectionManager
            初始设置_new（0）
        End Sub
        Public Sub Part_initialization()
            OpenDoc7 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            swapp = CreateObject("Sldworks.application")
            NewDocument = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_part.prtdot", 0, 0, 0)
            swapp.Visible = True
            swapp.FrameState = 1
            swapp.SetUserPreferenceToggle(swUserPreferenceToggle_e.swDisplayGraphicsComponents, True)
            part = swapp.ActiveDoc
            'part.Extension.InsertScene("\scenes\01 basic scenes\00 soft box.p2s") '绘图空间背景
            SketchManager = part.SketchManager
            FeatureManager = part.FeatureManager
            SelectionMgr = part.SelectionManager
            初始设置_new（0）
        End Sub '初始化模块       
        Public Sub 转子冲片(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from rotor_punch", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop

            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()

            aaa.圆凸台(r（"type"）, r("outer_diameter"), 0, 0, r("thick_1"), 0, 0, 0) '引用中的参数要与模块中的参数位置对应
            For i = 1 To r("array_hole")
                aaa.偏心圆周孔阵列(r("array" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_relative_Y_axis_deflection_angle"),
                                       r("array_hole" + i.ToString + "_angle"), r("array_hole" + i.ToString + "_center_distance"), r("array_hole" + i.ToString + "_diameter"), 图纸比例值:=r("Proportional_value"))
            Next i
            aaa.中心圆槽(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"),
                              r("middle_hole_Left_high"), r("middle_hole_Right_high"))

            aaa.瓶型槽(r("top_hole_diameter"), r("bottom_hole_diameter"), r("top_width"), r("middle_1_width"), r("middle_2_width"), r("bottom_width"), r("top_length"), r("middle_length"), r("bottom_length"),
                            r("top_middle_angle"), r("top_Array_number"), r("top_hole_angle"))

            aaa.save(r("dz1"))
            aaa.A3模板(r("dz1"), 0.15, 0.2, 1 / 3, r("name"), r("material"), r("code"), r("skills_requirement_title"), r("skills_requirement1"), r("skills_requirement2"), r("skills_requirement3"), "", "", "A3", "前视")
            aaa.OldDrawings圆底槽口局部视图(0.32, 0.2, r("Local_scale_value"), 0, (r("top_hole_diameter") + r("bottom_hole_diameter")) / 2 / 2 / 1000, (r("top_hole_diameter") - r("bottom_hole_diameter")) / 2 / 2 / 1000 + 0.002, r("Slot_Relative_Y_axis_deflection_angle"))
            aaa.OldDrawings结束(r("dz2"))
            r.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Sub
        Public Sub 甩水环(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from sling_ring", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop

            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.旋转凸台(r("top_diameter"), r("middle_2_diameter"), r("bottom_diameter"), r("top_width"), r("middle_1_width"), r("middle_2_width"), r("bottom_width"), r("bottom_middle_angle"), r("bottom_titl_width"))
            aaa.save(r("dz1"))
            aaa.A3模板(r("dz1"), 0.1, 0.15, 1 / 1, r("name"), r("material"), r("code"), "", "", "", "", "", "", "A4P", "前视") '为字符串tring不能为空白，若为空可以用 "" 代替。
            'aaa.A4P模板(r("dz1"), 0.15, 0.2, 1 / 1, r("name"), r("material"), r("code"), r("skills_requirement_title"), r("skills_requirement1"), r("skills_requirement2"), r("skills_requirement3"), "", "", "A4P")
            'aaa.A4P_new(r("material"), r("company"), r("name"), r("code"))
            'aaa.OldDrawings开始(r("dz1"), 0.15, 0.2, r("Proportional_value"), r("name"), r("material"), r("code"), "", "", "", "", "", "", "A4P")
            aaa.OldDrawings结束(r("dz2"))
            r.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Sub
        Public Sub 平衡块(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from balance_iron", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop

            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.四边形圆弧凸台_new(r("diameter"), r("boss_height"), r("boss_top_width"), r("boss_bottom_width"), r("chamfering_1"), r("chamfering_2"), r("Stretching_Thickness"))
            aaa.save(r("dz1"))
            aaa.A3模板(r("dz1"), 0.11, 0.18, 1 / 1, r("name"), r("material"), r("code"), r("skills_requirement_title"), r("skills_requirement1"), "", "", "", "", "A4P", "前视")
            aaa.OldDrawings结束(r("dz2"))
            r.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Sub
        Public Sub 铸铝转子(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from cast_aluminium_rotor", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop

            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.圆凸台(r（"type"）, r("outer_diameter"), r("outer_diameter_1"), r("outer_diameter_2"), r("thick_1"), r("thick_2"), r("angle_1"), r("corner_radious_1"))
            For i = 1 To r("array_hole")
                aaa.偏心圆周孔阵列(r("array" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_relative_Y_axis_deflection_angle"),
                                       r("array_hole" + i.ToString + "_angle"), r("array_hole" + i.ToString + "_center_distance"), r("array_hole" + i.ToString + "_diameter"), 图纸比例值:=r("Proportional_value"))
            Next i
            aaa.中心圆槽(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"),
                              r("middle_hole_Left_high"), r("middle_hole_Right_high"))
            aaa.圆环上图形(r("bottom_center_distance"), r("bottom_diameter"), r("thick_1"), r("thick_2"), r("bottom_thick_1"), r("bottom_thick_2"),
                              r("table_number"), r("angle_1"), r("angle_2"), r("corner_radious_1"), r("corner_radious_2"), r("top_width"))
            aaa.save(r("dz1"))
            aaa.工程图模块(r("dz1"), r("Rotate_angle_1"), r("Rotate_angle_2"), 0.14, 0.15, 1 / 4, r("name"), r("material"), r("code"), r("skills_requirement_title"), r("skills_requirement1"), r("skills_requirement2"), r("skills_requirement3"), "", "", "A3", "右视")
            'aaa.A3模板(r("dz1"), 0.15, 0.18, 1 / 3, r("name"), r("material"), r("code"), r("skills_requirement_title"), r("skills_requirement1"), r("skills_requirement2"), r("skills_requirement3"), "", "", "A3", "前视")‘A3工程图中一个小网格距离为10mm
            'Draw.CreateUnfoldedViewAt3(0.4, 0.18, 0, False)
            aaa.OldDrawings结束(r("dz2"))
            r.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Sub
        Public Sub 键(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from outside_fan_key", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            ' 绘制零件的步骤：
            ' 1、绘制零件：键 的三维图
            ' 2、编辑零件：键 的材料属性
            ' 3、保存零件：键 在dz1地址内
            ' 4、绘制零件：键 的工程图
            ' 5、保存零件：键 的工程图在dz2地址内
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.key(r（"type"）, r（"length"） / 1000, r（"width"） / 1000, r（"thick"） / 1000, r（"chamfer"） / 1000, r（"length_tol_type"）, r（"length_tol_min"）, r（"width_tol_type"）, r（"width_tol_min"）, r（"thick_tol_type"）, r（"thick_tol_min"）)
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.key_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("thick") / 1000, r("width") / 1000, r("roughness1"), r("roughness2"), r("type"), r("roughness"))
            aaa.End(r（"dz2"）)
            r.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Sub
        Public Sub 盖板(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from cover", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.cover(r("length"), r("width"), r("fillet"), r("thick"), r("hole_length"), r("hole_width"), r("diameter"))
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.cover_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("hole_length"), r("hole_width"), r("roughness"), r("note"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 定子压圈(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from stator_pressing_ring_hole", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.圆凸台(r（"type"）, r("outer_diameter"), 0, 0, r("thick_1"), 0, 0, 0)
            aaa.圆切除(r("inside_diameter"), r("inside_diameter_tol_type"), r("inside_diameter_tol_max"), r("inside_diameter_tol_min"))
            aaa.圆周孔阵列(r("array_diameter"), r("array_hole_diameter"), r("array_hole_angle"), r("array_hole_num"), r("relative_X_axis_deflection_angle"))
            aaa.矩形切除(r("outer_diameter")， r("inside_diameter")， r("open_width")， r("thick_1"))
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.stator_pressing_ring_hole_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("outer_diameter"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 挡风圈(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from windshield_ring", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.旋转_薄壁(r（"out_diameter"）, r("inside_diameter"), r("width"), r("thick"), r("fillet"))
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.Windshield_ring_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("out_diameter"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 挡风板(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from windshield_board", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.圆凸台(r（"type"）, r("outer_diameter"), 0, 0, r("thick_1"), 0, 0, 0)
            aaa.圆切除(r("inside_diameter"), r("inside_diameter_tol_type"), r("inside_diameter_tol_max"), r("inside_diameter_tol_min"))
            aaa.圆环拉伸（r("outer_diameter"), r("inside_diameter")， r("thick_1")， r("width"), r（"type"）, r（"fillet"））
            aaa.圆周孔阵列(r("array_diameter"), r("array_hole_diameter"), r("array_hole_angle"), r("array_hole_num"), r("relative_X_axis_deflection_angle"))
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.windshield_board_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("outer_diameter"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 定子冲片(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from stator_punch", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.Circle_table(r("outer_diameter"), r("thick"), r("out_d_tol_type"), r("out_d_tol_max"), r("out_d_tol_min"), r("Slot_outer_diameter_Gtol"), r("Slot_outer_diameter_Gtol_Value"), r("Slot_outer_diameter_Gtol_datum"))

            aaa.Circle_cut(r("inside_diameter"), r("in_d_tol_type"), r("in_d_tol_max"), r("in_d_tol_min"), r("Datum"))

            aaa.圆周片中槽阵列(r("inside_diameter"), r("middle_diameter"), r("mi_d_tol_type"), r("mi_d_tol_max"), r("mi_d_tol_min"), r("middle_hole_angle"), r("fillet"),
                              r("middle_bottom_length"), r("middle_middle_length"), r("middle_length"), r("middle_top_width"), r("array_middle_number"), r("array_middle_angle"))

            aaa.圆周顶槽整列(r("outer_diameter"), r("top_hole_Left_high"), r("top_hole_right_high"), r("top_hole_slot_width"), r("top_hole_Relative_Y_axis_deflection_angle"), r("t_h_s_w_tol_type"), r("t_h_s_w_tol_max"), r("t_h_s_w_tol_min"),
                                r("top_hole_angle"), r("top_hole_width"), r("top_hole_high"), r("fillet"), r("array_top_number"), r("array_top_angle"))

            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.stator_punch_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("note"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 定子端板(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from stator_board", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.Circle_table(r("outer_diameter"), r("thick"), r("out_d_tol_type"), r("out_d_tol_max"), r("out_d_tol_min"), r("Slot_outer_diameter_Gtol"), r("Slot_outer_diameter_Gtol_Value"), r("Slot_outer_diameter_Gtol_datum"))

            aaa.Circle_cut(r("inside_diameter"), r("in_d_tol_type"), r("in_d_tol_max"), r("in_d_tol_min"), r("Datum"))

            aaa.圆周板中槽阵列(r("inside_diameter"), r("middle_diameter"), r("mi_d_tol_type"), r("mi_d_tol_max"), r("mi_d_tol_min"), r("middle_middle_length"),
                                  r("middle_length"), r("middle_inside_width"), r("middle_top_width"), r("array_middle_number"), r("array_middle_angle"))

            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.stator_board_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 甩油盘(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from sling_ring", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.旋转_拉伸(r("top_diameter"), r("middle_1_diameter"), r("middle_2_diameter"), r("bottom_diameter"), r("bottom_width"), r("b_w_tol_type"), r("b_w_tol_max"), r("b_w_tol_min"), r("middle_1_width"), r("top_width"), r("bottom_middle_angle"))
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.sling_ring_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("top_diameter"), r("note"), r("roughness"), r("roughness1"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 扣片(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from clasp", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.clasp(r("length"), r("height"), r("angle"), r("width"), r("fillet"), r("thick"))
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.clasp_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("note"), r("unfold_l"), r("length"), r("height"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 槽楔(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from Slot_wedge", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.Slot_wedge(r("height_Right"), r("angle"), r("width"), r("fillet"), r("thick"))
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.Slot_wedge_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("note"), r("fillet"), r("width"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 衬套(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from bushing", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.圆环(r("outer_diameter"), r("inside_diameter"), r("thick"))
            aaa.旋转梯形(r("outer_diameter"), r("thick"), r("height_1"), r("height_2"), r("width"))
            aaa.矩形拉伸(r("outer_diameter"), r("r_width"), r("width"), r("thick"), r("fillet"))
            aaa.set_attribute_news(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.bushing_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("outer_diameter"), r("width"), r("thick"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 风罩圈(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from fan_ring", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.圆环_1(r("outer_diameter"), r("inside_diameter"), r("top_diameter"), r("thick"), r("height_1"), r("height_2"), r("fillet"))
            aaa.切槽键(r("outer_diameter"), r("L_width"), r("width"), r("length"), r("array_hole_number"), r("array_hole_angle"))
            aaa.set_attribute(r("name"), r("code"), r("material"))
            aaa.End(r（"dz1"）)
            aaa.fan_ring_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("outer_diameter"), r("L_width"), r("thick"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 转轴(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=y2-450;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from eleven_shaft", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("code") = code$
                r.Read()
            Loop
            Dim aaa As New Module_huangzilong
            aaa.Part_initialization()
            aaa.阶梯轴_1(r("Step1_diameter"), r("Step1_length"), r("hole_diameter"), r("L_length_1"), r("length_1"), r("thick_0"), r("S1_d_tol_type"), r("S1_d_tol_max"), r("S1_d_tol_min"))

            aaa.圆环剪切(r("Step1_diameter"), r("Step1_cut_diameter"), r("Step_cut1_length"))

            For i = 2 To r("Step_number")
                aaa.阶梯轴(r("Step" + i.ToString + "_diameter"), r("Step" + i.ToString + "_length"), r("S" + i.ToString + "_d_tol_type"), r("S" + i.ToString + "_d_tol_max"), r("S" + i.ToString + "_d_tol_min"))
            Next i

            aaa.圆环剪切_2(r("Step2_diameter"), r("Step2_cut1_diameter"), r("Step_cut1_length"), r("Step2_cut2_diameter"), r("Step_cut2_length"), r("fillet_1"))

            aaa.圆环剪切_4(r("Step4_diameter"), r("Step4_cut1_diameter"), r("Step_cut1_length"), r("Step4_cut2_diameter"), r("Step_cut2_length"),
                              r("hole_diameter"), r("L_length_4"), r("length_4"), r("thick_0"), r("fillet_1"))

            aaa.圆环剪切_10(r("Step9_diameter"), r("Step10_cut1_diameter"), r("Step_cut1_length"), r("Step10_diameter"), r("Step10_cut2_diameter"), r("Step_cut2_length"), r("fillet_1"))

            aaa.圆环剪切_11(r("Step10_diameter"), r("Step11_cut1_diameter"), r("Step_cut1_length"), r("Step11_diameter"), r("Step11_cut2_diameter"), r("Step_cut2_length"),
                              r("hole_diameter"), r("L_length_11"), r("length_11"), r("thick_0"), r("fillet_1"))

            aaa.阶梯轴间倒圆角(r("fillet_2"))

            aaa.set_attribute(r("name"), r("code"), r("material"))
            MsgBox(0)
            aaa.End(r（"dz1"）)
            aaa.fan_ring_drw(r("company"), r("name"), r("material"), r("code"), r("dz1"), r("proportion"), r("skills_requirement"), r("outer_diameter"), r("L_width"), r("thick"))
            aaa.End(r（"dz2"）)
        End Sub
        Public Sub 阶梯轴_1（outer_diameter#, thick#, hole_diameter#, L_length#, length#, thick_1#, out_d_tol_type#, out_d_tol_max$, out_d_tol_min$）
            outer_diameter = outer_diameter / 1000
            thick = thick / 1000
            thick_1 = thick_1 / 1000
            hole_diameter = hole_diameter / 1000
            length = length / 1000
            L_length = L_length / 1000

            ' 拉伸阶梯轴1 120×210
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
            SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2) '创造直径outer_diameter_1的圆1                
            DisplayDimension = part.AddDimension2(0, 0, -0.04) '标注尺寸
            DisplayDimension.SetBrokenLeader2(False, 2) '直径标注类型,水平          
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            SetTolvalue(out_d_tol_type, out_d_tol_max, out_d_tol_min) '公差类型,孔,轴
            DisplayDimension.ShowTolParenthesis = True
            特征拉伸(0, thick, False, True, 0, 0, True)

            ' 在阶梯轴1前端 倒角 0.25×45°
            part.Extension.SelectByID2("", "EDGE", 0, outer_diameter / 2, 0, False, 0, Nothing, 0)
            part.FeatureManager.InsertFeatureChamfer(6, 1, 0.0025, 45 * PI / 180, 0, 0, 0, 0)

            ' 在阶梯轴1上 切出一个键槽 190×32
            Dim 基准面1 As SldWorks.Feature
            part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            基准面1 = part.FeatureManager.InsertRefPlane(264, outer_diameter / 2, 0, 0, 0, 0)
            part.ClearSelection2(True)
            part.Extension.SelectByID2("基准面1", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)
            初始设置_new(1)
            part.SketchManager.CreateSketchSlot(0, 0, hole_diameter, -L_length - hole_diameter / 2, 0, 0, -length - L_length + hole_diameter / 2, 0, 0, -length - L_length + hole_diameter / 2, hole_diameter / 2, 0, 1, False)
            初始设置_new(0)
            拉伸切除_new(0, thick_1, True, False, 0, 0, True)

        End Sub
        Public Sub 圆环剪切（outer_diameter#, inside_diameter#, thick#）
            outer_diameter = outer_diameter / 1000
            inside_diameter = inside_diameter / 1000
            thick = thick / 1000

            part.Extension.SelectByRay(0, 0, 100, 0, 0, -1, 0.0005, 2, False, 0, Nothing)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter# / 2)
            拉伸切除_new(0, thick, False, False, 0, 0, True)

        End Sub
        Public Sub 圆环剪切_2（outer_diameter#, inside_diameter#, thick#, Step2_cut2_diameter#, Step_cut2_length#, fillet#）
            Step2_cut2_diameter = Step2_cut2_diameter / 1000
            Step_cut2_length = Step_cut2_length / 1000
            fillet = fillet / 1000

            ' 在阶梯轴1末端 剪切圆环 120×119.5×4.9
            Dim 基准面2 As SldWorks.Feature
            part.FeatureManager.EditRollback(3, "凸台-拉伸3")
            圆环剪切(outer_diameter#, inside_diameter#, thick#)

            ' 在阶梯轴2中端 剪切圆环 130×126×3.2
            part.Extension.SelectByRay(0, 0, 100, 0, 0, -1, 0.0005, 2, False, 0, Nothing)
            基准面2 = part.FeatureManager.InsertRefPlane(264, 0.0712, 0, 0, 0, 0) '0.0712 需要参数化
            part.Extension.SelectByID2("基准面2", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2000) ' 圆环剪切模块 内的参数除了1000，圆环剪切模块 外的参数没有除。注意：不能总体除1000，否则会导致 圆环剪切模块 内的参数除两次1000
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, Step2_cut2_diameter / 2)
            Feature2 = 拉伸切除_new(0, Step_cut2_length, True, False, 0, 0, True)

            ' 在阶梯轴2中端剪切圆环 倒圆角 1
            face1 = Feature2.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).getedges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(0).select2(False, Nothing)
            edge1(1).select2(True, Nothing)
            特征圆角_new(fillet)
            part.FeatureManager.EditRollback(3, "")

        End Sub
        Public Sub 圆环剪切_4（outer_diameter#, inside_diameter#, thick#, Step4_cut2_diameter#, Step_cut2_length#, hole_diameter#, L_length#, length#, thick_1#, fillet#）
            Step4_cut2_diameter = Step4_cut2_diameter / 1000
            Step_cut2_length = Step_cut2_length / 1000
            thick_1 = thick_1 / 1000
            hole_diameter = hole_diameter / 1000
            length = length / 1000
            L_length = L_length / 1000
            fillet = fillet / 1000

            ' 在阶梯轴4 末端 剪切圆环 160×159.5×4.9
            Dim 基准面3, 基准面4 As SldWorks.Feature
            part.FeatureManager.EditRollback(3, "凸台-拉伸5")
            圆环剪切(outer_diameter#, inside_diameter#, thick#)

            ' 在阶梯轴4 中端 剪切圆环 160×159.5×3.2
            part.Extension.SelectByRay(0, 0, 100, 0, 0, -1, 0.0005, 2, False, 0, Nothing)
            基准面3 = part.FeatureManager.InsertRefPlane(264, 0.0532, 0, 0, 0, 0) '0.0532 需要参数化
            part.Extension.SelectByID2("基准面3", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2000)
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, Step4_cut2_diameter / 2)
            Feature2 = 拉伸切除_new(0, Step_cut2_length, True, False, 0, 0, True)

            ' 在阶梯轴4 中端 剪切圆环 倒圆角 1
            face1 = Feature2.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).getedges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(0).select2(False, Nothing)
            edge1(1).select2(True, Nothing)
            特征圆角_new(fillet)

            ' 在阶梯轴4上 切出一个键槽 45×32
            part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            基准面4 = part.FeatureManager.InsertRefPlane(264, outer_diameter / 2000, 0, 0, 0, 0)
            part.ClearSelection2(True)
            part.Extension.SelectByID2("基准面4", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)
            初始设置_new(1)
            part.SketchManager.CreateSketchSlot(0, 0, hole_diameter, -L_length - hole_diameter / 2, 0, 0, -length - L_length + hole_diameter / 2, 0, 0, -length - L_length + hole_diameter / 2, hole_diameter / 2, 0, 1, False)
            初始设置_new(0)
            拉伸切除_new(0, thick_1, True, False, 0, 0, True)
            part.FeatureManager.EditRollback(3, "")

        End Sub
        Public Sub 圆环剪切_10（outer_diameter#, inside_diameter#, thick#, Step10_diameter#, Step10_cut2_diameter#, Step_cut2_length#, fillet#）
            Step10_diameter = Step10_diameter / 1000
            Step10_cut2_diameter = Step10_cut2_diameter / 1000
            Step_cut2_length = Step_cut2_length / 1000
            fillet = fillet / 1000

            ' 在阶梯轴9 末端 剪切圆环 150×119.5×4.9
            Dim 基准面5 As SldWorks.Feature
            part.FeatureManager.EditRollback(3, "凸台-拉伸10")
            圆环剪切(outer_diameter#, inside_diameter#, thick#)
            part.FeatureManager.EditRollback(3, "")

            ' 创造基准面5 距离阶梯轴10前端为 71.2
            part.FeatureManager.EditRollback(3, "切除-拉伸8")
            part.Extension.SelectByRay(0, 0, 100, 0, 0, -1, 0.0005, 2, False, 0, Nothing)
            基准面5 = part.FeatureManager.InsertRefPlane(8, 0.0663, 0, 0, 0, 0) '0.0663 需要参数化

            ' 在阶梯轴10 中端 剪切圆环 130×126×3.2
            part.FeatureManager.EditRollback(3, "凸台-拉伸11")
            part.Extension.SelectByID2("基准面5", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, Step10_diameter / 2)
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, Step10_cut2_diameter / 2)
            Feature2 = 拉伸切除_new(0, Step_cut2_length, False, False, 0, 0, True)

            ' 在阶梯轴10 中端 剪切圆环 倒圆角 1
            face1 = Feature2.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).getedges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(0).select2(False, Nothing)
            edge1(1).select2(True, Nothing)
            特征圆角_new(fillet)
            part.FeatureManager.EditRollback(3, "")

        End Sub
        Public Sub 圆环剪切_11（outer_diameter#, inside_diameter#, thick#, Step11_diameter#, Step11_cut2_diameter#, Step_cut2_length#, hole_diameter#, L_length#, length#, thick_1#, fillet#）
            Step11_diameter = Step11_diameter / 1000
            Step11_cut2_diameter = Step11_cut2_diameter / 1000
            Step_cut2_length = Step_cut2_length / 1000
            thick_1 = thick_1 / 1000
            hole_diameter = hole_diameter / 1000
            length = length / 1000
            L_length = L_length / 1000
            fillet = fillet / 1000

            ' 在阶梯轴10末端 剪切圆环 130×119.5×4.9 
            Dim 基准面6 As SldWorks.Feature
            part.FeatureManager.EditRollback(3, "凸台-拉伸11")
            圆环剪切(outer_diameter#, inside_diameter#, thick#)
            part.FeatureManager.EditRollback(3, "")

            ' 在阶梯轴11末端 倒角 0.25×45°
            part.Extension.SelectByRay(0, 0, 100, 0, 0, -1, 0.0005, 2, False, 0, Nothing)
            part.FeatureManager.InsertFeatureChamfer(6, 1, 0.0025, 45 * PI / 180, 0, 0, 0, 0)

            ' 创造基准面6 距离阶梯轴11前端为 83.2
            part.FeatureManager.EditRollback(3, "切除-拉伸10")
            part.Extension.SelectByRay(0, 0, 100, 0, 0, -1, 0.0005, 2, False, 0, Nothing)
            基准面6 = part.FeatureManager.InsertRefPlane(8, 0.0783, 0, 0, 0, 0) '0.0783 需要参数化
            part.FeatureManager.EditRollback(3, "")

            ' 在阶梯轴11中端 剪切圆环 120×119×3.2
            part.Extension.SelectByID2("基准面6", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, Step11_diameter / 2)
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, Step11_cut2_diameter / 2)
            Feature2 = 拉伸切除_new(0, Step_cut2_length, False, False, 0, 0, True)

            ' 在阶梯轴11中端剪切圆环 倒圆角 1
            face1 = Feature2.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).getedges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(0).select2(False, Nothing)
            edge1(1).select2(True, Nothing)
            特征圆角_new(fillet)

            ' 在阶梯轴11上 切出一个键槽 63×32
            part.Extension.SelectByID2("基准面1", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)
            初始设置_new(1)
            part.SketchManager.CreateSketchSlot(0, 0, hole_diameter, -L_length - hole_diameter / 2, 0, 0, -length - L_length + hole_diameter / 2, 0, 0, -length - L_length + hole_diameter / 2, hole_diameter / 2, 0, 1, False)
            初始设置_new(0)
            拉伸切除_new(0, thick_1, True, False, 0, 0, True)

            ' 隐藏所有基准面
            part.Extension.SelectByID2("基准面1", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("基准面2", "PLANE", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("基准面3", "PLANE", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("基准面4", "PLANE", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("基准面5", "PLANE", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("基准面6", "PLANE", 0, 0, 0, True, 0, Nothing, 0)
            part.BlankRefGeom()

        End Sub
        Public Sub 阶梯轴间倒圆角(fillet#)
            fillet = fillet / 1000

            '在阶梯轴1末端剪切圆环 倒圆角 3
            part.FeatureManager.EditRollback(3, "凸台-拉伸2")
            part.Extension.SelectByID2("切除-拉伸2", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature1 = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature1.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).GetEdges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(0).select2(False, Nothing)
            特征圆角_new(fillet)
            part.FeatureManager.EditRollback(3, "")

            '在阶梯轴2末端剪切圆环 倒圆角 3
            part.FeatureManager.EditRollback(3, "凸台-拉伸3")
            part.Extension.SelectByID2("切除-拉伸3", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature2 = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature2.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).GetEdges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(0).select2(False, Nothing)
            特征圆角_new(fillet)
            part.FeatureManager.EditRollback(3, "")

            '在阶梯轴4 末端 剪切圆环 倒圆角 3
            part.FeatureManager.EditRollback(3, "凸台-拉伸5")
            part.Extension.SelectByID2("切除-拉伸5", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature3 = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature3.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).GetEdges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(1).select2(False, Nothing)
            特征圆角_new(fillet)
            part.FeatureManager.EditRollback(3, "")

            '在阶梯轴9末端剪切圆环 倒圆角 3        
            'part.FeatureManager.EditRollback(3, "凸台-拉伸10")
            part.Extension.SelectByID2("切除-拉伸8", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature4 = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature4.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).GetEdges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(1).select2(False, Nothing)
            特征圆角_new(fillet)
            'part.FeatureManager.EditRollback(3, "")

            '在阶梯轴10末端剪切圆环 倒圆角 3  
            part.Extension.SelectByID2("切除-拉伸10", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature5 = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature5.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).GetEdges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(1).select2(False, Nothing)
            特征圆角_new(fillet)

            '在阶梯轴6 前端  倒角 5×45°  
            part.FeatureManager.EditRollback(3, "凸台-拉伸7")
            part.Extension.SelectByID2("凸台-拉伸6", "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature6 = SelectionMgr.GetSelectedObject6(1, -1)
            face1 = Feature6.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).GetEdges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(1).select2(False, Nothing)
            part.FeatureManager.InsertFeatureChamfer(6, 1, 0.005, 45 * PI / 180, 0, 0, 0, 0)
            part.FeatureManager.EditRollback(3, "")

            '在阶梯轴7 末端  倒角 5×45°
            part.FeatureManager.EditRollback(3, "凸台-拉伸8")
            part.Extension.SelectByRay(0, 0, 100, 0, 0, -1, 0.0005, 2, False, 0, Nothing)
            part.FeatureManager.InsertFeatureChamfer(6, 1, 0.005, 45 * PI / 180, 0, 0, 0, 0)
            part.FeatureManager.EditRollback(3, "")

        End Sub
        Public Sub 阶梯轴（outer_diameter#, thick#, out_d_tol_type#, out_d_tol_max$, out_d_tol_min$）
            outer_diameter = outer_diameter / 1000
            thick = thick / 1000

            part.Extension.SelectByRay(0, 0, 100, 0, 0, -1, 0.0005, 2, False, 0, Nothing)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2) '创造直径outer_diameter_1的圆1 
            DisplayDimension = part.AddDimension2(0, 0, thick + 0.04) '标注尺寸
            DisplayDimension.SetBrokenLeader2(False, 2) '直径标注类型,水平          
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            SetTolvalue(out_d_tol_type, out_d_tol_max, out_d_tol_min) '公差类型,孔,轴
            DisplayDimension.ShowTolParenthesis = True
            特征拉伸(0, thick, False, True, 0, 0, True)

        End Sub
        Public Sub Circle_table(outer_diameter#, thick#, out_d_tol_type#, out_d_tol_max$, out_d_tol_min$， Slot_outer_diameter_Gtol$, Slot_outer_diameter_Gtol_Value$, Slot_outer_diameter_Gtol_datum$, Optional 图纸比例值# = 1)
            '圆凸台(外径,厚,外圆公差类型,外圆上偏差,外圆下偏差)
            outer_diameter = outer_diameter / 1000
            thick = thick / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
            part.SketchManager.InsertSketch(True) '插入新的草图
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2) '用半径画圆
            DisplayDimension = part.AddDimension2(outer_diameter * 2 / 3 * Cos(60 * PI / 180), outer_diameter * 2 / 3 * Sin(60 * PI / 180), 0) '标注尺寸
            DisplayDimension.SetBrokenLeader2(False, 2) '直径标注类型,水平
            If Not out_d_tol_type = 0 Then
                part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
                SetTolvalue(out_d_tol_type, out_d_tol_max, out_d_tol_min) '公差类型,孔,轴
                DisplayDimension.ShowTolParenthesis = True '公差括号
            End If
            If Not Slot_outer_diameter_Gtol = "" Then
                'P1 = part.SketchManager.CreatePoint((Outer_diameter / 2) * Cos(60 * PI / 180), (Outer_diameter / 2) * Sin(60 * PI / 180), 0)
                'P1.Select4(False, Nothing)
                A1Segment = A1
                A1Segment.Select4(False, Nothing)
                part.Extension.SelectByID2(A1.GetName(), "SKETCHSEGMENT", A1.GetRadius * Cos(PI * 70 / 180), A1.GetRadius * Sin(PI * 70 / 180), 0, False, 0, Nothing, 0)
                Dim myGtol As SldWorks.Gtol
                Dim myAnno As SldWorks.Annotation
                myGtol = part.InsertGtol()
                myGtol.SetFrameSymbols2(1, Slot_outer_diameter_Gtol, True, "", False, "", "", "", "")
                myGtol.SetFrameValues(1, Slot_outer_diameter_Gtol_Value, "", Slot_outer_diameter_Gtol_datum, "", "")
                myAnno = myGtol.GetAnnotation()
                myAnno.SetPosition(((outer_diameter / 2) + 0.02 / 图纸比例值) * Cos(PI * 70 / 180), ((outer_diameter / 2) + 0.02 / 图纸比例值) * Sin(PI * 70 / 180), 0)
                myAnno.SetLeader3(3, 0, True, False, False, False)
                'myAnno.SetLeaderAttachmentPointAtIndex(2, (Outer_diameter / 2) * Cos(10 * PI / 180), (Outer_diameter / 2) * Sin(10 * PI / 180), 0)
            End If
            part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, thick, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸,单向,
            '不合并实体,特征影响所有实体,选择特征影响的实体,从基准面开始拉伸


        End Sub
        Public Sub Circle_cut(inside_diameter#, in_d_tol_type#, in_d_tol_max$, in_d_tol_min$, Datum$)
            '圆切除(切除圆直径,切除圆公差类型,切除圆上偏差,切除圆下偏差)       
            inside_diameter = inside_diameter / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
            part.SketchManager.InsertSketch(True) '插入新的草图
            A1Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2) '用半径画圆
            DisplayDimension = part.AddDimension2(inside_diameter * 2 / 3 * Cos(45 * PI / 180), inside_diameter * 2 / 3 * Sin(45 * PI / 180), 0) '标注尺寸
            DisplayDimension.SetBrokenLeader2(False, 2) '直径标注类型,水平
            If Not in_d_tol_type = 0 Then '标注公差
                part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
                SetTolvalue(in_d_tol_type, in_d_tol_max, in_d_tol_min) '公差类型,孔,轴
                DisplayDimension.ShowTolParenthesis = True '公差括号
            End If

            '插入基准
            If Datum = "" Then
            Else
                A1Segment.Select4(False, Nothing)
                Dim myDatumTag As SldWorks.DatumTag
                part.ShowNamedView2("*前视", 1)
                myDatumTag = part.InsertDatumTag2()
                myDatumTag.SetLabel(Datum) '插入基准
                myDatumTag.SetDisplayStyle(False, 2)
                myDatumTag.FilledTriangle = True
                myDatumTag.Shoulder = True
            End If
            sketch = part.SketchManager.ActiveSketch
            part.SketchManager.InsertSketch(True) '结束草图编辑
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '反向贯穿切除,单向
        End Sub
        Public Sub 圆凸台(type%, outer_diameter#, outer_diameter_1#, outer_diameter_2#, thick_1#, thick_2#, angle_1#, corner_radious_1#)

            outer_diameter = outer_diameter / 1000
            outer_diameter_1 = outer_diameter_1 / 1000
            outer_diameter_2 = outer_diameter_2 / 1000
            thick_1 = thick_1 / 1000
            thick_2 = thick_2 / 1000
            angle_1 = angle_1 * PI / 180
            corner_radious_1 = corner_radious_1 / 1000
            If type = 0 Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
                part.SketchManager.InsertSketch(True)
                A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2) '创造直径outer_diameter_1的圆1
                DisplayDimension = part.AddDimension2(0.04, 0.06, 0) '标注圆1尺寸                     
                特征拉伸(0, thick_1, False, True, 0, 0, True) '拉伸thick_1mm的凸台
            ElseIf type = 1 Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
                part.SketchManager.InsertSketch(True)
                A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2) '创造直径outer_diameter_1的圆1
                DisplayDimension = part.AddDimension2(0.04, 0.06, 0) '标注圆1尺寸            
                特征拉伸(0, thick_1, False, True, 0, 0, True) '拉伸thick_1mm的凸台

                A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter_1 / 2) '创造直径outer_diameter_1的圆1
                DisplayDimension = part.AddDimension2(outer_diameter_1 / 4, outer_diameter_1 / 4, 0)
                A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter_2 / 2)
                DisplayDimension = part.AddDimension2(outer_diameter_2 / 3, -outer_diameter_2 / 4, 0)
                Feature拉伸1 = 特征拉伸(0, thick_2, True, True, 0, 0, True)
                Dim 基准面1 As SldWorks.Feature
                part.Extension.SelectByID2("", "FACE", 0, 0, 0, False, 0, Nothing, 0)
                基准面1 = part.FeatureManager.InsertRefPlane(264, 0.225, 0, 0, 0, 0)
                Feature拉伸1.Select2(False, 1)
                基准面1.Select2(True, 2)
                part.FeatureManager.InsertMirrorFeature(False, False, False, False) '特征镜像
                part.ClearSelection2(True)
                part.Extension.SelectByID2("", "FACE", 0, 0, 0, False, 1, Nothing, 0)
                part.Extension.SelectByID2("", "FACE", 0.18, 0, -0.01, True, 2, Nothing, 0)
                part.Extension.SelectByID2("", "FACE", 0.2335, 0, -0.01, True, 2, Nothing, 0)
                'part.Extension.SelectByRay(0, 0, -0.01, 0, 0, 1, 0, 2, False, 1, 0)
                'part.Extension.SelectByRay(0.2, 0, -0.01, -1, 0, 0, 0, 2, True, 2, 0）
                'part.Extension.SelectByRay(0.2, 0, -0.01, 1, 0, 0, 0, 2, True, 2, 0)
                Feature拔模1 = 拔模(angle_1)
                part.Extension.SelectByID2("", "FACE", 0, 0, 0.45, False, 1, Nothing, 0)
                part.Extension.SelectByID2("", "FACE", 0.18, 0, 0.46, True, 2, Nothing, 0)
                part.Extension.SelectByID2("", "FACE", 0.2335, 0, 0.46, True, 2, Nothing, 0)
                Feature拔模2 = 拔模(angle_1)
            End If
            'part.ClearSelection2(True)
            'part.Extension.SelectByID2("", "FACE", 0.2, 0, -0.065, False, 1, Nothing, 0)
            'part.Extension.SelectByID2("", "FACE", 0.2, 0, 0.515, True, 1, Nothing, 0)
            'Feature圆角1 = 特征圆角_new(corner_radious_1)
        End Sub
        Public Sub 圆切除（inside_diameter#, inside_diameter_tol_type#, inside_diameter_tol_max#, inside_diameter_tol_min#, Optional inside_diameter_TolMaxFit$ = "", Optional inside_diameter_TolMinFit$ = "")
            '圆切除(切除圆直径,切除圆公差类型,切除圆上偏差,切除圆下偏差)
            inside_diameter_tol_max = inside_diameter_tol_max / 1000
            inside_diameter_tol_min = inside_diameter_tol_min / 1000
            inside_diameter = inside_diameter / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
            part.SketchManager.InsertSketch(True) '插入新的草图
            part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2) '用半径画圆
            DisplayDimension = part.AddDimension2(-inside_diameter * 2 / 3 * Cos(45 * PI / 180), -inside_diameter * 2 / 3 * Sin(45 * PI / 180), 0) '标注尺寸
            DisplayDimension.SetBrokenLeader2(False, 2) '直径标注类型,水平
            If Not inside_diameter_tol_type = 0 Then '标注公差
                part.EditDimensionProperties2(inside_diameter_tol_type, inside_diameter_tol_max, inside_diameter_tol_min, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
                SetTolvalue(inside_diameter_tol_type, inside_diameter_TolMaxFit, inside_diameter_TolMinFit) '公差类型,孔,轴
                If Not inside_diameter_tol_type = 8 Then
                    DisplayDimension.ShowTolParenthesis = False
                ElseIf inside_diameter_tol_type = 8 Then
                    DisplayDimension.ShowTolParenthesis = True
                End If '公差括号
            End If
            sketch = part.SketchManager.ActiveSketch
            part.SketchManager.InsertSketch(True) '结束草图编辑
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '反向贯穿切除,单向
        End Sub
        Public Sub 圆环(outer_diameter#, inside_diameter#, thick#)
            outer_diameter = outer_diameter / 1000
            inside_diameter = inside_diameter / 1000
            thick = thick / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2)
            part.AddDimension2(inside_diameter * 2 / 3 * Cos(45 * PI / 180), inside_diameter * 2 / 3 * Sin(45 * PI / 180), 0)
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
            part.AddDimension2(outer_diameter * 2 / 3 * Cos(45 * PI / 180), -outer_diameter * 2 / 3 * Sin(45 * PI / 180), 0)
            Feature1 = 特征拉伸(0, thick, False, True, 0, 0, True)
        End Sub
        Public Sub 圆环_1(outer_diameter#, inside_diameter#, top_diameter#, thick#, height_1#, height_2#, fillet#)
            outer_diameter = outer_diameter / 1000
            inside_diameter = inside_diameter / 1000
            top_diameter = top_diameter / 1000
            thick = thick / 1000
            height_1 = height_1 / 1000
            height_2 = height_2 / 1000
            fillet = fillet / 1000

            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            初始设置_new(1)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2)
            A1.select2(False, Nothing)
            草图方法_new("固定")
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
            A2.select2(False, Nothing)
            草图方法_new("固定")
            L1 = part.SketchManager.CreateLine(-inside_diameter / 2, -inside_diameter / 2, 0, inside_diameter / 2, -inside_diameter / 2, 0)
            part.Extension.SelectByID2("", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            L1.select2(True, Nothing)
            DisplayDimension = part.AddDimension2(outer_diameter / 2 + 0.01, -height_1 / 2, 0)
            part.EditDimensionProperties2(2, 0.001, 0.0005, "1.0", "+0.5", False, 2, 2, True, 12, 12, "", "", True, "", "", False)
            修改标注尺寸(height_1)
            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            A1.select2(True, Nothing)
            草图方法_new("重合")
            P1 = L1.GetEndPoint2
            P1.Select4(False, Nothing)
            A1.select2(True, Nothing)
            草图方法_new("重合")
            A1.select2(False, Nothing)
            SketchManager.SketchTrim(0, 0, -inside_diameter / 2, 0)
            L2 = part.SketchManager.CreateLine(-inside_diameter / 2, -inside_diameter / 2, 0, inside_diameter / 2, -inside_diameter / 2, 0)
            L1.select2(False, Nothing)
            L2.select2(True, Nothing)
            DisplayDimension = part.AddDimension2(outer_diameter / 2 + 0.01, 0, 0)
            修改标注尺寸(height_2)
            P1 = L2.GetStartPoint2
            P1.Select4(False, Nothing)
            A2.select2(True, Nothing)
            草图方法_new("重合")
            P1 = L2.GetEndPoint2
            P1.Select4(False, Nothing)
            A2.select2(True, Nothing)
            草图方法_new("重合")
            A2.select2(False, Nothing)
            SketchManager.SketchTrim(0, 0, -outer_diameter / 2, 0)
            P1 = L1.GetStartPoint2
            P2 = L1.GetEndPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图圆角_new(fillet)
            A1.select2(False, Nothing)
            DisplayDimension = part.AddDimension2(inside_diameter * 2 / 3 * Cos(45 * PI / 180), inside_diameter * 2 / 3 * Sin(45 * PI / 180), 0)
            DisplayDimension.SetBrokenLeader2(False, 2)
            part.EditDimensionProperties2(2, 0.001, 0.0005, "+1", "+0.5", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            part.ViewZoomtofit2()
            特征拉伸(0, thick, False, True, 0, 0, True)

            part.Extension.SelectByID2("", "FACE", 0, -height_1 - height_2, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, thick / 2, 0, top_diameter / 2)
            拉伸切除_new(1, 0, False, False, 0, 0, True) ' outer_diameter / 2, 0, height_1 + height_2
        End Sub
        Public Sub 切槽键(outer_diameter#, L_width#, width#, length#, array_hole_number#, array_hole_angle#)
            outer_diameter = outer_diameter / 1000
            L_width = L_width / 1000
            width = width / 1000
            length = length / 1000

            Dim 基准面1 As SldWorks.Feature
            part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, True, 1, Nothing, 0)
            基准面1 = part.FeatureManager.InsertRefPlane(128, 0, 128, 0, 0, 0)
            SelectPlane("基准面1")
            SketchManager.InsertSketch(True)
            part.SketchManager.CreateSketchSlot(1, 0, width, 0, -L_width - width / 2, 0, length / 2, -L_width - width / 2, 0, length / 2, -L_width, 0, -1, False)
            Feature = part.FeatureManager.FeatureCut4(False, False, False, 1, 1, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
            part.Extension.SelectByID2("", "EDGE", outer_diameter / 2, 0, 0, False, 1, Nothing, 0)
            Feature.Select2(True, 4)
            特征阵列_angle(array_hole_number, array_hole_angle)
        End Sub
        Public Sub 旋转梯形(outer_diameter#, thick#, height_1#， height_2#, width#)
            outer_diameter = outer_diameter / 1000
            height_1 = height_1 / 1000
            height_2 = height_2 / 1000
            width = width / 1000
            thick = thick / 1000

            'part.SelectMidpoint()
            'p0 = SelectionMgr.GetSelectedObject6(1, -1)
            SelectPlane("up")
            SketchManager.InsertSketch(True)
            Getsketch = SketchManager.ActiveSketch
            初始设置_new(1)
            DL1 = part.SketchManager.CreateCenterLine(-outer_diameter / 2, -thick / 2, 0, outer_diameter / 2, -thick / 2, 0)
            DL1.Select2(False, Nothing)
            草图方法_new("固定")
            L1 = part.SketchManager.CreateLine(-0.01, -0.01, 0, -0.01, 0.01, 0)
            L1.Select2(False, Nothing)
            草图方法_new("垂直")
            P1 = DL1.GetStartPoint2
            P1.Select4(False, Nothing)
            L1.Select2(True, Nothing)
            草图方法_new("中点")
            L1.Select2(False, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0, 0)
            修改标注尺寸(height_1)
            L1.Select2(False, Nothing)
            草图方法_new("固定")
            L2 = part.SketchManager.CreateLine(-0.1, -0.01, 0, -0.1, 0.01, 0)
            L2.Select2(False, Nothing)
            草图方法_new("垂直")
            L2.Select2(False, Nothing)
            part.SelectMidpoint()
            DL1.Select2(True, Nothing)
            草图方法_new("重合")
            L2.Select2(False, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0, 0)
            修改标注尺寸(height_2)
            P1 = L1.GetStartPoint2
            P2 = L2.GetEndPoint2
            L3 = part.SketchManager.CreateLine(P1.X, P1.Y, 0, P2.X, P2.Y, 0)
            P1 = L1.GetEndPoint2
            P2 = L2.GetStartPoint2
            L4 = part.SketchManager.CreateLine(P1.X, P1.Y, 0, P2.X, P2.Y, 0)
            L1.select2(False, Nothing)
            L2.select2(True, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0, 0)
            修改标注尺寸(width)
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            L1.Select2(False, Nothing)
            part.AddDimension2(-0.12, 0, 0.0125)
            L2.Select2(False, Nothing)
            part.AddDimension2(-0.1, 0, 0.0125)
            P1 = L2.GetStartPoint2
            P2 = part.SketchManager.CreatePoint(-P1.X, P1.Y, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            part.AddDimension2(（P1.X + P2.X) / 2, 0, -0.1)
            DL2 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, -0.03, 0)
            Getsketch.Select2(False, 2)
            DL2.select2(True, 16)
            特征旋转_new()


        End Sub
        Public Sub 圆环拉伸(outer_diameter#, inside_diameter#， thick_1#， width#, Type#, fillet#)
            outer_diameter = outer_diameter / 1000
            inside_diameter = inside_diameter / 1000
            thick_1 = thick_1 / 1000
            width = width / 1000
            fillet = fillet / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2) '创造直径outer_diameter_1的圆1
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2 + thick_1)
            Feature1 = 特征拉伸(0, width - thick_1, False, True, 0, 0, True) '拉伸thick_1mm的凸台
            If Type = 0 Then

                ' 选择了什么就需要用什么对象接收，例如：选择了特征，就需要用特征对象（feature）接收
                part.Extension.SelectByID2("切除-拉伸1", "SOLIDBODY", 0, 0, 0, False, 0, Nothing, 0)
                Dim Feature As Feature
                Feature = SelectionMgr.GetSelectedObject6(1, 0)
                face1 = Feature.GetFaces
                '遍历(1， face1)
                SelectionMgr.AddSelectionListObject(face1(0), Nothing)
                edge1 = face1(0).getedges
                '遍历（1, edge1）
                SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
                edge1(0).select2(False, Nothing)
                特征圆角_new(fillet + thick_1)
                face2 = Feature1.GetFaces
                '遍历(1， face2)
                SelectionMgr.AddSelectionListObject(face2(0), Nothing)
                edge2 = face2(0).getedges
                '遍历（1, edge1）
                SelectionMgr.AddSelectionListObject(edge2(0), Nothing)
                edge2(0).select2(False, Nothing)
                特征圆角_new(fillet)
            End If
            part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
            part.SketchManager.InsertSketch(True)
            P1 = part.SketchManager.CreatePoint(0, outer_diameter / 2, 0)
            P2 = part.SketchManager.CreatePoint(-width, outer_diameter / 2, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, outer_diameter / 2 + 2 * thick_1, width / 2)
            part.SketchManager.InsertSketch(True)
        End Sub
        Public Sub 圆周孔阵列(array_diameter#， array_hole_diameter#, array_hole_angle#, array_hole_num#, relative_X_axis_deflection_angle#)

            array_diameter = array_diameter / 1000
            array_hole_diameter = array_hole_diameter / 1000
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1Segment = part.SketchManager.CreateCircleByRadius(array_diameter / 2, 0, 0, array_hole_diameter / 2)
            A1Segment.Select4(False, Nothing)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * relative_X_axis_deflection_angle / 180) '旋转圆
            A1Segment.Select4(False, Nothing)
            part.Extension.RotateOrCopy(True, array_hole_num - 1, False, 0, 0, 0, 0, 0, 1, -PI * array_hole_angle / 180) '旋转复制,复制的圆不能关于种子圆对称         
            拉伸切除_new(1, 0, True, False, 0, 0, True)
            part.ViewZoomtofit2()
            If relative_X_axis_deflection_angle = 22.5 Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                part.SketchManager.CreateCircleByRadius(0, 0, 0, array_diameter / 2)
                DisplayDimension = part.AddDiameterDimension2(-array_diameter / 4, array_diameter / 4, 0)

                DL1Segment = part.SketchManager.CreateCenterLine(0, 0, 0, array_diameter / 2, 0, 0)
                part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * relative_X_axis_deflection_angle / 180)
                DL2Segment = part.SketchManager.CreateCenterLine(0, 0, 0, array_diameter / 2, 0, 0)
                part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, -PI * relative_X_axis_deflection_angle / 180)
                DL3Segment = part.SketchManager.CreateCenterLine(0, 0, 0, array_diameter / 2, 0, 0)
                DL1Segment.Select4(False, Nothing)
                DL3Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDiameterDimension2(2 * array_diameter / 3 * Cos(PI * array_hole_angle / 180 / 2), 2 * array_diameter / 3 * Sin(PI * array_hole_angle / 180 / 2), 0)
                DL2Segment.Select4(False, Nothing)
                DL3Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDiameterDimension2(2 * array_diameter / 3 * Cos(PI * array_hole_angle / 180 / 2), -2 * array_diameter / 3 * Sin(PI * array_hole_angle / 180 / 2), 0)

                P1 = part.SketchManager.CreatePoint(array_diameter / 2, 0, 0)
                part.SketchManager.CreateCircleByRadius(array_diameter / 2, 0, 0, array_hole_diameter / 2)
                DisplayDimension = part.AddDiameterDimension2(5 * array_diameter / 8, -5 * array_hole_diameter, 0)
                part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, array_hole_num.ToString + "-" + "M", "", True, "", "通孔", False)
                part.SketchManager.InsertSketch(True)

            ElseIf relative_X_axis_deflection_angle = 45 Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                part.SketchManager.CreateCircleByRadius(0, 0, 0, array_diameter / 2)
                DisplayDimension = part.AddDiameterDimension2(-array_diameter / 4, array_diameter / 4, 0)

                DL1Segment = part.SketchManager.CreateCenterLine(0, 0, 0, array_diameter / 2, 0, 0)
                part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * array_hole_angle / 180)

                DL2Segment = part.SketchManager.CreateCenterLine(0, 0, 0, array_diameter / 2, 0, 0)
                part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * relative_X_axis_deflection_angle / 180)

                DL3Segment = part.SketchManager.CreateCenterLine(0, 0, 0, array_diameter / 2, 0, 0)
                part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, -PI * relative_X_axis_deflection_angle / 180)
                DL1Segment.Select4(False, Nothing)
                DL2Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDiameterDimension2(3 * array_diameter / 5 * Sin(PI * (array_hole_angle / 4) / 180), 3 * array_diameter / 5 * Cos(PI * (array_hole_angle / 4) / 180), 0)
                DL2Segment.Select4(False, Nothing)
                DL3Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDiameterDimension2(3 * array_diameter / 5, 0, 0)

                P1 = part.SketchManager.CreatePoint(array_diameter / 2 * Cos(PI * (array_hole_angle / 2) / 180), array_diameter / 2 * Sin(PI * (array_hole_angle / 2) / 180), 0)
                part.SketchManager.CreateCircleByRadius(array_diameter / 2 * Cos(PI * (array_hole_angle / 2) / 180), array_diameter / 2 * Sin(PI * (array_hole_angle / 2) / 180), 0, array_hole_diameter / 2)
                DisplayDimension = part.AddDiameterDimension2(array_diameter / 2, array_diameter / 2 * Sin(PI * (array_hole_angle / 2) / 180), 0)
                part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, array_hole_num.ToString + "-" + "<MOD-DIAM>", "", True, "", "均布", False)
                part.SketchManager.InsertSketch(True)
            End If
        End Sub
        Public Sub 圆周片中槽阵列(inside_diameter#, middle_diameter#, mi_d_tol_type#, mi_d_tol_max$, mi_d_tol_min$, middle_hole_angle#, fillet#,
                                 middle_bottom_length#, middle_middle_length#, middle_length#, middle_top_width#, array_middle_number#, array_middle_angle#)
            inside_diameter = inside_diameter / 1000
            middle_diameter = middle_diameter / 1000
            middle_hole_angle = middle_hole_angle * PI / 180
            fillet = fillet / 1000
            middle_bottom_length = middle_bottom_length / 1000
            middle_middle_length = middle_middle_length / 1000
            middle_length = middle_length / 1000
            middle_top_width = middle_top_width / 1000

            '先约束
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2)
            A1Segment = A1
            A1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0)
            初始设置_new(1)
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, middle_diameter / 2 + 0.01, 0)
            L1 = part.SketchManager.CreateLine(0.001, 0.001, 0, 0.001, 0.002, 0)
            L2 = part.SketchManager.CreateLine(0.002, 0.002, 0, 0.003, 0.004, 0)
            DL1Segment = DL1
            L1Segment = L1
            L2Segment = L2
            DL1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            L1Segment.Select4(False, Nothing)
            草图方法_new("垂直")

            P1 = L1.GetEndPoint2
            P2 = L2.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            P1 = L2.GetEndPoint2
            L1Segment.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X - 0.001, P1.Y, 0)
            修改标注尺寸(middle_hole_angle)

            L3 = part.SketchManager.CreateLine(0.001, 0.005, 0, 0.001, 0.006, 0)
            L3Segment = L3
            L1Segment.Select4(False, Nothing)
            L3Segment.Select4(True, Nothing)
            草图方法_new("共线")

            P1 = L3.GetStartPoint2
            P2 = L2.GetEndPoint2
            L4 = part.SketchManager.CreateLine(P1.X, P1.Y, 0, P2.X, P2.Y, 0)
            L4Segment = L4
            L4Segment.Select4(False, Nothing)
            草图方法_new("水平")

            L5 = part.SketchManager.CreateLine(0.0005, 0.01, 0, 0.001, 0.01, 0)
            L5Segment = L5
            L5Segment.Select4(False, Nothing)
            草图方法_new("水平")
            P1 = L5.GetEndPoint2
            P2 = L5.GetStartPoint2
            P3 = L3.GetEndPoint2
            P1.Select4(False, Nothing)
            P3.Select4(True, Nothing)
            草图方法_new("合并")
            P2.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            草图方法_new("重合")

            '再添加标注
            P1 = L1.GetEndPoint2
            L1Segment.Select4（False, Nothing）
            DisplayDimension = part.AddDimension2(P1.X, P1.Y / 2, 0)
            修改标注尺寸（middle_bottom_length)
            L4Segment.Select4(False, Nothing)
            P1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X * 2, P1.Y * 2, 0)
            修改标注尺寸（middle_middle_length)
            P1 = L1.GetStartPoint2
            L5Segment.Select4(False, Nothing)
            P1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0.005, 0.03, 0)
            修改标注尺寸（middle_length)
            L5Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(0.04, 0.03, 0)
            修改标注尺寸（middle_top_width / 2)

            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            A1Segment.Select4(True, Nothing)
            草图方法_new("重合")

            DL1Segment.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            L2Segment.Select4(True, Nothing)
            L3Segment.Select4(True, Nothing)
            L4Segment.Select4(True, Nothing)
            L5Segment.Select4(True, Nothing)
            草图方法_new("镜像")

            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i

            '添加标注
            P1 = L1.GetStartPoint2
            P2 = L1.GetEndPoint2
            L1Segment.Select4(False, Nothing)
            part.AddDimension2(（P1.X + P2.X) / 2 + 0.005， （P1.Y + P2.Y） / 2, 0)
            P2.Select4(False, Nothing)
            L4Segment.Select4(True, Nothing)
            part.AddDimension2(（P1.X + P2.X) / 2 + 0.02， P2.Y + 0.002, 0)
            L2Segment.Select4(False, Nothing)
            L3Segment.Select4(True, Nothing)
            part.AddDimension2(（P1.X + P2.X) / 2 + 0.008， P2.Y + 0.01, 0)
            P1.Select4(False, Nothing)
            L5Segment.Select4(True, Nothing)
            part.AddDimension2(（P1.X + P2.X) / 2 + 0.03， P2.Y + 0.035, 0)
            P3 = L5.GetEndPoint2
            L5Segment.Select4(False, Nothing)
            part.AddDimension2(0, P3.Y + 0.01, 0)

            初始设置_new(0)
            P1 = L5.GetEndPoint2
            P2 = L2.GetEndPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            part.Extension.SelectByID2("", "SKETCHPOINT", -P1.X, P1.Y, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("", "SKETCHPOINT", -P2.X, P2.Y, 0, True, 0, Nothing, 0)
            草图圆角_new(fillet)
            part.ViewZoomtofit2()

            A1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -inside_diameter / 2, 0)
            Feature1 = 拉伸切除_new(1, 0, True, False, 0, 0, True)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            Feature1.Select2(True, 4)
            特征阵列_angle(array_middle_number, array_middle_angle)

            '添加标注
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A2Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, middle_diameter / 2)
            A2Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-middle_diameter * 2 / 3 * Cos(45 * PI / 180), middle_diameter * 2 / 3 * Sin(45 * PI / 180), 0)
            DisplayDimension.SetBrokenLeader2(False, 2) '直径标注类型,水平
            If Not mi_d_tol_type = 0 Then '标注公差
                part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
                SetTolvalue(mi_d_tol_type, mi_d_tol_max, mi_d_tol_min) '公差类型,孔,轴
                DisplayDimension.ShowTolParenthesis = True '公差括号
            End If

            P1 = part.SketchManager.CreatePoint(0, (middle_diameter - middle_length) / 2, 0)
            P1.Select4(False, Nothing)
            Dim myNote As Object
            Dim myAnnotation As Object
            myNote = part.InsertNote(array_middle_number.ToString + "槽均布")
            myNote.LockPosition = False
            myNote.Angle = 0
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swUNDERLINED, 0, True, False, False, False)
            myAnnotation.SetPosition(P1.Y / 3, 5 * P1.Y / 4, 0)
            part.SketchManager.InsertSketch(True)
        End Sub
        Public Sub 圆周板中槽阵列(inside_diameter#, middle_diameter#, mi_d_tol_type#, mi_d_tol_max$, mi_d_tol_min$, middle_middle_length#, middle_length#, middle_inside_width#, middle_top_width#, array_middle_number#, array_middle_angle#)
            inside_diameter = inside_diameter / 1000
            middle_diameter = middle_diameter / 1000
            middle_middle_length = middle_middle_length / 1000
            middle_length = middle_length / 1000
            middle_top_width = middle_top_width / 1000
            middle_inside_width = middle_inside_width / 1000

            '先约束
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2)
            A1Segment = A1
            A1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0)
            初始设置_new(0)
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, middle_diameter / 2 + 0.01, 0)
            L1 = part.SketchManager.CreateLine(0.001, 0.001, 0, 0.001, 0.002, 0)
            L2 = part.SketchManager.CreateLine(0.002, 0.002, 0, 0.003, 0.002, 0)
            L3 = part.SketchManager.CreateLine(0.003, 0.004, 0, 0.003, 0.006, 0)
            DL1Segment = DL1
            L1Segment = L1
            L2Segment = L2
            L3Segment = L3
            DL1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            L1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            L2Segment.Select4(False, Nothing)
            草图方法_new("水平")
            L3Segment.Select4(False, Nothing)
            草图方法_new("垂直")

            P1 = L1.GetEndPoint2
            P2 = L2.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            P1 = L2.GetEndPoint2
            P2 = L3.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            A1Segment.Select4(True, Nothing)
            草图方法_new("重合")

            DL1Segment.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            L2Segment.Select4(True, Nothing)
            L3Segment.Select4(True, Nothing)
            草图方法_new("镜像")

            初始设置_new(1)
            P1 = L3.GetEndPoint2
            L4 = part.SketchManager.CreateLine(P1.X, P1.Y, 0, -P1.X, P1.Y, 0)
            L4Segment = L4
            A1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -inside_diameter / 2, 0)

            '再添加标注
            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.002, P1.Y + 0.006, 0)
            修改标注尺寸(middle_middle_length)

            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            L4Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.006, P1.Y + 0.034, 0)
            修改标注尺寸(middle_length)

            P1 = L3.GetEndPoint2
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X - 0.002, P1.Y, 0)
            修改标注尺寸(middle_top_width / 2)

            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X - 0.002, P1.Y, 0)
            修改标注尺寸(middle_inside_width / 2)

            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i

            '添加标注
            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.002, P1.Y + 0.006, 0)

            P1 = L1.GetStartPoint2
            P2 = L3.GetEndPoint2
            P1.Select4(False, Nothing)
            L4Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.006, P1.Y + 0.034, 0)

            P1 = L3.GetEndPoint2
            L4Segment.Select4(False, Nothing)
            part.AddDimension2(P1.X + 0.008， P1.Y + 0.01, 0)
            part.EditDimensionProperties2(4, 0.0003, 0, "0.3", "0.3", False, 2, 2, True, 12, 12, "", "", True, "", "", False)

            P1 = L1.GetStartPoint2
            P2 = part.SketchManager.CreatePoint(-P1.X, P1.Y, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2((P1.X + P2.X) / 2, P1.Y - 0.005, 0)
            part.EditDimensionProperties2(4, 0.0003, 0, "0.3", "0.3", False, 2, 2, True, 12, 12, "", "", True, "", "", False)
            part.ViewZoomtofit2()
            初始设置_new(0)

            Feature1 = 拉伸切除_new(1, 0, True, False, 0, 0, True)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            Feature1.Select2(True, 4)
            特征阵列_angle(array_middle_number, array_middle_angle)

            '添加标注
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A2Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, middle_diameter / 2)
            A2Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-middle_diameter * 2 / 3 * Cos(45 * PI / 180), middle_diameter * 2 / 3 * Sin(45 * PI / 180), 0)
            DisplayDimension.SetBrokenLeader2(False, 2) '直径标注类型,水平
            If Not mi_d_tol_type = 0 Then '标注公差
                part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
                SetTolvalue(mi_d_tol_type, mi_d_tol_max, mi_d_tol_min) '公差类型,孔,轴
                DisplayDimension.ShowTolParenthesis = True '公差括号
            End If

            P1 = part.SketchManager.CreatePoint(0, (middle_diameter - middle_length) / 2, 0)
            P1.Select4(False, Nothing)
            Dim myNote As Object
            Dim myAnnotation As Object
            myNote = part.InsertNote(array_middle_number.ToString + "槽均布")
            myNote.LockPosition = False
            myNote.Angle = 0
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swUNDERLINED, 0, True, False, False, False)
            myAnnotation.SetPosition(P1.Y / 3, 5 * P1.Y / 4, 0)
            part.SketchManager.InsertSketch(True)
        End Sub
        Public Sub 圆周顶槽整列(outer_diameter#, top_hole_Left_high#, top_hole_right_high#, top_hole_slot_width#, top_hole_Relative_Y_axis_deflection_angle#, t_h_s_w_tol_type#, t_h_s_w_tol_max$, t_h_s_w_tol_min$， top_hole_angle#， top_hole_width#， top_hole_high#， fillet#, array_top_number#, array_top_angle#)
            outer_diameter = outer_diameter / 1000
            top_hole_Left_high = top_hole_Left_high / 1000
            top_hole_right_high = top_hole_right_high / 1000
            top_hole_slot_width = top_hole_slot_width / 1000
            top_hole_angle = top_hole_angle * PI / 180
            top_hole_width = top_hole_width / 1000
            top_hole_high = top_hole_high / 1000
            fillet = fillet / 1000

            If Not t_h_s_w_tol_type = 0 Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)

                Getsketch = SketchManager.ActiveSketch '接收此草图，包括草图里的所有线

                A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
                A1Segment = A1
                A1Segment.Select4(False, Nothing)
                草图方法_new("固定")
                DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.5, 0)
                L1 = part.SketchManager.CreateLine(-0.01, 0.01, 0, -0.01, 0.02, 0)
                L2 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
                DL1Segment = DL1
                L1Segment = L1
                L2Segment = L2
                DL1Segment.Select4(False, Nothing)
                草图方法_new("固定")
                DL1Segment.Select4(False, Nothing)
                草图方法_new("垂直")
                L1Segment.Select4(False, Nothing)
                草图方法_new("垂直")
                L2Segment.Select4(False, Nothing)
                草图方法_new("垂直")
                P1 = L1.GetEndPoint2
                P2 = L2.GetEndPoint2
                P1.Select4(False, Nothing)
                A1Segment.Select4(True, Nothing)
                草图方法_new("重合")
                P2.Select4(False, Nothing)
                A1Segment.Select4(True, Nothing)
                草图方法_new("重合")
                P1 = L1.GetStartPoint2
                P2 = L2.GetStartPoint2
                L3 = part.SketchManager.CreateLine(P1.X, P1.Y, 0, P2.X, P2.Y, 0)

                L1Segment.Select4(False, Nothing)
                DisplayDimension = part.AddDimension2(P1.X, P1.Y, 0)
                修改标注尺寸（top_hole_Left_high）

                L2Segment.Select4(False, Nothing)
                DisplayDimension = part.AddDimension2(P2.X, P2.Y, 0)
                修改标注尺寸（top_hole_right_high）

                P1.Select4(False, Nothing)
                DL1Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(P1.X, P1.Y, 0)
                修改标注尺寸（top_hole_slot_width / 2）

                P2.Select4(False, Nothing)
                DL1Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(P1.X, P1.Y, 0)
                修改标注尺寸（top_hole_slot_width / 2）

                A1Segment.Select4(False, Nothing)
                SketchManager.SketchTrim(0, 0, -outer_diameter / 2, 0)

                sketch = SketchManager.ActiveSketch
                SketchSegments = sketch.GetSketchSegments
                For i = 0 To UBound(SketchSegments)
                    SketchSegment = SketchSegments(i)
                    [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                    part.SketchConstraintsDelAll()
                Next i

                旋转草图_new(DL1, top_hole_Relative_Y_axis_deflection_angle)
                拉伸切除_new(1, 0, True, False, 0, 0, True)
                '插入标注
                Getsketch.Select2(False, Nothing)
                SketchManager.InsertSketch(True)
                P1 = L2.GetEndPoint2
                P2 = L2.GetStartPoint2
                L2Segment.Select4(False, Nothing)
                part.AddDimension2((P1.X + P2.X) / 2 + 0.005, (P1.Y + P2.Y) / 2, 0)

                P1 = L1.GetEndPoint2
                P2 = L1.GetStartPoint2
                L1Segment.Select4(False, Nothing)
                part.AddDimension2((P1.X + P2.X) / 2 - 0.01, (P1.Y + P2.Y) / 2, 0)

                P1.Select4(False, Nothing)
                L2Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(P1.X + 0.005, P1.Y + 0.01, 0)
                If Not t_h_s_w_tol_type = 0 Then '标注公差
                    part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "", "", True, "", "", False)
                    SetTolvalue(t_h_s_w_tol_type, t_h_s_w_tol_max, t_h_s_w_tol_min) '公差类型,孔,轴
                    DisplayDimension.ShowTolParenthesis = True '公差括号
                End If
                初始设置_new(1)
                DL2Segment = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.5, 0)
                DL2Segment.Select4(False, Nothing)
                草图方法_new("垂直")
                DL2Segment.Select4(False, Nothing)
                草图方法_new("固定")
                DL1Segment.Select4(False, Nothing)
                DL2Segment.Select4(True, Nothing)
                part.AddDimension2(0.005, outer_diameter / 4, 0)
                初始设置_new(0)
                SketchManager.InsertSketch(True)
            End If
            SelectPlane("front")
            SketchManager.InsertSketch("true")
            Getsketch = SketchManager.ActiveSketch
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0)
            初始设置_new(1)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
            A1Segment = A1
            A1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, outer_diameter / 2, 0)
            DL1Segment = DL1
            DL1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")

            L1 = part.SketchManager.CreateLine(-0.02, 0.01, 0, -0.01, 0.02, 0)
            L1Segment = L1
            P1 = L1.GetStartPoint2
            DL1Segment.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.005, P1.Y - 0.005, 0)
            修改标注尺寸(top_hole_angle)

            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.01, P1.Y - 0.01, 0)
            修改标注尺寸(top_hole_width / 2)

            L1Segment.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            草图方法_new("镜像")
            L2Segment = part.SketchManager.CreateLine(P1.X, P1.Y, 0, -P1.X, P1.Y, 0)
            P3 = L1.GetEndPoint2
            P3.Select4(False, Nothing)
            A1Segment.Select4(True, Nothing)
            草图方法_new("重合")
            P1 = DL1.GetEndPoint2
            P1.Select4(False, Nothing)
            草图方法_new("固定")
            P1.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.01, P1.Y + 0.01, 0)
            修改标注尺寸(top_hole_high)
            part.ClearSelection2(True)

            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i

            '插入标注
            P1 = L1.GetStartPoint2
            P2 = part.SketchManager.CreatePoint(-P1.X, P1.Y, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            part.AddDimension2(（P1.X + P2.X) / 2， （P1.Y + P2.Y） / 2 - 0.005, 0)
            DL2Segment = part.SketchManager.CreateCenterLine(P1.X, P1.Y, 0, P1.X, P1.Y - 0.01, 0)
            L1Segment.Select4(False, Nothing)
            DL2Segment.Select4(True, Nothing)
            part.AddDimension2(P1.X - 0.008， P1.Y - 0.05, 0)
            P1 = DL1.GetEndPoint2
            P1.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            part.AddDimension2(P1.X， P1.Y + 0.005, 0)

            初始设置_new(0)
            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            part.Extension.SelectByID2("", "SKETCHPOINT", -P1.X, P1.Y, 0, True, 0, Nothing, 0)
            草图圆角_new(fillet)
            part.ViewZoomtofit2()

            A1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -outer_diameter / 2, 0)

            Feature1 = 拉伸切除_new(1, 0, True, False, 0, 0, True)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            Feature1.Select2(True, 4)
            特征阵列_angle(array_top_number, array_top_angle)

            SelectPlane("front")
            SketchManager.InsertSketch(True)
            P1 = part.SketchManager.CreatePoint(0, outer_diameter / 2, 0)
            P1.Select4(False, Nothing)
            Dim myNote As Object
            Dim myAnnotation As Object
            myNote = part.InsertNote(array_top_number.ToString + "槽均布")
            myNote.LockPosition = False
            myNote.Angle = 0
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swUNDERLINED, 0, True, False, False, False)
            myAnnotation.SetPosition(P1.Y / 3, 5 * P1.Y / 4, 0)
            part.SketchManager.InsertSketch(True)
        End Sub
        Public Sub 矩形切除(outer_diameter#， inside_diameter#， open_width#， thick_1#)
            outer_diameter = outer_diameter / 1000
            inside_diameter = inside_diameter / 1000
            open_width = open_width / 1000
            thick_1 = thick_1 / 1000

            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            初始设置_new(1)
            part.SketchManager.CreateCornerRectangle(-3 * outer_diameter / 4， open_width / 2， 0， -1 * inside_diameter / 4， -open_width / 2， 0)
            初始设置_new(0)
            拉伸切除_new(1, 0, True, False, 0, 0, True)

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            P1 = part.SketchManager.CreatePoint(-outer_diameter / 2， open_width / 2， 0)
            P2 = part.SketchManager.CreatePoint(-outer_diameter / 2， -open_width / 2， 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(-3 * outer_diameter / 5, -1 * outer_diameter / 4, 0)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "", "Max", True, "", "", False) '前、后、上、下
            part.SketchManager.InsertSketch(True)

            part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            P1 = part.SketchManager.CreatePoint(0， outer_diameter / 2， 0)
            P2 = part.SketchManager.CreatePoint(0， -outer_diameter / 2， 0)
            P3 = part.SketchManager.CreatePoint(0， inside_diameter / 2， 0)
            P4 = part.SketchManager.CreatePoint(0， -inside_diameter / 2， 0)
            P5 = part.SketchManager.CreatePoint(-thick_1， outer_diameter / 2， 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, 0, 6 * thick_1)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            P3.Select4(False, Nothing)
            P4.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, 0, 3 * thick_1)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            P1.Select4(False, Nothing)
            P5.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, 4 * outer_diameter / 7, thick_1 / 2)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomtofit2()
        End Sub
        Public Sub 矩形拉伸(outer_diameter#, r_width#, width#, thick#, fillet#)
            outer_diameter = outer_diameter / 1000
            r_width = r_width / 1000
            width = width / 1000
            thick = thick / 1000
            fillet = fillet / 1000

            Dim Displaydimention As SldWorks.DisplayDimension
            Dim 基准面1 As SldWorks.Feature
            SelectPlane("up")
            基准面1 = part.FeatureManager.InsertRefPlane(8, outer_diameter / 2, 0, 0, 0, 0)
            part.Extension.SelectByID2("基准面1", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)
            Getsketch = SketchManager.ActiveSketch
            初始设置_new(1)
            part.SketchManager.CreateCornerRectangle(-r_width / 2， 0， 0， r_width / 2， -thick， 0)
            P3 = part.SketchManager.CreatePoint(-r_width / 2, 0, 0)
            P4 = part.SketchManager.CreatePoint(r_width / 2, 0, 0)
            P3.Select4(False, Nothing)
            P4.Select4(True, Nothing)
            Displaydimention = part.AddDimension2(0, 0, -0.02)
            'Displaydimention.LeaderVisibility = 2 '或者1
            'Displaydimention.WitnessVisibility = 2 '或者1‘隐藏尺寸线和延伸线

            P1 = part.SketchManager.CreatePoint(-0.025 / 2, 0, 0)
            P2 = part.SketchManager.CreatePoint(0.025 / 2, 0, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            Displaydimention = part.AddDimension2(0, 0, -0.01)
            初始设置_new(0)
            part.Extension.SelectByID2("", "FACE", 0, outer_diameter / 2 + width, thick / 2, True, 1, Nothing, 0)
            part.FeatureManager.FeatureExtrusion2(False, False, False, 4, 2, 0.01, 0.01, False, False, False, False, 0, 0, False, False, False, False, True, True, True, 0, 0, False)
            part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 2, Nothing, 0)
            part.Extension.SelectByID2("凸台-拉伸2", "BODYFEATURE", 0, 0, 0, True, 1, Nothing, 0)
            part.FeatureManager.InsertMirrorFeature(False, False, False, False)
            part.Extension.SelectByID2("", "FACE", 0, outer_diameter / 2 + width, thick / 2, False, 1, Nothing, 0)
            face = SelectionMgr.GetSelectedObject6(1, -1)
            edge1 = face.GetEdges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(1).select2(False, 4096)
            edge1(3).select2(True, 4096)
            edge1(5).select2(True, 4096)
            edge1(7).select2(True, 4096)
            edge1(9).select2(True, 4096)
            edge1(11).select2(True, 4096)
            edge1(13).select2(True, 4096)
            edge1(15).select2(True, 4096)
            part.FeatureManager.InsertFeatureChamfer(6, 2, fillet, 0, fillet, 0, 0, 0)
            Getsketch.Select2(False, Nothing)
            SketchManager.InsertSketch(True)

        End Sub
        Public Sub 旋转_薄壁(out_diameter#, inside_diameter#, width#, thick#， fillet#)
            out_diameter = out_diameter / 1000
            width = width / 1000
            inside_diameter = inside_diameter / 1000
            thick = thick / 1000
            fillet = fillet / 1000
            初始设置_new(1)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0)
            part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            DL1Segment = part.SketchManager.CreateCenterLine(0, 0, 0, width, 0, 0)
            L1Segment = part.SketchManager.CreateLine(0, -inside_diameter / 2, 0, 0, -out_diameter / 2 + thick, 0)
            L2Segment = part.SketchManager.CreateLine(0, -out_diameter / 2 + thick, 0, width, -out_diameter / 2 + thick, 0)
            L1Segment.Select2(False, 2)
            L2Segment.Select2(True, 2)
            DL1Segment.Select2(True, 16)
            Feature = part.FeatureManager.FeatureRevolve2(True, True, True, False, False, False, 0, 0, 6.2831853071796, 0, False, False, 0.01, 0.01, 0, thick, 0, True, True, True)
            初始设置_new(0)
            part.ViewZoomtofit2()
            face1 = Feature.GetFaces
            '遍历(1， face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(2).getedges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge2 = face1(4).getedges
            '遍历(1, edge2)
            SelectionMgr.AddSelectionListObject(edge2(0), Nothing)

            edge1(0).select2(False, Nothing)
            特征圆角_new(fillet)
            edge2(0).select2(False, Nothing)
            特征圆角_new(fillet + thick)

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            P1 = part.SketchManager.CreatePoint(0, inside_diameter / 2, 0)
            P2 = part.SketchManager.CreatePoint(0, -inside_diameter / 2, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(inside_diameter / 4, inside_diameter / 3, 0)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            part.SketchManager.InsertSketch(True)

            part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            P1 = part.SketchManager.CreatePoint(0, out_diameter / 2, 0)
            P2 = part.SketchManager.CreatePoint(0, -out_diameter / 2, 0)
            P3 = part.SketchManager.CreatePoint(-thick, out_diameter / 2, 0)
            P4 = part.SketchManager.CreatePoint(width, out_diameter / 2, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, 0, width)
            part.EditDimensionProperties2(4, 0.0005, 0, "0.5", "0.5", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            P4.Select4(False, Nothing)
            P3.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, out_diameter / 2 + thick, -（width + thick) / 2)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "", "", True, "", "", False)
            part.SketchManager.InsertSketch(True)

        End Sub
        Public Sub 旋转_拉伸(top_diameter#, middle_1_diameter#， middle_2_diameter#, bottom_diameter#, bottom_width#, b_w_tol_type#, b_w_tol_max$, b_w_tol_min$, middle_1_width#, top_width#, bottom_middle_angle#)
            top_diameter = top_diameter / 1000
            bottom_diameter = bottom_diameter / 1000
            middle_1_diameter = middle_1_diameter / 1000
            middle_2_diameter = middle_2_diameter / 1000
            bottom_width = bottom_width / 1000
            middle_1_width = middle_1_width / 1000
            top_width = top_width / 1000
            bottom_middle_angle = bottom_middle_angle * PI / 180


            SelectPlane("front")
            SketchManager.InsertSketch(True)
            Getsketch = SketchManager.ActiveSketch
            DL1Segment = part.SketchManager.CreateCenterLine(-0.3, 0, 0, 0.3, 0, 0)
            L1 = part.SketchManager.CreateLine(-0.01, 0.01, 0, 0.01, 0.01, 0)
            L1Segment = L1
            DL1Segment.Select4(False, Nothing)
            草图方法_new("水平")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            L1Segment.Select4(False, Nothing)
            草图方法_new("水平")
            L1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            修改标注尺寸(bottom_width)
            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            修改标注尺寸(bottom_diameter / 2)

            L2 = part.SketchManager.CreateLine(-0.01, 0.01, 0, -0.01, 0.02, 0)
            L2Segment = L2
            L2Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            P1 = L1.GetStartPoint2
            P2 = L2.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            P1 = L2.GetEndPoint2
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            修改标注尺寸(middle_1_diameter / 2)

            L3 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            L3Segment = L3
            L3Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            P1 = L1.GetEndPoint2
            P2 = L3.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            P1 = L3.GetEndPoint2
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            修改标注尺寸(middle_2_diameter / 2)

            L4 = part.SketchManager.CreateLine(0.005, 0.02, 0, 0.01, 0.02, 0)
            L4Segment = L4
            L4Segment.Select4(False, Nothing)
            草图方法_new("水平")
            P1 = L3.GetEndPoint2
            P2 = L4.GetEndPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            L5 = part.SketchManager.CreateLine(0.005, 0.02, 0, 0.005, 0.03, 0)
            L5Segment = L5
            L5Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            P1 = L4.GetStartPoint2
            P2 = L5.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            P2 = L5.GetStartPoint2
            P2.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            修改标注尺寸(middle_1_width)
            P1 = L5.GetEndPoint2
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            修改标注尺寸(top_diameter / 2)

            L6 = part.SketchManager.CreateLine(-0.005, 0.03, 0, 0.005, 0.03, 0)
            L6Segment = L6
            L6Segment.Select4(False, Nothing)
            草图方法_new("水平")
            P1 = L5.GetEndPoint2
            P2 = L6.GetEndPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            L6Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            修改标注尺寸(top_width)

            L7 = part.SketchManager.CreateLine(-0.005, 0.03, 0, -0.005, 0.02, 0)
            L7Segment = L7
            L7Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            P1 = L6.GetStartPoint2
            P2 = L7.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            L8 = part.SketchManager.CreateLine(-0.01, 0.02, 0, -0.02, 0.03, 0)
            L8Segment = L8
            P1 = L2.GetEndPoint2
            P2 = L8.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            P1 = L8.GetEndPoint2
            L8Segment.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X - 0.01, P1.Y - 0.01, 0)
            修改标注尺寸(bottom_middle_angle)
            P1 = L8.GetEndPoint2
            L8Segment.Select4(False, Nothing)
            part.SketchManager.SketchTrim(0, P1.X, P1.Y, 0)
            P2 = L7.GetEndPoint2
            L7Segment.Select4(False, Nothing)
            part.SketchManager.SketchTrim(0, P2.X, P2.Y, 0)

            P1 = L1.GetStartPoint2
            P2 = L1.GetEndPoint2
            P1.Select4(False, Nothing)
            草图倒角_1_new(1 / 1000, 45)
            P2.Select4(False, Nothing)
            草图倒角_1_new(1 / 1000, 45)

            P1 = L6.GetEndPoint2
            P1.Select4(False, Nothing)
            草图圆角_new(2 / 1000)

            P1 = L4.GetStartPoint2
            P1.Select4(False, Nothing)
            草图圆角_new(2 / 1000)

            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            '标注尺寸
            P1 = L2.GetStartPoint2
            L2Segment.Select4(False, Nothing)
            L3Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X - 0.02, P1.Y - 0.1, 0)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "", "", True, "", "", False)
            SetTolvalue(b_w_tol_type, b_w_tol_max, b_w_tol_min) '公差类型,孔,轴
            DisplayDimension.ShowTolParenthesis = True

            P1 = L5.GetStartPoint2
            L2Segment.Select4(False, Nothing)
            L5Segment.Select4(True, Nothing)
            part.AddDimension2(P1.X + 0.01, P1.Y + 0.024, 0)

            P1 = L6.GetStartPoint2
            P1.Select4(False, Nothing)
            L5Segment.Select4(True, Nothing)
            part.AddDimension2(P1.X + 0.004, P1.Y + 0.01, 0)

            DL2 = part.SketchManager.CreateCenterLine(0.01, 0.01, 0, 0.02, 0.01, 0)
            DL2Segment = DL2
            DL2Segment.Select4(False, Nothing)
            草图方法_new("水平")
            P1 = DL2.GetEndPoint2
            P2 = L8.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            P1 = L8.GetStartPoint2
            DL2Segment.Select4(False, Nothing)
            L8Segment.Select4(True, Nothing)
            part.AddDimension2(P1.X - 0.004, P1.Y + 0.002, 0)

            P1 = L6.GetEndPoint2
            P2 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            part.AddDimension2(P1.X + 0.06, 0, 0)
            part.EditDimensionProperties2(2, 0, -0.0002, "0", "-0.2", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)

            P1 = L2.GetEndPoint2
            P2 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            part.AddDimension2(P1.X - 0.04, 0, 0)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)

            P1 = L3.GetEndPoint2
            P2 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            part.AddDimension2(P1.X + 0.03, 0, 0)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)

            P1 = L1.GetEndPoint2
            P2 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            part.AddDimension2(P1.X + 0.01, 0, 0)
            part.EditDimensionProperties2(2, -0.0005, -0.0008, "-0.05", "-0.08", False, 2, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)

            Getsketch.Select2(False, 2)
            DL1Segment.Select2(True, 16)
            Feature = 特征旋转_new()
            face1 = Feature.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(6).getedges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            edge1(0).select2(False, Nothing)
            特征圆角_new(2 / 1000)
        End Sub
        Public Sub 偏心圆周孔阵列(Array_number#, hole_number#, relative_Y_axis_deflection_angle#, hole_angle#， center_distance#, diameter#，
                                   Optional Phase_angle# = 0, Optional deflection_distance_Y# = 0， Optional 图纸比例值# = 1， Optional 尺寸方向% = 1)
            '阵列数#, 孔数#, 相对Y轴偏转角度#, 孔间角度#， 圆心距#, 直径#， 偏转距离Y#
            'Array number#, hole number#, relative Y axis deflection angle#, hole angle#, center distance#, diameter#, deflection distance Y#
            center_distance = center_distance / 1000
            diameter = diameter / 1000
            deflection_distance_Y = deflection_distance_Y / 1000


            Dim arc1 As SldWorks.SketchArc
            Dim line1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, arc2, line01, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置(0)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, center_distance, 0, diameter / 2)

            part.ViewZoomtofit2()
            arc1Segment = arc1




            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            arc1Segment.Select4(False, Nothing)
            line01.Select4(True, Nothing)

            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * relative_Y_axis_deflection_angle / 180)

            part.Extension.RotateOrCopy(True, hole_number - 1, False, 0, 0, 0, 0, 0, 1, PI * hole_angle / 180)

            part.ClearSelection2(True)
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 0, deflection_distance_Y, 0)

            arc1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDiameterDimension2(arc1.GetCenterPoint2.x + arc1.GetRadius * Cos(60 * PI / 180) + 0.01 / 图纸比例值, arc1.GetCenterPoint2.y + arc1.GetRadius * Sin(60 * PI / 180) + 0.01 / 图纸比例值, 0)
            If Not hole_number = 1 Then
                part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, hole_number.ToString + "×" + "<MOD-DIAM>", "", True, "", "", "", False, 1, "")

            End If



            arc1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)

            part.FeatureManager.FeatureCircularPattern5(Array_number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)

            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


            'If deflection_distance_Y# = 0 Then
            '    arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, center_distance#)
            '    SketchSegment = arc1
            '    If SketchSegment Is Nothing Then
            '    Else
            '        SketchSegment.Select4(False, Nothing)
            '        DisplayDimension = part.AddDimension2((center_distance#) * 0.9 * Cos((140 + Phase_angle) * PI / 180), (center_distance#) * 0.9 * Sin((140 + Phase_angle) * PI / 180), 0)
            '        SketchSegment.Select4(False, Nothing)
            '        SketchManager.CreateConstructionGeometry() '设为构造线
            '    End If
            'End If
            If Not center_distance = 0 Then
                part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                P1 = part.SketchManager.CreatePoint(0, deflection_distance_Y, 0)
                P1.Select4(False, Nothing)
                辅助圆弧尺寸(P1, arc1.IGetCenterPoint2， 尺寸方向)
                part.SketchManager.InsertSketch(True)
                part.ViewZoomtofit2()
            End If

        End Sub
        Public Sub 中心圆槽(相对Y轴偏转角度#, 直径#, 槽宽#, 左高#, 右高#， Optional slot_width_TolType% = 8, Optional slot_width_TolMax# = 0, Optional slot_width_TolMin# = 0, Optional slot_width_TolMaxFit$ = "JS9", Optional slot_width_TolMinFit$ = "",
                                  Optional middle_hole_diameter_TolType% = 8, Optional middle_hole_diameter_TolMax# = 0, Optional middle_hole_diameter_TolMin# = 0, Optional middle_hole_diameter_TolMaxFit$ = "H8",
                                    Optional middle_hole_diameter_TolMinFit$ = "", Optional Datum$ = "A"， Optional 图纸比例值# = 1) '圆底到槽顶高
            直径 = 直径 / 1000
            槽宽 = 槽宽 / 1000
            左高 = 左高 / 1000
            右高 = 右高 / 1000
            slot_width_TolMax = slot_width_TolMax / 1000
            slot_width_TolMin = slot_width_TolMin / 1000
            middle_hole_diameter_TolMax = middle_hole_diameter_TolMax / 1000
            middle_hole_diameter_TolMin = middle_hole_diameter_TolMax / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.1, 0)
            L1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0) 'L1竖直
            L2 = part.SketchManager.CreateLine(0.02, 0.02, 0, 0.03, 0.02, 0) 'L2水平
            L3 = part.SketchManager.CreateLine(0.03, 0.04, 0, 0.03, 0.05, 0) 'L3竖直
            A3 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 直径 / 2)
            p0 = part.SketchManager.CreatePoint(0, -直径 / 2000, 0)
            DL2 = part.SketchManager.CreateCenterLine(0, -直径 / 2, 0, -0.001, -直径 / 2, 0)
            DL2Segment = DL2
            L1Segment = L1
            L2Segment = L2
            L3Segment = L3
            A3Segment = A3

            L1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            L3Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            DL2Segment.Select4(False, Nothing)
            草图方法_new("固定")
            A3Segment.Select4(False, Nothing)
            草图方法_new("固定")
            A3Segment.Select4(False, Nothing)
            part.AddDimension2(-直径 / 2 / 2, -直径 / 2 / 2, 0) '标注A3
            L2Segment.Select4(False, Nothing)

            p0.Select4(False, Nothing)
            草图方法_new("固定")
            DL2Segment.Select4(False, Nothing)
            草图方法_new("固定")

            P1 = L1.GetStartPoint2()
            P1.Select4(False, Nothing)
            A3Segment.Select4(True, Nothing)
            草图方法_new("重合")
            P1 = L1.GetEndPoint2()
            P2 = L2.GetStartPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            P1 = L3.GetStartPoint2()
            P1.Select4(False, Nothing)
            A3Segment.Select4(True, Nothing)
            草图方法_new("重合")
            P1 = L3.GetEndPoint2()
            P2 = L2.GetEndPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            '注意添加尺寸的顺序,要求添加尺寸后草图形状结构不发生变化
            P1 = L1.GetEndPoint2()
            P1.Select4(False, Nothing)
            DL2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X * 2, P1.Y - 直径 / 2, 0)
            修改标注尺寸(右高）
            '选择 点与直线 标注在于：只会标注与直线垂直的标注尺寸
            P1 = L3.GetEndPoint2()
            P1.Select4(False, Nothing)
            DL2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X * 2, P1.Y - 直径 / 2, 0)
            修改标注尺寸(左高)
            '选择 点与点 需要添加标注的 是竖直 还是水平 尺寸
            P1 = L2.GetEndPoint2()
            P1.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X - 槽宽 / 2, P1.Y + 0.01, 0)
            修改标注尺寸(槽宽)

            p0.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.01, 0.01, 0)
            修改标注尺寸(槽宽 / 2)


            part.Extension.SelectByID2(DisplayDimension.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            part.EditDelete()


            A3Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 直径 / 2, 0) '修剪到最近端           
            'A3Segment.Select4(False, Nothing)
            'SketchManager.SketchTrim(0, 0, 直径 / 2, 0)

            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            part.SketchConstraintsDelAll() '删除所有的标注


            '添加尺寸注释
            P1 = L3.GetEndPoint2()
            DL2Segment.Select4(False, Nothing)
            P1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(-(（槽宽 / 2） + 0.01 / 图纸比例值), 0, 0)
            'part.EditDimensionProperties2(2, 0.2, 0, "", "", True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = 2
            DimensionTolerance.SetValues(0, 0.2 / 1000)
            DisplayDimension.ShowTolParenthesis = False


            If Not 左高 = 右高 Then
                P1 = L3.GetEndPoint2
                P2 = L1.GetEndPoint2
                P1.Select4(False, Nothing)
                P2.Select4(True, Nothing)
                DisplayDimension = part.AddVerticalDimension2((P1.X - P2.X) / 2 - 0.01 / 图纸比例值, (P1.Y + P2.Y) / 2, 0)
                'P1P2VD(P1, P2, P1, 0.01 / 图纸比例值)   标注P1 P2 的竖直尺寸
            End If

            P1 = L2.GetStartPoint2
            P2 = L2.GetEndPoint2
            DL3 = part.SketchManager.CreateCenterLine(P1.X, P1.Y, 0, P1.X, P1.Y + 0.001, 0)
            DL3Segment = DL3
            DL3Segment.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2((P1.X + P2.X) / 2, (P1.Y + P2.Y) / 2 - 0.02 / 图纸比例值, 0)
            part.EditDimensionProperties2(slot_width_TolType, slot_width_TolMax#, slot_width_TolMin#, slot_width_TolMaxFit, slot_width_TolMinFit, True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            Dimension = DisplayDimension.GetDimension2(0) '显示尺寸对象的获得尺寸的方法，返回尺寸对象
            DimensionTolerance = Dimension.Tolerance '尺寸对象的公差属性，返回尺寸公差对象
            DimensionTolerance.Type = slot_width_TolType '尺寸公差对象的类型属性’返回槽宽公差类型=8（8为与公差配套）
            DimensionTolerance.SetFitValues(slot_width_TolMaxFit, slot_width_TolMinFit) '尺寸公差对象的修改配合值方法，设置公差孔配合和轴配合值 （槽宽公差上偏差配合=JS9,槽宽公差下偏差配合=0）
            DisplayDimension.ShowTolParenthesis = True '显示括号


            A3Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-0.5 * 直径 / 2, 0.5 * 直径 / 2, 0)
            DisplayDimension.Diametric = True
            part.EditDimensionProperties2(middle_hole_diameter_TolType%, middle_hole_diameter_TolMax#, middle_hole_diameter_TolMin#, middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = middle_hole_diameter_TolType%
            DimensionTolerance.SetFitValues(middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$)
            DisplayDimension.ShowTolParenthesis = True '显示括号
            'If Datum = "" Then
            'Else
            '    part.Extension.SelectByID2(A3Segment.GetName(), "SKETCHSEGMENT", A3.GetRadius * Cos(PI * (110 - 相对Y轴偏转角度) / 180), A3.GetRadius * Sin(PI * (110 - 相对Y轴偏转角度) / 180), 0, False, 0, Nothing, 0)
            '    Dim myDatumTag As SldWorks.DatumTag
            '    part.ShowNamedView2("*前视", 1)
            '    myDatumTag = part.InsertDatumTag2()
            '    myDatumTag.SetLabel(Datum) '插入基准
            '    myDatumTag.SetDisplayStyle(False, 2)
            '    myDatumTag.FilledTriangle = True
            '    myDatumTag.Shoulder = True
            'End If

            '旋转草图(DL1, 相对Y轴偏转角度)

            'part.FeatureManager.FeatureCut4(True, False, True, 1, 0, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
            拉伸切除_new(1, 0, True, False, 0, 0, True)

        End Sub
        Public Sub 瓶型槽(top_hole_diameter#, bottom_hole_diameter#, top_width#, middle_1_width#, middle_2_width#, bottom_width#, top_length#， middle_length#， bottom_length#， top_middle_angle#， top_Array_number%， top_hole_angle#,
                             Optional top_hole_diameter_TolType% = 8, Optional top_hole_diameter_TolMax# = 0, Optional top_hole_diameter_TolMin# = 0, Optional top_hole_diameter_TolMaxFit$ = "", Optional top_hole_diameter_TolMinFit$ = "",
                                Optional bottom_hole_diameter_TolType% = 8, Optional bottom_hole_diameter_TolMax# = 0, Optional bottom_hole_diameter_TolMin# = 0, Optional bottom_hole_diameter_TolMaxFit$ = "", Optional bottom_hole_diameter_TolMinFit$ = "h10")
            ' 直径1#, 直径2#, 槽宽1#, 槽宽2#, 槽宽3#, 槽宽4#, 高1#， 高2#， 高3#， 角度#， 特征个数#， 两间特征角度#,
            '中文最好改为英文
            top_hole_diameter = top_hole_diameter / 1000
            bottom_hole_diameter = bottom_hole_diameter / 1000
            top_width = top_width / 1000
            middle_1_width = middle_1_width / 1000
            middle_2_width = middle_2_width / 1000
            bottom_width = bottom_width / 1000
            top_length = top_length / 1000
            middle_length = middle_length / 1000
            bottom_length = bottom_length / 1000
            top_hole_diameter_TolMax = top_hole_diameter_TolMax / 1000
            top_hole_diameter_TolMin = top_hole_diameter_TolMin / 1000
            bottom_hole_diameter_TolMax = bottom_hole_diameter_TolMax / 1000
            bottom_hole_diameter_TolMin = bottom_hole_diameter_TolMin / 1000

            初始设置(0)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, top_hole_diameter / 2 + 0.01, 0) '两个直径参数
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, top_hole_diameter / 2) '直径参数1=471.2
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, bottom_hole_diameter / 2) '直径参数2=385.2
            L1 = part.SketchManager.CreateLine(0.05, 0.06, 0, 0.05, 0.07, 0) 'L1竖直
            L2 = part.SketchManager.CreateLine(0.04, 0.055, 0, 0.05, 0.05, 0) 'L2
            L3 = part.SketchManager.CreateLine(0.04, 0.03, 0, 0.04, 0.04, 0) 'L3竖直
            L4 = part.SketchManager.CreateLine(0.02, 0.02, 0, 0.03, 0.02, 0) 'L4水平
            L5 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0) 'L5
            'DL2 = part.SketchManager.CreateCenterLine(0.04, 0.06, 0, 0.044, 0.06, 0) 'DL2水平

            'DL2Segment = DL2
            DL1Segment = DL1
            L1Segment = L1
            L2Segment = L2
            L3Segment = L3
            L4Segment = L4
            L5Segment = L5
            A1Segment = A1
            A2Segment = A2

            L1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            L3Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            L4Segment.Select4(False, Nothing)
            草图方法_new("水平")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            'DL2Segment.Select4(False, Nothing)
            '草图方法_new("水平")
            A1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            A2Segment.Select4(False, Nothing)
            草图方法_new("固定")
            A2Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-0.5 * bottom_hole_diameter / 2, 0.5 * bottom_hole_diameter / 2, 0) '标注A2
            part.EditDimensionProperties2(bottom_hole_diameter_TolType%, bottom_hole_diameter_TolMax#, bottom_hole_diameter_TolMin#, bottom_hole_diameter_TolMaxFit$, bottom_hole_diameter_TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = bottom_hole_diameter_TolType%
            DimensionTolerance.SetFitValues(bottom_hole_diameter_TolMaxFit$, bottom_hole_diameter_TolMinFit$)
            DisplayDimension.ShowTolParenthesis = True '显示括号

            'P1 = L1.GetEndPoint2()
            'P1.Select4(False, Nothing)
            'A1Segment.Select4(True, Nothing)
            '草图方法_new("重合") '此点不一定与圆1重合，大概率突出精车圆

            P1 = L1.GetStartPoint2()
            P2 = L2.GetStartPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")


            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0)
            P1 = L2.GetStartPoint2()
            L1Segment.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.01, P1.Y + 0.01, 0) '角度标注位置能够改变对应两直线的位置
            修改标注尺寸(top_middle_angle * PI / 180） '关于角度问题需要转化为弧度制，数据库内为数值，即乘以 （ 参数 * PI / 180 ）
            part.ViewZoomtofit2()


            P1 = L2.GetEndPoint2()
            P2 = L3.GetEndPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            P1 = L3.GetStartPoint2()
            P2 = L4.GetEndPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            P1 = L4.GetStartPoint2()
            P2 = L5.GetEndPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")

            P1 = L5.GetStartPoint2()
            P1.Select4(False, Nothing)
            A2Segment.Select4(True, Nothing)
            草图方法_new("重合")

            '注意添加尺寸的顺序,要求添加尺寸后草图形状结构不发生变化

            'P1 = DL2.GetEndPoint2()
            'P2 = L2.GetEndPoint2()
            'P1.Select4(False, Nothing)
            'P2.Select4(True, Nothing)
            '草图方法_new("合并")

            P1 = L1.GetEndPoint2()
            P2 = L1.GetStartPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddVerticalDimension2(P1.X * 2, P1.Y - 0.005, 0)
            修改标注尺寸(top_length）

            P1 = L1.GetStartPoint2()
            P1.Select4(False, Nothing)
            L4Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.03, P1.Y - 0.006, 0)
            修改标注尺寸(middle_length）

            P1 = L5.GetStartPoint2()
            P1.Select4(False, Nothing)
            L4Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.03, P1.Y + 0.005, 0)
            修改标注尺寸(bottom_length）

            P1 = L1.GetEndPoint2()
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, P1.Y + 0.002, 0)
            修改标注尺寸(top_width / 2） '槽宽1=2

            P1 = L2.GetEndPoint2()
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, P1.Y - 0.006, 0)
            修改标注尺寸(middle_1_width / 2） '槽宽2=4

            P1 = L4.GetStartPoint2()
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, P1.Y - 0.01, 0)
            修改标注尺寸(middle_2_width / 2） '槽宽3=15

            P1 = L5.GetStartPoint2()
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, P1.Y - 0.002, 0)
            修改标注尺寸(bottom_width / 2） '槽宽4=10

            P1 = L1.GetEndPoint2()
            L1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, P1.X, P1.Y, 0) '剪切

            L1Segment.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            L3Segment.Select4(True, Nothing)
            L4Segment.Select4(True, Nothing)
            L5Segment.Select4(True, Nothing)
            DL1Segment.Select4(True, Nothing)
            part.SketchMirror() '镜像

            A1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -top_hole_diameter, 0) '剪切
            A2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -bottom_hole_diameter, 0) '剪切
            拉伸切除_new(1, 0, True, False, 0, 0, True)


            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2("切除-拉伸3", "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0) '选中切除-拉伸3特征，并做为扫描轨迹
            Feature2 = 特征阵列_angle(top_Array_number, top_hole_angle) '38为特征阵列个数，360/38为连个特征之间的角度

        End Sub
        Public Sub 旋转凸台(top_diameter#, middle_diameter#, bottom_diameter#, top_width#, middle_1_width#, middle_2_width#, bottom_width#, bottom_middle_angle#, bottom_titl_width#,
                        Optional top_diameter_TolType% = 2, Optional top_diameter_TolMax# = 0, Optional top_diameter_TolMin# = 0, Optional top_diameter_TolMaxFit$ = "", Optional top_diameter_TolMinFit$ = "",
                        Optional middle_diameter_TolType% = 2, Optional middle_diameter_TolMax# = 0.3 / 1000, Optional middle_diameter_TolMin# = 0, Optional middle_diameter_TolMaxFit$ = "", Optional middle_diameter_TolMinFit$ = "",
                         Optional bottom_diameter_TolType% = 2, Optional bottom_diameter_TolMax# = 0, Optional bottom_diameter_TolMin# = -0.5 / 1000, Optional bottom_diameter_TolMaxFit$ = "", Optional bottom_diameter_TolMinFit$ = "")

            top_diameter = top_diameter / 1000
            middle_diameter = middle_diameter / 1000
            bottom_diameter = bottom_diameter / 1000
            top_width = top_width / 1000
            middle_1_width = middle_1_width / 1000
            middle_2_width = middle_2_width / 1000
            bottom_width = bottom_width / 1000
            bottom_titl_width = bottom_titl_width / 1000
            bottom_middle_angle = bottom_middle_angle * PI / 180

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.001, 0, 0) '水平
            DL1Segment = DL1
            DL1Segment.Select4(False, Nothing)
            草图方法_new("水平")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            L1 = part.SketchManager.CreateLine(0.001, 0.001, 0, 0.002, 0.001, 0) '水平 
            L1Segment = L1
            L1Segment.Select4(False, Nothing)
            草图方法_new("水平")
            L2 = part.SketchManager.CreateLine(0.002, 0.002, 0, 0.003, 0.001, 0) '斜率负
            L2Segment = L2
            P1 = L1.GetEndPoint2()
            P2 = L2.GetStartPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            L3 = part.SketchManager.CreateLine(0.004, 0.001, 0, 0.005, 0.002, 0) '斜率正
            L3Segment = L3
            P1 = L2.GetEndPoint2()
            P2 = L3.GetStartPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            L4 = part.SketchManager.CreateLine(0.006, 0.002, 0, 0.007, 0.001, 0) '斜率负
            L4Segment = L4
            P1 = L3.GetEndPoint2()
            P2 = L4.GetStartPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            L5 = part.SketchManager.CreateLine(0.009, 0.002, 0, 0.008, 0.001, 0) '斜率正
            L5Segment = L5
            P1 = L4.GetEndPoint2()
            P2 = L5.GetStartPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            L4Segment.Select4(False, Nothing)
            L5Segment.Select4(True, Nothing)
            草图方法_new("相互垂直")
            L6 = part.SketchManager.CreateLine(0.003, 0.003, 0, 0.004, 0.003, 0) '水平
            L6Segment = L6
            L6Segment.Select4(False, Nothing)
            草图方法_new("水平")
            P1 = L5.GetEndPoint2()
            P2 = L6.GetEndPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            L7 = part.SketchManager.CreateLine(0.004, 0.006, 0, 0.004, 0.007, 0) '竖直
            L7Segment = L7
            L7Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            P1 = L7.GetStartPoint2()
            P2 = L6.GetStartPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            P1 = L1.GetStartPoint2()
            P2 = L7.GetEndPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")


            P1 = L1.GetStartPoint2()
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(-0.02, top_diameter / 100, 0)
            DisplayDimension.Diametric = True
            修改标注尺寸(top_diameter / 2)

            P1 = L3.GetStartPoint2()
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(-0.01, middle_diameter / 8, 0)
            DisplayDimension.Diametric = True
            修改标注尺寸(middle_diameter / 2)
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = middle_diameter_TolType
            DimensionTolerance.SetValues(middle_diameter_TolMin, middle_diameter_TolMax)
            DisplayDimension.ShowTolParenthesis = False

            P1 = L6.GetStartPoint2()
            P1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(-0.005, bottom_diameter / 1.5, 0)
            DisplayDimension.Diametric = True
            修改标注尺寸(bottom_diameter / 2)
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = bottom_diameter_TolType
            DimensionTolerance.SetValues(bottom_diameter_TolMin, bottom_diameter_TolMax)
            DisplayDimension.ShowTolParenthesis = False

            P1 = L1.GetEndPoint2()
            P1.Select4(False, Nothing)
            L7Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X / 2 - 0.002, P1.Y + 0.002, 0)
            修改标注尺寸(top_width)

            P1 = L2.GetEndPoint2()
            P1.Select4(False, Nothing)
            L7Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X / 2 - 0.002, P1.Y + 0.01, 0)
            修改标注尺寸(middle_2_width)

            P1 = L4.GetEndPoint2()
            P1.Select4(False, Nothing)
            L7Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X / 2 - 0.002, P1.Y + 0.03, 0)
            修改标注尺寸(middle_1_width)

            P1 = L6.GetEndPoint2()
            P1.Select4(False, Nothing)
            L7Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X / 2 - 0.002, P1.Y - 0.003, 0)
            修改标注尺寸(bottom_width)

            P1 = L4.GetStartPoint2()
            P1.Select4(False, Nothing)
            L5Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.005, P1.Y + 0.005, 0)
            修改标注尺寸(bottom_titl_width)

            P1 = L4.GetEndPoint2()
            L6Segment.Select4(False, Nothing)
            L5Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.002, P1.Y + 0.001, 0)
            修改标注尺寸(bottom_middle_angle)

            特征旋转_new()
            'part.FeatureManager.FeatureRevolve2(True, True, False, False, False, False, 0, 0, 6.2831853071796, 0, False, False, 0.01, 0.01, 0, 0, 0, True, True, True)
        End Sub
        Public Sub 四边形圆弧凸台_new(diameter#, boss_height#, boss_top_width#, boss_bottom_width#, chamfering_1#, chamfering_2#, Stretching_Thickness#, Optional Secondary_Use% = 1)
            'relative_Y_axis_deflection_angle#, Array_Number#
            diameter = diameter / 1000
            boss_height = boss_height / 1000
            boss_top_width = boss_top_width / 1000
            boss_bottom_width = boss_bottom_width / 1000
            chamfering_1 = chamfering_1 / 1000
            chamfering_2 = chamfering_2 / 1000
            Stretching_Thickness = Stretching_Thickness / 1000

            Dim X1#, Y1#, X2#, Y2#, X3#, X4#
            X1# = boss_top_width / 2
            X2# = -boss_top_width / 2
            X3# = boss_bottom_width / 2
            X4# = -boss_bottom_width / 2
            Y1# = boss_height / 2
            Y2# = -boss_height / 2

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            DL1 = part.SketchManager.CreateCenterLine(0, Y1, 0, 0, Y2, 0)
            DL2 = part.SketchManager.CreateCenterLine(0.03, 0, 0, -0.03, 0, 0)
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, diameter / 2)
            L1 = part.SketchManager.CreateLine(X1, Y1, 0, X2, Y1, 0)
            L2 = part.SketchManager.CreateLine(X3, Y2, 0, X4, Y2, 0)
            L3 = part.SketchManager.CreateLine(X2, Y1, 0, X4, Y2, 0)
            L4 = part.SketchManager.CreateLine(X1, Y1, 0, X3, Y2, 0)

            DL1Segment = DL1
            DL2Segment = DL2
            A1Segment = A1
            L1Segment = L1
            L2Segment = L2
            L3Segment = L3
            L4Segment = L4

            A1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("竖直")
            DL2Segment.Select4(False, Nothing)
            草图方法_new("水平")
            L1Segment.Select4(False, Nothing)
            草图方法_new("水平")
            L2Segment.Select4(False, Nothing)
            草图方法_new("水平")

            P1 = L1.GetStartPoint2()
            P2 = L1.GetEndPoint2()
            P1P2HD_new(P1, P2, Nothing, 0)
            P1 = L2.GetStartPoint2()
            P2 = L2.GetEndPoint2()
            P1P2HD_new(P1, P2, Nothing, 0)
            P1 = L4.GetStartPoint2()
            P2 = L4.GetEndPoint2()
            P1P2VD_new(P1, P2, Nothing, 0)

            A1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-0.5 * diameter / 2, 0.5 * diameter / 2, 0)

            P1 = L1.GetStartPoint2()
            P2 = L1.GetEndPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图圆角_new(chamfering_1)

            P1 = L2.GetStartPoint2()
            P2 = L2.GetEndPoint2()
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图圆角_new(chamfering_2)

            特征拉伸(0, Stretching_Thickness, False, True, 0, 0, True)
        End Sub
        Public Sub 圆环上图形(bottom_center_distance#, bottom_diameter#, thick_1#, thick_2#, bottom_thick_1#, bottom_thick_2#, table_number%, angle_1#, angle_2#, corner_radious_1#, corner_radious_2#, top_width#,
                         Optional 图纸比例值# = 1)
            bottom_center_distance = bottom_center_distance / 1000
            bottom_diameter = bottom_diameter / 1000
            bottom_thick_1 = bottom_thick_1 / 1000
            bottom_thick_2 = bottom_thick_2 / 1000
            angle_1 = angle_1 * PI / 180
            corner_radious_1 = corner_radious_1 / 1000
            corner_radious_2 = corner_radious_2 / 1000
            top_width = top_width / 1000
            thick_1 = thick_1 / 1000
            thick_2 = thick_2 / 1000



            '后视圆柱
            Dim 基准面2, 基准面3 As SldWorks.Feature
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            基准面2 = part.FeatureManager.InsertRefPlane(264, thick_2, 0, 0, 0, 0) '264=256+8；256=选项翻转，8=距离；即：264=选项翻转+距离。
            基准面2.Select2(False, Nothing)
            part.SketchManager.InsertSketch(True)
            A1 = part.SketchManager.CreateCircleByRadius(0, -bottom_center_distance / 2, 0, bottom_diameter / 2)
            A1Segment = A1
            A1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            Feature拉伸1 = 特征拉伸(0, bottom_thick_1, True, True, 0, 0, True)
            face1 = Feature拉伸1.GetFaces
            face = face1(1)
            edge1 = face.GetEdges
            '遍历(1, face1)     ‘遍历完成需要注释遍历程序，却需要运行两边，第一遍运行会标记面的顺序
            '遍历(1, edge1)      
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
            part.ClearSelection2(True)
            添加选择并标记(face1(0), 1, 1) '（对象，索引号，标记）
            添加选择并标记(face1(1), 2, 2)
            Feature拔模1 = 拔模(angle_1)
            添加选择并标记(edge1(1), 1, 1)
            'part.Extension.SelectByID2("", "EDGE", 0, -0.197, -0.065, False, 1, Nothing, 0) '选不到拔完模后的边线
            Feature圆角1 = 特征圆角_new(corner_radious_2)                                    '可以直接在拔完模圆柱的底边上倒圆角，上行的注释为画图时候走进的误区
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            Feature拉伸1.Select2(True, 4)
            Feature拔模1.Select2(True, 4)
            Feature圆角1.Select2(True, 4)
            特征阵列_angle(table_number, angle_2)



            '后视四边形台
            part.Extension.SelectByID2("", "FACE", 0, bottom_center_distance / 2 + 0.02, -thick_2, False, 0, Nothing, 0)
            Dim swface1 As SldWorks.Face2
            Dim selectionmgr1 As SldWorks.SelectionMgr
            selectionmgr1 = part.SelectionManager
            '上面三行为声明对象，可以在全局声明，这样就不用反复声明
            swface1 = selectionmgr1.GetSelectedObject6(1, 0)                               '获得选中的对象
            edge2 = swface1.GetEdges
            '遍历(1, edge2)
            SelectionMgr.AddSelectionListObject(edge2(0), Nothing)

            part.Extension.SelectByID2("基准面2", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 0.01)
            A3 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 0.01)
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.1, 0)
            L1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            A2Segment = A2
            A3Segment = A3
            DL1Segment = DL1
            L1Segment = L1

            edge2(15).Select2(False, Nothing)
            A2Segment.Select4(True, Nothing)
            草图方法_new("全等")
            edge2(16).Select2(False, Nothing)
            A3Segment.Select4(True, Nothing)
            草图方法_new("全等")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            L1Segment.Select4(False, Nothing)
            草图方法_new("垂直")

            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            A2Segment.Select4(True, Nothing)
            草图方法_new("重合")
            P1 = L1.GetEndPoint2
            P1.Select4(False, Nothing)
            A3Segment.Select4(True, Nothing)
            草图方法_new("重合")

            P2 = L1.GetEndPoint2
            P3 = L1.IGetStartPoint2
            P1 = DL1.GetStartPoint2
            P1.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDiameterDimension2((P2.X + P3.X) / 2, 0, 0) '标注未完成
            修改标注尺寸(top_width / 2)

            DL1Segment.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            part.SketchMirror()
            A2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -A2.GetRadius, 0)
            A3Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -A3.GetRadius, 0)
            Feature拉伸2 = 特征拉伸(0, bottom_thick_2, True, True, 0, 0, True)
            face2 = Feature拉伸2.GetFaces
            face = face2(1)
            edge3 = face.GetEdges
            '遍历(1, face2)            '面遍历方式疑似为根左右（顶—左—前—右—后） 有待求证,可能与前后视有关
            '遍历(1, edge3)
            SelectionMgr.AddSelectionListObject(face2(0), Nothing)
            SelectionMgr.AddSelectionListObject(edge3(0), Nothing)
            face = face2(3)
            edge4 = face.GetEdges
            '遍历(1, edge4)
            SelectionMgr.AddSelectionListObject(edge4(0), Nothing)
            part.ClearSelection2(True)
            添加选择并标记(face2(0), 1, 1) '（对象，索引号，标记）
            添加选择并标记(face2(1), 2, 2)
            添加选择并标记(face2(3), 3, 2）
            Feature拔模2 = 拔模(angle_1)
            swface1.select2(False, 1)
            添加选择并标记(face2(2), 2, 2)
            添加选择并标记(face2(4), 3, 2）
            Feature拔模3 = 拔模(angle_1)
            添加选择并标记(edge3(0), 1, 1）
            添加选择并标记(edge4(0), 2, 1）
            Feature圆角2 = 特征圆角_new(corner_radious_1)
            基准轴Z.Select2(False, 1)
            Feature拉伸2.Select2(True, 4)
            Feature拔模2.Select2(True, 4)
            Feature拔模3.Select2(True, 4)
            Feature圆角2.Select2(True, 4)
            特征阵列_angle(table_number, angle_2)



            '前视圆柱
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            基准面3 = part.FeatureManager.InsertRefPlane(8, thick_1 + thick_2, 0, 0, 0, 0)
            基准面3.Select2(False, Nothing)
            part.SketchManager.InsertSketch(True)
            A4 = part.SketchManager.CreateCircleByRadius(0, -bottom_center_distance / 2, thick_1 + thick_2, bottom_diameter / 2)
            A4Segment = A4
            A4Segment.Select4(False, Nothing)
            草图方法_new("固定")
            A1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDiameterDimension2(A1.GetCenterPoint2.x + A1.GetRadius * Cos(60 * PI / 180) + 0.01 / 图纸比例值, A1.GetCenterPoint2.y + A1.GetRadius * Sin(60 * PI / 180) + 0.01 / 图纸比例值, 0)
            If Not table_number = 1 Then
                part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, table_number.ToString + "个均布" + "×" + "<MOD-DIAM>", "", True, "", "", "", False, 1, "")
            End If
            Feature拉伸3 = 特征拉伸(0, bottom_thick_1, False, True, 0, 0, True)
            face3 = Feature拉伸3.GetFaces
            face = face3(1)
            edge5 = face.GetEdges
            '遍历(1, face3)     '遍历完成需要注释遍历程序，却需要运行两边，第一遍运行会标记面的顺序
            '遍历(1, edge5)
            SelectionMgr.AddSelectionListObject(face3(0), Nothing)
            SelectionMgr.AddSelectionListObject(edge5(0), Nothing)
            part.ClearSelection2(True)
            添加选择并标记(face3(0), 1, 1) '（对象，索引号，标记）
            添加选择并标记(face3(1), 2, 2)
            Feature拔模4 = 拔模(angle_1)
            添加选择并标记(edge5(1), 1, 1)
            Feature圆角3 = 特征圆角_new(corner_radious_2)
            基准轴Z.Select2(False, 1)
            Feature拉伸3.Select2(True, 4)
            Feature拔模4.Select2(True, 4)
            Feature圆角3.Select2(True, 4)
            特征阵列_angle(table_number, angle_2)



            '前视四边形台
            part.Extension.SelectByID2("", "FACE", 0, bottom_center_distance / 2 + 0.02, thick_1 + thick_2, False, 0, Nothing, 0)
            Dim swface2 As SldWorks.Face2
            Dim selectionmgr2 As SldWorks.SelectionMgr
            selectionmgr2 = part.SelectionManager
            swface2 = selectionmgr2.GetSelectedObject6(1, 0)
            edge6 = swface2.GetEdges
            '遍历(1, edge6)
            SelectionMgr.AddSelectionListObject(edge6(0), Nothing)
            part.Extension.SelectByID2("基准面3", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 0.01)
            A3 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 0.01)
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.1, 0)
            L1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            A2Segment = A2
            A3Segment = A3
            DL1Segment = DL1
            L1Segment = L1

            edge6(15).Select2(False, Nothing)
            A2Segment.Select4(True, Nothing)
            草图方法_new("全等")
            edge6(16).Select2(False, Nothing)
            A3Segment.Select4(True, Nothing)
            草图方法_new("全等")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            L1Segment.Select4(False, Nothing)
            草图方法_new("垂直")

            P1 = L1.GetStartPoint2
            P1.Select4(False, Nothing)
            A2Segment.Select4(True, Nothing)
            草图方法_new("重合")
            P1 = L1.GetEndPoint2
            P1.Select4(False, Nothing)
            A3Segment.Select4(True, Nothing)
            草图方法_new("重合")

            P2 = L1.GetEndPoint2
            P3 = L1.IGetStartPoint2
            P1 = DL1.GetStartPoint2
            P1.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDiameterDimension2(top_width, bottom_center_distance / 2, 0)
            If Not table_number = 1 Then
                part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, table_number.ToString + "个均布" + "×", "", True, "", "", "", False, 1, "")
            End If
            修改标注尺寸(top_width / 2)

            DL1Segment.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            part.SketchMirror()
            A2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -A2.GetRadius, 0)
            A3Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -A3.GetRadius, 0)
            Feature拉伸4 = 特征拉伸(0, bottom_thick_2, False, True, 0, 0, True)
            face4 = Feature拉伸4.GetFaces
            face = face4(1)
            edge7 = face.GetEdges
            '遍历(1, face4)            '面遍历方式疑似为根左右（顶—左—前—右—后） 有待求证
            '遍历(1, edge7)
            SelectionMgr.AddSelectionListObject(face4(0), Nothing)
            SelectionMgr.AddSelectionListObject(edge7(0), Nothing)
            face = face4(3)
            edge8 = face.GetEdges
            '遍历(1, edge8)
            SelectionMgr.AddSelectionListObject(edge8(0), Nothing)
            part.ClearSelection2(True)
            添加选择并标记(face4(0), 1, 1) '（对象，索引号，标记）
            添加选择并标记(face4(1), 2, 2)
            添加选择并标记(face4(3), 3, 2）
            Feature拔模5 = 拔模(angle_1)
            part.Extension.SelectByID2("", "FACE", bottom_center_distance / 2 + 0.02, 0, thick_1 + thick_2, False, 1, Nothing, 0)
            添加选择并标记(face4(2), 2, 2)
            添加选择并标记(face4(4), 3, 2）
            Feature拔模6 = 拔模(angle_1)
            添加选择并标记(edge7(0), 1, 1）
            添加选择并标记(edge8(0), 2, 1）
            Feature圆角4 = 特征圆角_new(corner_radious_1)
            基准轴Z.Select2(False, 1)
            Feature拉伸4.Select2(True, 4)
            Feature拔模5.Select2(True, 4)
            Feature拔模6.Select2(True, 4)
            Feature圆角4.Select2(True, 4)
            特征阵列_angle(table_number, angle_2)





        End Sub
        Public Sub key(type%, length#, width#, thick#, chamfer#, length_tol_type#, length_tol_min$, width_tol_type#, width_tol_min$,
                           thick_tol_type#, thick_tol_min$, Optional length_tol_max$ = "", Optional width_tol_max$ = "", Optional thick_tol_max$ = "")

            ' 绘制三维图的步骤：
            ' 1、先绘制出零件的三维图
            ' 2、删除所有一些标注
            ' 3、插入标注，方法为在基准面插入对应的点进行标注
            If type = 0 Then

                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
                part.SketchManager.InsertSketch(True) '插入新的草图
                part.SketchManager.CreateSketchSlot(0, 1, width, 0, 0, 0, length / 2, 0, 0, 0, 0, 0, -1, False) '画一个直槽口
                part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, thick, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸,单向,
                part.Extension.SelectByRay(-width, 0, 0, -1, 0, 0, 0.001, 1, False, 0, 0)
                part.Extension.SelectByRay(-width, thick, 0, -1, 0, 0, 0.001, 1, True, 1, 0)
                part.FeatureManager.InsertFeatureChamfer(4, 1, chamfer, 45 * PI / 180, 0, 0, 0, 0)

            ElseIf type = 1 Then

                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
                part.SketchManager.InsertSketch(True) '插入新的草图
                part.SketchManager.CreateCornerRectangle(0, -width / 2, 0, length - width / 2, width / 2, 0)
                part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, thick, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸,单向,

                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
                part.SketchManager.InsertSketch(True) '插入新的草图
                part.SketchManager.CreateCircleByRadius(0, 0, 0, width / 2)
                part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, thick, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸,单向,
                part.Extension.SelectByRay(-width, 0, 0, -1, 0, 0, 0.001, 1, False, 0, 0)
                part.Extension.SelectByRay(-width, 0, 0, 1, 0, 0, 0.001, 1, True, 0, 0)
                part.Extension.SelectByRay(-width, thick, 0, -1, 0, 0, 0.001, 1, True, 1, 0)
                part.Extension.SelectByRay(-width, thick, 0, 1, 0, 0, 0.001, 1, True, 1, 0)
                part.FeatureManager.InsertFeatureChamfer(4, 1, chamfer, 45 * PI / 180, 0, 0, 0, 0)

                ' SelectByRay 这个选择方法会随着位置的改变而改变
                ' 可以采用遍历选择需要的面或边线

            End If

            part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
            part.SketchManager.InsertSketch(True) '插入新的草图
            P1 = part.SketchManager.CreatePoint(0, width / 2, 0)
            P2 = part.SketchManager.CreatePoint(0, -width / 2, 0)
            P3 = part.SketchManager.CreatePoint(-width / 2, 0, 0)
            P4 = part.SketchManager.CreatePoint(length - width / 2, 0, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(-width, 0, 0)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "", "", True, "", "", False)
            SetTolvalue(width_tol_type, width_tol_max, width_tol_min) '公差类型,孔,轴
            DisplayDimension.ShowTolParenthesis = True '公差括号           
            P3.Select4(False, Nothing)
            P4.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2((length - width / 2) / 2, 0, -2 * width)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "", "", True, "", "", False)
            SetTolvalue(length_tol_type, length_tol_max, length_tol_min) '公差类型,孔,轴
            DisplayDimension.ShowTolParenthesis = True '公差括号
            part.SketchManager.InsertSketch(True)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0) '选中对象,在前视基准面
            part.SketchManager.InsertSketch(True) '插入新的草图
            P1 = part.SketchManager.CreatePoint(0, 0, 0)
            P2 = part.SketchManager.CreatePoint(-width / 2 + chamfer, thick, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddVerticalDimension2(-width, thick / 2, 0)
            part.EditDimensionProperties2(0, 0, 0, "", "", False, 2, 2, True, 12, 12, "", "", True, "", "", False)
            SetTolvalue(thick_tol_type, thick_tol_max, thick_tol_min) '公差类型,孔,轴
            DisplayDimension.ShowTolParenthesis = True '公差括号

            ' 可以作为插入带引线的注释的模板
            P2.Select4(False, Nothing) '插入标注
            Dim myNote As Object
            Dim myAnnotation As Object
            'Dim myTextFormat As Object
            myNote = part.InsertNote(chamfer.ToString + "x45°")
            myNote.LockPosition = False
            myNote.Angle = 0
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swUNDERLINED, 0, True, False, False, False)
            myAnnotation.SetPosition(0, 2 * thick, 0)
            'myAnnotation.SetTextFormat(0, True, myTextFormat)
            part.SketchManager.InsertSketch(True)


        End Sub
        Public Sub cover（length#, width#, fillet#, thick#, hole_length#, hole_width#, diameter#)
            length = length / 1000
            width = width / 1000
            fillet = fillet / 1000
            thick = thick / 1000
            hole_length = hole_length / 1000
            hole_width = hole_width / 1000
            diameter = diameter / 1000
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            初始设置_new(1)
            L1 = part.SketchManager.CreateLine(-length / 2， width / 2, 0, length / 2， width / 2, 0)
            L2 = part.SketchManager.CreateLine(length / 2， width / 2, 0, length / 2， -width / 2, 0)
            L3 = part.SketchManager.CreateLine(length / 2， -width / 2, 0, -length / 2， -width / 2, 0)
            L4 = part.SketchManager.CreateLine(-length / 2， -width / 2, 0, -length / 2， width / 2, 0)
            L2Segment = L2
            L3Segment = L3
            L2Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(5 * length / 7, 0, 0)
            L3Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(0, -5 * width / 6, 0)
            P1 = L1.GetStartPoint2
            P2 = L1.GetEndPoint2
            P3 = L3.GetStartPoint2
            P4 = L3.GetEndPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            P3.Select4(True, Nothing)
            P4.Select4(True, Nothing)
            part.SketchManager.CreateFillet(fillet, 1)
            初始设置_new(0)
            A1 = part.SketchManager.CreateCircleByRadius(-hole_length / 2, hole_width / 2, 0, diameter / 2)
            A1Segment = A1
            A1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-hole_length / 2 + 3 * diameter * Cos(PI / 3), hole_width / 2 - 3 * diameter * Sin(PI / 3), 0)
            part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "4-<MOD-DIAM>", " 通孔", True, "", "", False)
            A1Segment.Select4(False, Nothing)
            part.SketchManager.CreateLinearSketchStepAndRepeat(2, 2, hole_length, hole_width, 0, 3 * PI / 2, "", False, False, False, False, False)
            '(NumX , NumY, SpacingX , SpacingY , AngleX , AngleY, DeleteInstances, XSpacing, YSpacing, Angle, CreateNumOfInstancesDimInXDir As Boolean, CreateNumOfInstancesDimInYDir As Boolean) As Boolean
            特征拉伸(0， thick， False, True, 0, 0, True)

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            P1 = part.SketchManager.CreatePoint(-hole_length / 2, -hole_width / 2, 0)
            P2 = part.SketchManager.CreatePoint(hole_length / 2, -hole_width / 2, 0)
            P3 = part.SketchManager.CreatePoint(hole_length / 2, hole_width / 2, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0, -3 * width / 4, 0)
            part.EditDimensionProperties2(4, 0.0001, 0, "0.1", "0.1", True, 9, 2, True, 12, 12, "", "", True, "", "", False) '4为对称
            P2.Select4(False, Nothing)
            P3.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(4 * length / 7, 0, 0)
            part.EditDimensionProperties2(4, 0.0001, 0, "0.1", "0.1", True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            part.SketchManager.InsertSketch(True)
        End Sub
        Public Sub clasp(length#, height#, angle#, width#, fillet#, thick#)
            length = length / 1000
            height = height / 1000
            width = width / 1000
            fillet = fillet / 1000
            thick = thick / 1000
            angle = angle * PI / 180

            SelectPlane("front")
            SketchManager.InsertSketch(True)
            L1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.02, 0.01, 0)
            L1Segment = L1
            L1Segment.Select4(False, Nothing)
            草图方法_new("水平")
            L1Segment.Select4(False, Nothing)
            P1 = L1.GetEndPoint2
            P2 = L1.GetStartPoint2
            DisplayDimension = part.AddDimension2((P1.X + P2.X) / 2, P1.Y + 0.02, 0)
            修改标注尺寸(length)
            L2 = part.SketchManager.CreateLine(0.02, 0.01, 0, 0.03, 0.005, 0)
            L2Segment = L2
            P1 = L1.GetEndPoint2
            P2 = L2.GetStartPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            P1 = L1.GetEndPoint2
            L1Segment.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X - 0.001, P1.Y - 0.01, 0)
            修改标注尺寸(angle)
            P1 = L2.GetEndPoint2
            P1.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.01, P1.Y + 0.005, 0)
            修改标注尺寸(height)
            Dim customBendAllowanceData As Object
            customBendAllowanceData = part.FeatureManager.CreateCustomBendAllowance()
            customBendAllowanceData.KFactor = 0.5
            part.FeatureManager.InsertSheetMetalBaseFlange2(thick, False, fillet, width, 0.01, False, 0, 0, 1, customBendAllowanceData, False, 0, 0.0001, 0.0001, 0.5, True, False, True, True)
            SelectPlane("up")
            SketchManager.InsertSketch(True)
            P1 = part.SketchManager.CreatePoint(0.1, 0, 0)
            P2 = part.SketchManager.CreatePoint(0.1, -width, 0)
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            part.AddDimension2(0, P1.X, (P1.X + P2.X) / 2)
            part.EditDimensionProperties2(2, 0, -0.00014, "", "", True, 9, 2, True, 12, 12, "", " ", True, "", "", False)
            SketchManager.InsertSketch(True)
        End Sub
        Public Sub Slot_wedge(height_Right#, angle#, width#, fillet#, thick#)

            height_Right = height_Right / 1000
            width = width / 1000
            fillet = fillet / 1000
            thick = thick / 1000
            angle = angle * PI / 180

            SelectPlane("front")
            SketchManager.InsertSketch(True)
            Getsketch = SketchManager.ActiveSketch
            初始设置_new(1)
            DL1 = part.SketchManager.CreateCenterLine(0, 0, 0, -0.01, 0, 0)
            L1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            DL1Segment = DL1
            L1Segment = L1
            DL1Segment.Select4(False, Nothing)
            草图方法_new("水平")
            DL1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            L1Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            P1 = DL1.GetStartPoint2
            P1.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            草图方法_new("中点")
            P1 = L1.GetEndPoint2
            P2 = L1.GetStartPoint2
            L1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(P1.X + 0.02, (P1.Y + P2.Y) / 2, 0)
            part.EditDimensionProperties2(4, 0.0001, 0.0001, "-0.1", "+0.1", True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            修改标注尺寸(height_Right)
            L2 = part.SketchManager.CreateLine(0.02, 0.02, 0, 0.03, 0.01, 0)
            L2Segment = L2
            P1 = L1.GetStartPoint2
            P2 = L2.GetEndPoint2
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            草图方法_new("合并")
            P1 = L1.GetStartPoint2
            L1Segment.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(P1.X - 0.01, P1.Y + 0.02, 0)
            修改标注尺寸(angle)
            L3 = part.SketchManager.CreateLine(-0.01, -0.02, 0, -0.01, 0.02, 0)
            L3Segment = L3
            L3Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            L3Segment.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(-0.002, 0, 0)
            修改标注尺寸(width)
            P1 = L2.GetStartPoint2
            L2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, P1.X, P1.Y, 0)
            P1 = L3.GetEndPoint2
            L3Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, P1.X, P1.Y, 0)
            DL1Segment.Select4(False, Nothing)
            L2Segment.Select4(True, Nothing)
            草图方法_new("镜像")
            P1 = L3.GetStartPoint2
            L3Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, P1.X, P1.Y, 0)
            P1 = L3.GetStartPoint2
            P1.Select4(False, Nothing)
            草图圆角_new(fillet)
            P1 = L3.GetEndPoint2
            P1.Select4(False, Nothing)
            草图圆角_new(fillet)
            Feature = 特征拉伸(0, thick, False, True, 0, 0, True)

            face1 = Feature.GetFaces
            '遍历(1, face1)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            edge1 = face1(0).GetEdges
            '遍历(1, edge1)
            SelectionMgr.AddSelectionListObject(edge1(0), Nothing)

            SelectPlane("front")
            SketchManager.InsertSketch(True)
            DL2 = part.SketchManager.CreateCenterLine(0.01, 0.01, 0, 0.02, 0.01, 0)
            DL2Segment = DL2
            DL2Segment.Select4(False, Nothing)
            草图方法_new("水平")
            DL2Segment.Select4(False, Nothing)
            edge1(5).select2(True, Nothing)
            草图方法_new("相切")
            P1 = DL2.GetStartPoint2
            P1.Select4(False, Nothing)
            edge1(5).select2(True, Nothing)
            草图方法_new("重合")
            DL2Segment.Select4(False, Nothing)
            part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, True, 0, Nothing, 0)
            草图方法_new("镜像")
            P1 = DL2.GetStartPoint2
            P2 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            P2.Select4(False, Nothing)
            DL2Segment.Select4(True, Nothing)
            part.AddDimension2(P1.X - 0.02, (P1.Y + P2.Y) / 2, 0)
            part.EditDimensionProperties2(4, 0.0001, 0.0001, "-0.1", "+0.1", True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            SketchManager.InsertSketch(True)

        End Sub
        Public Sub SetTolvalue(type#, max$, min$) '公差标注
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = type
            DimensionTolerance.SetFitValues(max, min)

        End Sub
        '工程图模块
        Public Sub 设置属性(name$, Code$, material$)
            '设置属性
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", name)
            cusproper.Set2("代号", Code)
            cusproper.Set2("材料", material)
        End Sub
        Public Sub 工程图模块(dz$, Rotate_angle_1#, Rotate_angle_2#, 主视图X#, 主视图Y#, 图纸比例值#, name$, material$, code$, Optional 技术要求1$ = "", Optional 技术要求2$ = "", Optional 技术要求3$ = "", Optional 技术要求4$ = "", Optional 技术要求5$ = "", Optional 技术要求6$ = "", Optional 图纸格式$ = "A3", Optional 视图$ = "前视")
            Rotate_angle_1 = Rotate_angle_1 * PI / 180
            Rotate_angle_2 = Rotate_angle_2 * PI / 180

            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            Dim NewDocument As SldWorks.ModelDoc2

            If 图纸格式$ = "A3" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a3.drwdot", 1, 0, 0)
            ElseIf 图纸格式$ = "A4P" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4P.drwdot", 1, 0, 0)
            End If
            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc '零件
            Dim SketchManager As SldWorks.SketchManager = part.SketchManager '草图管理器
            Dim FeatureManager As SldWorks.FeatureManager = part.FeatureManager '特征管理器
            Dim Dimension As SldWorks.Dimension '尺寸
            Dim DisplayDimension As SldWorks.DisplayDimension '显示尺寸
            Dim sketch As SldWorks.Sketch '草图
            Dim Feature As SldWorks.Feature '特征
            Dim SelectionMgr As SldWorks.SelectionMgr = part.SelectionManager '选择管理器

            Dim Draw As SldWorks.DrawingDoc = swapp.ActiveDoc '工程图
            Dim View As SldWorks.View '视图对象
            Dim Notes As Object '注释
            Dim Count As Long
            Dim Annpos() As Double
            Dim Note As SldWorks.Note '注释
            Dim Annotation As SldWorks.Annotation '注文对象
            Dim Annotations() As Object
            'Dim myView As SldWorks.View
            Dim Displaydimention As SldWorks.DisplayDimension

            Dim DrawTitle As String
            DrawTitle = Draw.GetTitle
            Dim myViewname As String '我视图的名字
            part.ViewZoomtofit2()
            SelectionMgr = part.SelectionManager
            part.Extension.SelectByID2("图纸1", "SHEET", 0.09755469539163, 0.257100928685855, 0, False, 0, Nothing, 0)
            part.SetUserPreferenceToggle(swUserPreferenceToggle_e.swGridDisplay, True) '开启工程图网格
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 4)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            myView = Draw.CreateDrawViewFromModelView3(dz, "*" + 视图, 主视图X#, 主视图Y#, 0)
            Draw.CreateUnfoldedViewAt3(0.32, 0.15, 0, False)

            myViewname = myView.Name
            Debug.Print(myViewname) '在下方对话框打入我的视图名称，用来测试代码
            'myView = Draw.CreateUnfoldedViewAt3(0.3, 0.19, 0, False)
            Dim myNote As Object
            myNote = part.InsertNote("公司名称") '插入（）里的注释
            If 图纸格式 = "A3" Then
                If Not myNote Is Nothing Then
                    myNote.LockPosition = False '我的注释对象下的锁定位置属性，返回值是 不（不锁定）
                    myNote.Angle = 0 '注释没有角度
                    myNote.SetBalloon(0, 0) '
                    Annotation = myNote.GetAnnotation() '获得注文
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.375, 0.055, 0) '修改注文位置
                        Annotation.SetTextFormat(0, True, 0) '修改注文文本格式
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()
                View = Draw.GetFirstView '获得第一个视图
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes

                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 42 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司") '此处的Annpos(0)，Annpos(1)更像是确定注文  "江西兰叶科技有限公司"  的X轴和Y轴的位置
                            End If
                            If Annpos(0) > 315 / 1000 And Annpos(0) < 365 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)
                            End If
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 14 / 1000 And Annpos(1) < 23 / 1000 Then
                                N1.SetText(code)
                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)
                            End If
                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()
            ElseIf 图纸格式 = "A4P" Then
                If Not myNote Is Nothing Then
                    myNote.LockPosition = False
                    myNote.Angle = 0
                    myNote.SetBalloon(0, 0)
                    Annotation = myNote.GetAnnotation()
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.164493037612998, 0.0537752937136617, 0)
                        Annotation.SetTextFormat(0, True, 0)
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()
                View = Draw.GetFirstView
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes

                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 104 / 1000 And Annpos(0) < 153 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司")


                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)


                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 12 / 1000 And Annpos(1) < 24 / 1000 Then
                                N1.SetText(code)


                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)


                            End If

                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()
            End If










            part = swapp.ActiveDoc
            part.FontPoints(18)
            myNote = part.InsertNote(
            技术要求1 + Chr(13) + Chr(10) +
            技术要求2 + Chr(13) + Chr(10) +
            技术要求3 + Chr(13) + Chr(10) +
            技术要求4 + Chr(13) + Chr(10) +
            技术要求5 + Chr(13) + Chr(10) +
            技术要求6）
            Annotation = myNote.GetAnnotation()
            Annotation.SetPosition(0.075, 0.07, 0)


            Dim Sheet1 As SldWorks.Sheet '图纸对象

            Dim SheetPr() As Double
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            SheetPr = Sheet1.GetProperties2()
            SheetPr(2) = 1
            SheetPr(3) = 1 / 图纸比例值
            SheetPr(4) = 1
            Sheet1.SetProperties2(SheetPr(0), SheetPr(1), SheetPr(2), SheetPr(3), SheetPr(4), SheetPr(5), SheetPr(6), SheetPr(7))
            Draw.EditRebuild()

            ' 在工程图中进行相应的操作：
            ' 1、激活对应的视图
            ' 2、打一个原点，确定视图中线段的相对位置
            ' 3、在想刨或想放大的区域画一个封闭的图形
            ' 4、选择图形，进行刨视或放大  注意：刨视图 和 局部放大视图 属于 工程视图，位置是绝对位置。
            part.ActivateView("工程图视图2") '激活工程视图2
            L1 = part.SketchManager.CreateLine(0.108473, 0.1493, 0#, 0.134576, 0.185228, 0#) '在工程视图二的相对坐标下画直线1
            L1Segment = L1
            part.ClearSelection2(True)
            part.ActivateSheet("图纸1") '激活图纸1
            part.ActivateView("工程图视图2")
            L1Segment.Select4(False, Nothing)
            part.CreateSectionViewAt5（0.211, 0.291, 0, "B", 144, Nothing, 0） '创建刨视图B-B
            part.Extension.SelectByID2("刨面视图 B-B", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            part.DrawingViewRotate(Rotate_angle_2) '旋转刨视图B-B
            part.ActivateView("工程图视图3")
            A1 = part.SketchManager.CreateCircle(0.24857, -0.17003, 0#, 0.252386, -0.192414, 0#)
            A1Segment = A1
            A1Segment.Select4(False, Nothing)
            part.CreateDetailViewAt3(0.292, 0.263, 0, 0, 1, 2, "II", 1, False) '放大局部视图II
            part.ActivateView("工程图视图4")
            part.ClearSelection2(True)
            part.Extension.SelectByID2("工程图视图3", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            part.SuppressView '隐藏工程图视图3

            part.ActivateView("工程图视图1")
            P1 = part.SketchManager.CreatePoint(0, 0, 0)
            L2 = part.SketchManager.CreateLine(-0.25, 0.2, 0#, -0.4, 0.2, 0#)
            L2Segment = L2
            part.ActivateSheet("图纸1") '激活图纸1
            part.ActivateView("工程图视图1")
            L2Segment.Select4(False, Nothing)
            part.CreateSectionViewAt5（0.211, 0.291, 0, "A", 144, Nothing, 0）

            part.ActivateView("工程图视图5")
            P1 = part.SketchManager.CreatePoint(0, 0, 0)
            part.SketchManager.CreateCornerRectangle(0.01, 0.02, 0#, -0.05, -0.02, 0#)
            part.Extension.SelectByID2("Line1", "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("Line4", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("Line3", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("Line2", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            part.CreateDetailViewAt3(0.122, 0.263, 0, 0, 1, 2, "I", 1, False) '插曲局部放大视图的位置为绝对位置
            part.ActivateView("工程图视图6")
            part.ClearSelection2(True)
            part.Extension.SelectByID2("工程图视图5", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            part.SuppressView

            part.InsertModelAnnotations3(0, 32864 + 2, True, False, True, True) '允许有重复标注， False

        End Sub
        Public Sub key_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$,
                               thick#, width#, roughness1$, roughness2$, type%, roughness$)

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A4P(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.11, 0.23, 0)
            If type = 0 Then
                Draw.CreateDrawViewFromModelView3(dz1, "*右视", 0.17, 0.23, 0)
            End If
            Draw.CreateDrawViewFromModelView3(dz1, "*上视", 0.11, 0.16, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见

            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.13, 0.1, Object数组1（0）, Object数组1（1））
            part.ClearSelection2(True)
            'part.ActivateView("工程图视图2")
            'part.InsertModelAnnotations3(0, 32768, True, False, True, True)
            'part.EditUndo2(1)

            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            part.ActivateView("工程图视图1")
            part.Extension.SelectByID2("D2@倒角1@key-1@工程图视图1", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@凸台-拉伸1@key-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 1)
            part.Extension.SelectByID2("D1@倒角1@key-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 1)
            part.ActivateView("工程图视图2")
            part.Extension.SelectByID2("D2@倒角1@key-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 1)
            part.Extension.SelectByID2("D1@凸台-拉伸1@key-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 1)
            part.ActivateView("工程图视图3")
            part.Extension.SelectByID2("D1@倒角1@key-3@工程图视图3", "DIMENSION", 0, 0, 0, True, 0, Nothing, 1)
            part.EditDelete()  ' 删除选中的标注或注释

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点
            Dim SF1, SF2 As Object
            part.ActivateView("工程图视图1")
            P1 = part.SketchManager.CreatePoint(0, thick / 2, 0)
            SF1 = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", roughness1, "", "RZ", "", "", "") '添加粗糙度标识
            SF1.GetAnnotation().SetPosition2(P1.X, P1.Y, 0)
            P2 = part.SketchManager.CreatePoint(0, -thick / 2, 0)
            SF2 = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", roughness1, "", "RZ", "", "", "")
            SF2.GetAnnotation().SetPosition2(P2.X, P2.Y, P2.Z)
            SF2.SetAngle(PI)
            If type = 0 Then
                part.ActivateView("工程图视图3")
            Else
                part.ActivateView("工程图视图2")
            End If
            P3 = part.SketchManager.CreatePoint(0, width / 2, 0)

            SF1 = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", roughness2, "", "RZ", "", "", "")
            SF1.GetAnnotation().SetPosition2(P3.X, P3.Y, P3.Z)
            P4 = part.SketchManager.CreatePoint(0, -width / 2, 0)
            SF2 = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", roughness2, "", "RZ", "", "", "")
            SF2.GetAnnotation().SetPosition2(P4.X, P4.Y, P4.Z)
            SF2.SetAngle(PI)


            If Not roughness = 0 Then
                SF1 = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", roughness, "", "")
                SF1.GetAnnotation().SetPosition2(0.19, 0.27, 0)
            End If

        End Sub
        Public Sub cover_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$,
                               hole_length#, hole_width#, roughness$, note$)

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A4P(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.11, 0.23, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象
            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见

            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.13, 0.1, Object数组1（0）, Object数组1（1））
            part.ClearSelection2(True)

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点
            Dim SF1 As Object
            part.ActivateView("工程图视图1")
            P1 = part.SketchManager.CreatePoint(-hole_length / 2000 + 0.02, hole_width / 2000 - 0.02, 0)
            SF1 = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", roughness, "", "RZ", "", "", "") '添加粗糙度标识
            SF1.GetAnnotation().SetPosition2(P1.X, P1.Y, 0)
            SF1.SetAngle(-PI / 3)
            Dim myAnnotation As Object
            myNote = part.InsertNote(note)
            myNote.LockPosition = False
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False) '无箭头
            myAnnotation.SetPosition(0.17, 0.07, 0)
        End Sub
        Public Sub stator_pressing_ring_hole_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$, outer_diameter#)
            outer_diameter = outer_diameter / 1000

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A3模板(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.28, 0.18, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见
            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.1, 0.06, Object数组1（0）, Object数组1（1）,, Object数组1（2）, Object数组1（3）） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点

            part.ActivateView("工程图视图1")
            L1Segment = part.SketchManager.CreateLine(0， outer_diameter / 2 + 0.002, 0， 0， -outer_diameter / 2 - 0.002, 0)
            L1Segment.Select4(False, Nothing)
            part.CreateSectionViewAt5（0.1, 0.18, 0, "", 132, Nothing, 0） '创建刨视图
            part.ActivateView("工程图视图2")
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            part.Extension.SelectByID2("D1@草图2@8LY.103.001-1@工程图视图1", "DIMENSION", 0.357058327346622, 0.257583112890762, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图1@8LY.103.001-1@工程图视图1", "DIMENSION", 0.28796515411647, 0.198593186689547, 0, True, 0, Nothing, 0)

            part.Extension.SelectByID2("D1@草图2@工程图7-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0.213017746895934, 0.180231050922009, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图1@工程图7-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0.116391864102172, 0.181876747222633, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@凸台-拉伸1@工程图7-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0.103226293697183, 0.200214506001011, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图6@工程图7-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0.0531671002876013, 0.136118411928357, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D4@草图4@工程图7-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0.0777614224705206, 0.177906994752433, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图4@工程图7-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0.163515076807425, 0.0938945313665313, 0, True, 0, Nothing, 0)
            part.EditDelete()
        End Sub
        Public Sub Windshield_ring_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$, outer_diameter#)
            outer_diameter = outer_diameter / 1000

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A3模板(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.28, 0.18, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            'part.ViewDisplayHidden '隐藏线不可见
            'Object数组1 = 索引字符串（skills_requirement）
            '技术要求（0.1, 0.06） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点

            part.ActivateView("工程图视图1")
            L1Segment = part.SketchManager.CreateLine(0， outer_diameter / 2 + 0.01, 0， 0， -outer_diameter / 2 - 0.01, 0)
            L1Segment.Select4(False, Nothing)
            part.CreateSectionViewAt5（0.1, 0.18, 0, "", 132, Nothing, 0） '创建刨视图
            part.ActivateView("工程图视图2")
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            part.Extension.SelectByID2("D3@旋转-薄壁1@8LY.017.001-1@工程图视图1", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)

            part.Extension.SelectByID2("D1@草图2@工程图3-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D3@旋转-薄壁1@工程图3-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()

        End Sub
        Public Sub stator_punch_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$, note$)


            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A3模板(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.14, 0.18, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见
            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.1, 0.06, Object数组1（0）, Object数组1（1）,, Object数组1（2）, Object数组1（3）, Object数组1（4）） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点
            初始设置_new(1)
            part.ActivateView("工程图视图1")
            P9 = part.SketchManager.CreatePoint(-0.0164, 0.312, 0#)
            P10 = part.SketchManager.CreatePoint(0.019, 0.312, 0#)
            P11 = part.SketchManager.CreatePoint(0.019, 0.232, 0#)
            P12 = part.SketchManager.CreatePoint(-0.0164, 0.232, 0#)
            L9Segment = part.SketchManager.CreateLine(P9.X, P9.Y, 0#, P10.X, P10.Y, 0#)
            L10Segment = part.SketchManager.CreateLine(P10.X, P10.Y, 0#, P11.X, P11.Y, 0#)
            L11Segment = part.SketchManager.CreateLine(P11.X, P11.Y, 0#, P12.X, P12.Y, 0#)
            L12Segment = part.SketchManager.CreateLine(P12.X, P12.Y, 0#, P9.X, P9.Y, 0#)
            part.ClearSelection2(True)
            part.ActivateSheet("图纸1")
            part.ActivateView("工程图视图1")
            L9Segment.Select4(True, Nothing)
            L10Segment.Select4(True, Nothing)
            L11Segment.Select4(True, Nothing)
            L12Segment.Select4(True, Nothing)
            part.CreateDetailViewAt3(0.33, 0.205, 0, 0, 1, 1, "I", 0, False) '放大局部视图I
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True)
            part.ClearSelection2(True)


            part.ActivateView("工程图视图1")
            P5 = part.SketchManager.CreatePoint(0.0307, 0.378, 0#)
            P6 = part.SketchManager.CreatePoint(0.0553, 0.375, 0#)
            P7 = part.SketchManager.CreatePoint(0.048, 0.356, 0#)
            P8 = part.SketchManager.CreatePoint(0.0276, 0.362, 0#)
            L5Segment = part.SketchManager.CreateLine(P5.X, P5.Y, 0#, P6.X, P6.Y, 0#)
            L6Segment = part.SketchManager.CreateLine(P6.X, P6.Y, 0#, P7.X, P7.Y, 0#)
            L7Segment = part.SketchManager.CreateLine(P7.X, P7.Y, 0#, P8.X, P8.Y, 0#)
            L8Segment = part.SketchManager.CreateLine(P8.X, P8.Y, 0#, P5.X, P5.Y, 0#)
            part.ClearSelection2(True)
            part.ActivateSheet("图纸1")
            part.ActivateView("工程图视图1")
            L5Segment.Select4(True, Nothing)
            L6Segment.Select4(True, Nothing)
            L7Segment.Select4(True, Nothing)
            L8Segment.Select4(True, Nothing)
            part.CreateDetailViewAt3(0.28, 0.12, 0, 0, 1, 1, "II", 0, False) '放大局部视图II
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True)
            part.ClearSelection2(True)


            part.ActivateView("工程图视图1")
            P1 = part.SketchManager.CreatePoint(-0.0227, 0.38, 0#)
            P2 = part.SketchManager.CreatePoint(0.0223, 0.38, 0#)
            P3 = part.SketchManager.CreatePoint(0.0223, 0.36, 0#)
            P4 = part.SketchManager.CreatePoint(-0.0227, 0.36, 0#)
            L1Segment = part.SketchManager.CreateLine(P1.X, P1.Y, 0#, P2.X, P2.Y, 0#)
            L2Segment = part.SketchManager.CreateLine(P2.X, P2.Y, 0#, P3.X, P3.Y, 0#)
            L3Segment = part.SketchManager.CreateLine(P3.X, P3.Y, 0#, P4.X, P4.Y, 0#)
            L4Segment = part.SketchManager.CreateLine(P4.X, P4.Y, 0#, P1.X, P1.Y, 0#)
            part.ClearSelection2(True)
            part.ActivateSheet("图纸1")
            part.ActivateView("工程图视图1")
            L1Segment.Select4(True, Nothing)
            L2Segment.Select4(True, Nothing)
            L3Segment.Select4(True, Nothing)
            L4Segment.Select4(True, Nothing)
            part.CreateDetailViewAt3(0.355, 0.12, 0, 0, 1, 1, "III", 1, False) '放大局部视图III
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True)
            part.ClearSelection2(True)

            part.ActivateView("工程图视图1")

            part.Extension.SelectByID2("D3@草图6@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图7@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D3@草图7@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D2@草图6@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图6@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D4@草图7@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)

            part.Extension.SelectByID2("D2@草图7@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D5@草图3@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D4@草图3@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D6@草图3@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D3@草图3@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图3@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D2@草图3@8.LY.670.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()

            Dim myAnnotation As Object
            myNote = part.InsertNote(note)
            myNote.LockPosition = False
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False) '无箭头
            myAnnotation.SetPosition(0.37, 0.07, 0)
        End Sub
        Public Sub stator_board_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$)


            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A3模板(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.14, 0.18, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见
            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.1, 0.06, Object数组1（0）, Object数组1（1）） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点
            初始设置_new(1)
            part.ActivateView("工程图视图1")
            P9 = part.SketchManager.CreatePoint(-0.0164, 0.312, 0#)
            P10 = part.SketchManager.CreatePoint(0.019, 0.312, 0#)
            P11 = part.SketchManager.CreatePoint(0.019, 0.232, 0#)
            P12 = part.SketchManager.CreatePoint(-0.0164, 0.232, 0#)
            L9Segment = part.SketchManager.CreateLine(P9.X, P9.Y, 0#, P10.X, P10.Y, 0#)
            L10Segment = part.SketchManager.CreateLine(P10.X, P10.Y, 0#, P11.X, P11.Y, 0#)
            L11Segment = part.SketchManager.CreateLine(P11.X, P11.Y, 0#, P12.X, P12.Y, 0#)
            L12Segment = part.SketchManager.CreateLine(P12.X, P12.Y, 0#, P9.X, P9.Y, 0#)
            part.ClearSelection2(True)
            part.ActivateSheet("图纸1")
            part.ActivateView("工程图视图1")
            L9Segment.Select4(True, Nothing)
            L10Segment.Select4(True, Nothing)
            L11Segment.Select4(True, Nothing)
            L12Segment.Select4(True, Nothing)
            part.CreateDetailViewAt3(0.33, 0.205, 0, 0, 1, 1, "I", 0, False) '放大局部视图I
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True)
            part.ClearSelection2(True)

            part.ActivateView("工程图视图1")
            part.Extension.SelectByID2("D3@草图3@8.LY.680.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("D2@草图3@8.LY.680.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D4@草图3@8.LY.680.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图3@8.LY.680.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()

        End Sub
        Public Sub sling_ring_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$, outer_diameter#, note$, roughness$, roughness1$)
            outer_diameter = outer_diameter / 1000

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A3模板(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*右视", 0.29, 0.18, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见
            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.1, 0.06, Object数组1（0）, Object数组1（1）, Object数组1（2）） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点
            初始设置_new(1)
            part.ActivateView("工程图视图1")
            L1Segment = part.SketchManager.CreateLine(0， outer_diameter / 2 + 0.002, 0， 0， -outer_diameter / 2 - 0.002, 0)
            L1Segment.Select4(False, Nothing)
            part.CreateSectionViewAt5（0.12, 0.18, 0, "", 132, Nothing, 0） '创建刨视图
            part.ActivateView("工程图视图2")
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            part.Extension.SelectByID2("D8@草图1@8LY.102.002-1@工程图视图1", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("D6@草图1@8LY.102.002-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D7@草图1@8LY.102.002-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D5@草图1@8LY.102.002-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()

            part.ActivateView("工程图视图2")
            P1 = part.SketchManager.CreatePoint(-0.0155, 0.0655, 0#)
            P1.Select4(False, Nothing)
            Dim myNote As Object
            Dim myAnnotation As Object
            myNote = part.InsertNote("1×45°" + Chr(13) + Chr(10) +
                                     "两端") '+ Chr(13) + Chr(10)  表示此行结束
            myNote.LockPosition = False
            myNote.Angle = 0
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swUNDERLINED, 0, True, False, False, False)
            myAnnotation.SetPosition(0.1, 0.22, 0#)

            Dim SF1, SF2 As Object
            P2 = part.SketchManager.CreatePoint(-0.001908, 0.065035, 0#)
            SF2 = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", roughness1, "", "RZ", "", "", "")
            SF2.GetAnnotation().SetPosition2(P2.X, P2.Y, P2.Z)
            SF2.SetAngle(PI)

            If Not roughness = 0 Then
                myNote = part.InsertNote(note)
                myNote.LockPosition = False
                myNote.Angle = 0
                myNote.SetBalloon(0, 0)
                myAnnotation = myNote.GetAnnotation()
                myAnnotation.SetLeader3(swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                myAnnotation.SetPosition(0.38, 0.278, 0)
                SF1 = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", roughness, "", "")
                SF1.GetAnnotation().SetPosition2(0.39, 0.27, 0)
            End If

        End Sub
        Public Sub clasp_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$, note$, unfold_l#, length#, height#)
            length = length / 1000
            height = height / 1000

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A4P(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.11, 0.23, 0)
            Draw.CreateDrawViewFromModelView3(dz1, "*上视", 0.11, 0.16, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见
            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.11, 0.1, Object数组1（0）, Object数组1（1）） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)
            part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            Dim myView1, myView2 As Object
            myView1 = part.SelectionManager.GetSelectedObject5(1)
            If unfold_l = 0 Then
                myView1.InsertBreak(0, -(length / 2 - height), length / 2 - height, 1) '断线方向,竖直为0                
                part.BreakView
            Else
                myView1.InsertBreak(0, -((unfold_l - height) / 2 - height), （unfold_l - height） / 2 - height, 1) '断线方向,竖直为0
                part.BreakView
            End If
            part.ClearSelection2(True)
            part.Extension.SelectByID2("工程图视图2", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            myView2 = part.SelectionManager.GetSelectedObject5(1)
            If unfold_l = 0 Then
                myView2.InsertBreak(0, -(length / 2 - height), length / 2 - height, 1) '断线方向,竖直为0                
                part.BreakView
            Else
                myView2.InsertBreak(0, -((unfold_l - height) / 2 - height), （unfold_l - height） / 2 - height, 1) '断线方向,竖直为0
                part.BreakView
            End If

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点
            初始设置_new(1)
            part.ActivateView("工程图视图2")
            L1Segment = part.SketchManager.CreateLine(-length / 2 - 0.01， 0, 0， length / 2 + 0.01， 0, 0)
            L1Segment.Select4(False, Nothing)
            part.CreateSectionViewAt5（0.12, 0.19, 0, "", 132, Nothing, 0） '创建刨视图
            part.DrawingViewRotate(52.5 * PI / 180)
            part.ActivateView("工程图视图3")
            A1 = part.SketchManager.CreateCircleByRadius(length / 2, height / 2, 0#, 0.01)
            A1Segment = A1
            A1Segment.Select4(False, Nothing)
            part.CreateDetailViewAt3(0.18, 0.19, 0, 0, 2, 1, "A-A", 1, False) '放大局部视图II
            part.ClearSelection2(True)
            part.ActivateView("工程图视图4")
            part.Extension.SelectByID2("工程图视图3", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            part.SuppressView '隐藏工程图视图3

            part.Extension.SelectByID2("D1@草图1@8LY.160.001-2@工程图视图2", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            part.EditDelete()

            Dim myAnnotation As Object
            myNote = part.InsertNote(note)
            myNote.LockPosition = False
            myNote.Angle = 0
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
            myAnnotation.SetPosition(0.17, 0.07, 0)

        End Sub
        Public Sub Slot_wedge_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$, note$, fillet#, width#）
            fillet = fillet / 1000
            width = width / 1000

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A4P(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*右视", 0.11, 0.23, 0)
            Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.11, 0.16, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见
            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.11, 0.1, Object数组1（0）, Object数组1（1）, Object数组1（2）） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)
            part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            Dim myView1, myView2 As Object
            myView1 = part.SelectionManager.GetSelectedObject5(1)
            myView1.InsertBreak(0, -0.1, 0.1, 1) '断线方向,竖直为0                
            part.BreakView

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点

            part.Extension.SelectByID2("D1@草图1@8.LY.783.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)

            part.Extension.SelectByID2("D5@草图1@8.LY.783.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()

            Dim myAnnotation As Object
            myNote = part.InsertNote(note)
            myNote.LockPosition = False
            myNote.Angle = 0
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
            myAnnotation.SetPosition(0.17, 0.07, 0)

        End Sub
        Public Sub bushing_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$， outer_diameter#, width#, thick#）
            outer_diameter = outer_diameter / 1000
            width = width / 1000
            thick = thick / 1000

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A4P(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*上视", 0.11, 0.23, 0)
            Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.11, 0.14, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见
            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.08, 0.1, Object数组1（0）, Object数组1（1）, Object数组1（2）, Object数组1（3）, Object数组1（4）） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)

            初始设置_new(1)
            part.ActivateView("工程图视图1")
            part.SketchManager.CreateCornerRectangle(-outer_diameter / 2 - width - 0.01， thick / 2 + 0.01， 0， 0， -thick / 2 - 0.01， 0)
            part.Extension.SelectByID2("Line1", "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("Line2", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("Line3", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("Line4", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            ' 创建断开的刨视图
            part.CreateBreakOutSection(outer_diameter / 2)
            part.ClearSelection2(True)
            初始设置_new(0)
            part.Extension.SelectByID2("D1@倒角1@8LY.211.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("D3@倒角1@8LY.211.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图3@8LY.211.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D2@草图3@8LY.211.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图1@8LY.211.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D2@草图1@8LY.211.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D3@草图2@8LY.211.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@基准面1@8LY.211.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()
        End Sub
        Public Sub fan_ring_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$， outer_diameter#, L_width#, thick#）
            outer_diameter = outer_diameter / 1000
            L_width = L_width / 1000
            thick = thick / 1000

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A3模板(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.14, 0.18, 0)
            Draw.CreateDrawViewFromModelView3(dz1, "*左视", 0.34, 0.18, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            part.ViewDisplayHidden '隐藏线不可见
            Object数组1 = 索引字符串（skills_requirement）
            技术要求（0.1, 0.06, Object数组1（0）, Object数组1（1）） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)

            初始设置_new(1)
            part.ActivateView("工程图视图2")
            A1 = part.SketchManager.CreateCircleByRadius(-(thick / 2 - L_width) + 0.01， -outer_diameter / 2 * Cos(45 * PI / 180) - 0.02， 0， 0.02)
            A1.select2(False, Nothing)
            part.CreateDetailViewAt3(0.24, 0.08, 0, 0, 1, 1, "I", 0, False)
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True)
            part.ClearSelection2(True)

            初始设置_new(0)
            part.Extension.SelectByID2("D2@草图1@8LY.358.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图1@8LY.358.0001-2@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)

            part.Extension.SelectByID2("D2@草图1@8LY.358.0001-1@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()
        End Sub
        Public Sub windshield_board_drw(company$, name$, material$, code$, dz1$, proportion$, skills_requirement$, out_diameter#)
            out_diameter = out_diameter / 1000

            ' 绘制工程图的步骤：
            ' 1、导入图纸
            ' 2、导入需要的零件视图（前视、右视、上视、刨视、局部放大视图（后两者需要在相应的工程图内绘制草图选取））
            ' 3、设置图纸比例
            ' 4、导入技术要求
            ' 5、显示视图的尺寸，选取需要删除的尺寸
            ' 6、插入需要的注释
            A3模板(material, company, name, code)
            myView = Draw.CreateDrawViewFromModelView3(dz1, "*前视", 0.28, 0.18, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            设置图纸比例(proportion)
            'part.ViewDisplayHidden '隐藏线不可见
            'Object数组1 = 索引字符串（skills_requirement）
            '技术要求（0.1, 0.06） '几行技术要求数组对象就是几个
            part.ClearSelection2(True)

            ' 在工程图中插入一个注释的步骤：
            ' 1、激活对应的视图
            ' 2、在想要插入的位置创造一个点
            ' 3、插入需要的注释
            ' 4、获得这个注释的注文，改变其位置到创造的那个点

            part.ActivateView("工程图视图1")
            L1Segment = part.SketchManager.CreateLine(0， out_diameter / 2 + 0.01, 0， 0， -out_diameter / 2 - 0.01, 0)
            L1Segment.Select4(False, Nothing)
            part.CreateSectionViewAt5（0.1, 0.18, 0, "", 132, Nothing, 0） '创建刨视图
            part.ActivateView("工程图视图2")
            part.InsertModelAnnotations3(0, 32768 + 32 + 4 + 2 + 64 + 128, True, False, True, True) '导入要显示的对象

            part.Extension.SelectByID2("D1@草图1@8LY.016.4591-1@工程图视图1", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)

            part.Extension.SelectByID2("D1@草图6@工程图4-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@草图2@工程图4-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D4@草图6@工程图4-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@凸台-拉伸1@工程图4-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D1@凸台-拉伸2@工程图4-SectionAssembly-1-1@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()

        End Sub
        Public Sub A4P(material$, company$, name$, Code$)
            Draw = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4p.drwdot", 1, 0, 0)
            part = swapp.ActiveDoc
            myNote = part.InsertNote("公司名称")
            If Not myNote Is Nothing Then
                myNote.LockPosition = False
                myNote.Angle = 0
                myNote.SetBalloon(0, 0)
                Annotation = myNote.GetAnnotation()
                If Not Annotation Is Nothing Then
                    Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                    Annotation.SetPosition(0.164493037612998, 0.0537752937136617, 0)
                    Annotation.SetTextFormat(0, True, 0)
                End If
            End If
            part.ClearSelection2(True)
            part.WindowRedraw()

            View = Draw.GetFirstView 'A4P
            Do Until View Is Nothing
                Notes = View.GetNotes()
                Count = View.GetNoteCount()
                If Count > 0 Then
                    For Each N1 In Notes
                        Annotation = N1.GetAnnotation()
                        Annpos = Annotation.GetPosition()
                        If Annpos(0) > 104 / 1000 And Annpos(0) < 153 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                            N1.SetText(material)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                            N1.SetText(company)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                            N1.SetText(name)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 12 / 1000 And Annpos(1) < 24 / 1000 Then
                            N1.SetText(Code)
                        End If
                        If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                            N1.SetText(Code)
                        End If

                    Next
                End If
                View = View.GetNextView() '获得下一个视图引用
            Loop
            Draw.EditRebuild3()
        End Sub
        Public Sub A3模板(material$, company$, name$, Code$)
            Draw = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a3.drwdot", 1, 0, 0)
            part = swapp.ActiveDoc
            myNote = part.InsertNote("公司名称")
            If Not myNote Is Nothing Then
                myNote.LockPosition = False
                myNote.Angle = 0
                myNote.SetBalloon(0, 0)
                Annotation = myNote.GetAnnotation()
                If Not Annotation Is Nothing Then
                    Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                    Annotation.SetPosition(0.375, 0.055, 0)
                    Annotation.SetTextFormat(0, True, 0)
                End If
            End If
            part.ClearSelection2(True)
            part.WindowRedraw()

            View = Draw.GetFirstView 'A3
            Do Until View Is Nothing
                Notes = View.GetNotes()
                Count = View.GetNoteCount()
                If Count > 0 Then
                    For Each N1 In Notes
                        Annotation = N1.GetAnnotation()
                        Annpos = Annotation.GetPosition()
                        If Annpos(0) > 315 / 1000 And Annpos(0) < 365 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                            N1.SetText(material)
                        End If


                        If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 42 / 1000 And Annpos(1) < 61 / 1000 Then
                            N1.SetText(company)
                        End If


                        If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                            N1.SetText(name)
                        End If

                        If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 14 / 1000 And Annpos(1) < 23 / 1000 Then
                            N1.SetText(Code)
                        End If


                        If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                            N1.SetText(Code)
                        End If

                    Next
                End If
                View = View.GetNextView() '获得下一个视图引用
            Loop
            Draw.EditRebuild3()
        End Sub
        Public Sub 设置图纸比例(图纸比例$)
            Dim Sheet1 As SldWorks.Sheet '图纸对象
            swapp = CreateObject("Sldworks.application")
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            Dim SheetPr() As Double
            SheetPr = Sheet1.GetProperties2()

            Dim aaa As Object()
            aaa = 索引字符串(图纸比例$, ":")
            SheetPr(2) = aaa(0)
            SheetPr(3) = aaa(1) '分母
            SheetPr(4) = 1
            Sheet1.SetProperties2(SheetPr(0), SheetPr(1), SheetPr(2), SheetPr(3), SheetPr(4), SheetPr(5), SheetPr(6), SheetPr(7))
            Draw.EditRebuild()
        End Sub
        Public Function 索引字符串(str$, Optional 分隔符$ = "\") As Object()
            Dim strs() As Object
            索引字符串 = Split(str$, 分隔符$)
            '索引字符串 = 索引字符串
            '次序 = 次序 - 1
            '索引字符串 = strs(次序)
        End Function
        Public Sub 技术要求(X#, Y#, 技术要求1$, 技术要求2$, Optional 技术要求3$ = " ", Optional 技术要求4$ = " ", Optional 技术要求5$ = " ", Optional 技术要求6$ = "", Optional 技术要求7$ = "", Optional 技术要求8$ = "", Optional 技术要求9$ = "", Optional 技术要求10$ = "")
            part = swapp.ActiveDoc
            part.FontPoints(18)
            myNote = part.InsertNote(技术要求1 + Chr(13) + Chr(10) +
               技术要求2 + Chr(13) + Chr(10) +
               技术要求3 + Chr(13) + Chr(10) +
               技术要求4 + Chr(13) + Chr(10) +
               技术要求5 + Chr(13) + Chr(10) +
               技术要求6 + Chr(13) + Chr(10) +
                技术要求7 + Chr(13) + Chr(10) +
                技术要求8 + Chr(13) + Chr(10) +
                技术要求9 + Chr(13) + Chr(10) +
                技术要求10)
            Annotation = myNote.GetAnnotation()
            Annotation.SetPosition(X, Y, 0)
        End Sub
        '其他模块
        Public Function 修改标注尺寸(vaule#) '修改标注尺寸 = ChangeDimensionVaule
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = vaule
        End Function
        Function ObjectArrayToDispatchWrapperArray(ByVal Objects As Object()) As DispatchWrapper()
            Dim ArraySize As Integer
            ArraySize = Objects.GetUpperBound(0)
            Dim d(ArraySize) As DispatchWrapper
            Dim ArrayIndex As Integer
            For ArrayIndex = 0 To ArraySize
                d(ArrayIndex) = New DispatchWrapper(Objects(ArrayIndex))
            Next
            Return d
        End Function
        Public Sub simulation_initialization(零件地址$, 类型$, 材料$)
            swapp = CreateObject("Sldworks.application")
            OpenDoc7 = swapp.OpenDoc7("C:  \Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            swapp.OpenDoc6(零件地址, 1, 32, "", errors, longwarnings)
            'NewDocument = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_part.prtdot", 0, 0, 0)
            part = swapp.ActiveDoc
            SketchManager = part.SketchManager
            FeatureManager = part.FeatureManager
            SelectionMgr = part.SelectionManager
            初始设置_new（1）


            part.Extension.SelectByID2(part.GetTitle, "COMPONENT", 0, 0, 0, False, 0, Nothing, 0)
            part.AddConfiguration2("应力仿真", "", "", False, False, False, True, 256)
            part.ShowConfiguration2("应力仿真")
            part.ForceRebuild3(True)

            Dim int As Integer
            int = 1
            Do Until int = 0
                int = swapp.LoadAddIn("C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\Simulation\cosworks.dll")
            Loop




            part.GraphicsRedraw2()
            CWAddinCallBackObj = swapp.GetAddInObject("SldWorks.Simulation")
            COSMOSWORKSObj = CWAddinCallBackObj.COSMOSWORKS


            ActiveDocObj = COSMOSWORKSObj.ActiveDoc()
            StudyManagerObj = ActiveDocObj.StudyManager()

            Do Until StudyManagerObj.StudyCount = 0
                StudyObj = StudyManagerObj.GetStudy(0)
                StudyManagerObj.DeleteStudy(StudyObj.Name)
            Loop









            NewStudyName = 类型 + (StudyManagerObj.StudyCount + 1).ToString
            'StudyObj = StudyManagerObj.CreateNewStudy3(NewStudyName, 0, 0, ErrorCodeObj)
            If 类型 = "静应力分析" Then
                StudyObj = StudyManagerObj.CreateNewStudy3(NewStudyName, 0, 0, ErrorCodeObj)
            ElseIf 类型 = "频率" Then
                StudyObj = StudyManagerObj.CreateNewStudy3(NewStudyName, 1， -1, ErrorCodeObj)
            End If




            StudyManagerObj.ActiveStudy = StudyManagerObj.StudyCount
            SolidManagerObj = StudyObj.SolidManager()
            ErrorCodeObj = SolidManagerObj.SetLibraryMaterialToAllBodiesByCompName(Left(part.GetTitle, part.GetTitle.Length - 7), "solidworks materials", 材料)











            'Select multibody component
            Dim swMass As MassProperty
            part.Extension.SelectByID2(part.GetTitle, "COMPONENT", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Component2 = SelectionMgr.GetSelectedObject5(1)
            swMass = part.Extension.CreateMassProperty
            Dim vBodies(0) As Object
            Dim aa As Object
            vBodies = Component2.GetBodies(0)
            Dim dispArray() As DispatchWrapper
            dispArray = ObjectArrayToDispatchWrapperArray(vBodies)
            swMass.AddBodies(dispArray)
            'Get mass properties of selected component's bodies
            MsgBox(swMass.Mass) '质量
            MsgBox(swMass.Volume) '体积
            MsgBox(swMass.Density） '密度
            'MsgBox(swMass.ma）
            Dim aaa As Double()
            aaa = swMass.CenterOfMass '质心
            MsgBox(aaa(0))
            MsgBox(aaa(1))
            MsgBox(aaa(2))







            Dim massPropMgr As CWMassPropertiesManager
            massPropMgr = StudyObj.GetMassPropertiesManager
            massPropMgr.SetCoordinateSystemToDefault()

            MsgBox(444)


            'Dim aaa As Integer
            'Dim bbb As CWSolidBody
            'bbb = SolidManagerObj.GetSolidBodyByName("切除-拉伸10", aaa)
            'Object数组1(0) = bbb

            'part.Extension.SelectByID2("切除-拉伸10", "SOLIDBODY", 0, 0, 0, False, 0, Nothing, 0)
            'SelectionMgr = part.SelectionManager
            'swbody = SelectionMgr.GetSelectedObject6(1, -1)
            'Object数组1(0) = swbody


            'massPropMgr.a

            massPropMgr.AddBodies(dispArray)



            MsgBox(massPropMgr.Mass) '体积
            MsgBox(massPropMgr.Volume)


            Object数组1 = massPropMgr.GetCenterOfMass

            MsgBox(Object数组1(0))
            MsgBox(Object数组1(1))
            MsgBox(Object数组1(2))

            Object数组1 = massPropMgr.GetMomentOfInertia
            Object数组1 = massPropMgr.GetMomentOfInertiaAtOutputCoordinateSystem
            Object数组1 = massPropMgr.GetPrincipalAxesOfInertia
            Object数组1 = massPropMgr.GetPrincipalMomentOfInertia


        End Sub
        Public Sub ADDPro(dz$, name$, Code$, material$)
            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            swapp.OpenDoc7(dz)
            part.SetMaterialPropertyName2("默认", "C:/Program Files/SOLIDWORKS Corp/SOLIDWORKS/lang/chinese-simplified/sldmaterials/solidworks materials.sldmat", "合金钢")
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", name)
            cusproper.Set2("代号", Code)
            cusproper.Set2("材料", material)
            part.EditRebuild3()
        End Sub
        Sub StringtoArray(ByVal inputSTR As String, ByRef varEntity As Object)
            Dim PID() As Byte
            Dim i As Integer
            varEntity = Split(inputSTR, ",")
            ReDim PID(UBound(varEntity))
            For i = 0 To (UBound(varEntity) - 1)
                PID(i) = varEntity(i)
            Next i
            varEntity = PID
        End Sub
        Public Sub 线圈模块(总匝数%， 线圈间距#, 线圈直径#)

            线圈间距 = 线圈间距 / 4
            part = swapp.ActiveDoc
            part.SketchManager.Insert3DSketch（True）
            'Dim 总匝数%
            '总匝数 = 10
            For I = 1 To 总匝数
                DP1 = part.SketchManager.CreatePoint(0.1, 0.1, 线圈间距# * (（I - 1） * 4))
                DP2 = part.SketchManager.CreatePoint(-0.1, 0.1, 线圈间距# * (（I - 1） * 4 + 1))
                DP3 = part.SketchManager.CreatePoint(-0.1, -0.1, 线圈间距# * (（I - 1） * 4 + 2))
                DP4 = part.SketchManager.CreatePoint(0.1, -0.1, 线圈间距# * (（I - 1） * 4 + 3))
                If I = 总匝数 Then
                    DP5 = part.SketchManager.CreatePoint(0.1, 0.1, 线圈间距# * (（I - 1） * 4 + 4))
                End If

                part.SketchManager.CreateLine(DP1.X, DP1.Y, DP1.Z, DP2.X, DP2.Y, DP2.Z)
                If I = 1 Then
                    DL1 = SelectionMgr.GetSelectedObject6(1, -1)
                End If

                part.SketchManager.CreateLine(DP2.X, DP2.Y, DP2.Z, DP3.X, DP3.Y, DP3.Z)
                part.SketchManager.CreateLine(DP3.X, DP3.Y, DP3.Z, DP4.X, DP4.Y, DP4.Z)
                part.SketchManager.CreateLine(DP4.X, DP4.Y, DP4.Z, DP1.X, DP1.Y, DP4.Z + 线圈间距)
                'If I = 总匝数 Then
                '    part.SketchManager.CreateLine(DP5.X, DP5.Y, DP5.Z, DP2.X, DP2.Y, DP5.Z + 0.01)
                'End If
                part.SetPickMode()
                part.ClearSelection2（True）

                If Not I = 1 Then
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 1).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                    part.SketchManager.CreateFillet(0.01, 1)
                End If
                part.Extension.SelectByID2("Line" + （（I - 1） * 4 + 1).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 2).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                part.SketchManager.CreateFillet(0.01, 1)
                part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 2).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 3).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                part.SketchManager.CreateFillet(0.01, 1)
                part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 3).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 4).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                part.SketchManager.CreateFillet(0.01, 1)



                If I = 1 Then
                    P1 = DL1.GetStartPoint2
                End If
            Next


            sketchfeature1 = part.GetActiveSketch2
            part.SketchManager.InsertSketch（True）

            基准面P1L1_new(DL1, P1).Select2(False, 1)
            SketchManager.InsertSketch(True)
            A1 = SketchManager.CreateCircleByRadius(0， 0， 0， 线圈直径 / 2)
            sketchfeature2 = part.GetActiveSketch2
            SketchManager.InsertSketch(True)

            part.Extension.SelectByID2(sketchfeature2.Name, "SKETCH", 0, 0, 0, False, 1, Nothing, 0)
            part.Extension.SelectByID2(sketchfeature1.Name, "SKETCH", 0, 0, 0, True, 4, Nothing, 0)
            扫描拉伸_new()


            MsgBox(999)
        End Sub
        Public Sub 线圈(圈数%， 线圈间距#, 线圈直径#， 宽#， 高#)
            宽 = 宽 - 线圈直径 / 2
            高 = 高 - 线圈直径 / 2
            线圈间距 = 线圈间距 / 4
            part = swapp.ActiveDoc
            part.SketchManager.Insert3DSketch（True）
            'Dim 总匝数%
            '总匝数 = 10
            For I = 1 To 2
                DP1 = part.SketchManager.CreatePoint(宽# / 2, 高# / 2, 线圈间距# * (（I - 1） * 4))
                DP2 = part.SketchManager.CreatePoint(-宽# / 2, 高# / 2, 线圈间距# * (（I - 1） * 4 + 1))
                DP3 = part.SketchManager.CreatePoint(-宽# / 2, -高# / 2, 线圈间距# * (（I - 1） * 4 + 2))
                DP4 = part.SketchManager.CreatePoint(宽# / 2, -高# / 2, 线圈间距# * (（I - 1） * 4 + 3))
                'If I = 总匝数 Then
                '    DP5 = part.SketchManager.CreatePoint(0.1, 0.1, 线圈间距# * (（I - 1） * 4 + 4))
                'End If

                part.SketchManager.CreateLine(DP1.X, DP1.Y, DP1.Z, DP2.X, DP2.Y, DP2.Z)
                If I = 2 Then
                    DL1 = SelectionMgr.GetSelectedObject6(1, -1)
                Else
                    DL2 = SelectionMgr.GetSelectedObject6(1, -1)
                End If





                part.SketchManager.CreateLine(DP2.X, DP2.Y, DP2.Z, DP3.X, DP3.Y, DP3.Z)
                If I = 2 Then
                    DL3 = SelectionMgr.GetSelectedObject6(1, -1)
                End If


                If I = 1 Then
                    part.SketchManager.CreateLine(DP3.X, DP3.Y, DP3.Z, DP4.X, DP4.Y, DP4.Z)
                    part.SketchManager.CreateLine(DP4.X, DP4.Y, DP4.Z, DP1.X, DP1.Y, DP4.Z + 线圈间距)
                End If

                'If I = 总匝数 Then
                '    part.SketchManager.CreateLine(DP5.X, DP5.Y, DP5.Z, DP2.X, DP2.Y, DP5.Z + 0.01)
                'End If
                part.SetPickMode()
                part.ClearSelection2（True）

                If I = 2 Then
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 1).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                    part.SketchManager.CreateFillet(0.01, 1)
                    part.Extension.SelectByID2("Line" + （（I - 1） * 4 + 1).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 2).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                    SketchSegment1 = part.SketchManager.CreateFillet(0.01, 1)

                    MsgBox(999)

                End If
                If I = 1 Then
                    part.Extension.SelectByID2("Line" + （（I - 1） * 4 + 1).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 2).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                    part.SketchManager.CreateFillet(0.01, 1)
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 2).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 3).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                    part.SketchManager.CreateFillet(0.01, 1)
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 3).ToString, "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
                    part.Extension.SelectByID2("Line" + (（I - 1） * 4 + 4).ToString, "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
                    part.SketchManager.CreateFillet(0.01, 1)
                End If

                If I = 2 Then
                    P1 = DL1.GetStartPoint2

                    DL2.SELECT2(False, Nothing)
                    part.EditDelete()

                    DL3.SELECT2(False, Nothing)
                    part.EditDelete()

                    SketchSegment1.Select2(False, Nothing)
                    part.EditDelete()
                End If
            Next


            sketchfeature1 = part.GetActiveSketch2
            part.SketchManager.InsertSketch（True）

            基准面P1L1_new(DL1, P1).Select2(False, 1)
            SketchManager.InsertSketch(True)
            A1 = SketchManager.CreateCircleByRadius(0， 0， 0， 线圈直径 / 2)
            sketchfeature2 = part.GetActiveSketch2
            SketchManager.InsertSketch(True)

            part.Extension.SelectByID2(sketchfeature2.Name, "SKETCH", 0, 0, 0, False, 1, Nothing, 0)
            part.Extension.SelectByID2(sketchfeature1.Name, "SKETCH", 0, 0, 0, True, 4, Nothing, 0)
            Feature = 扫描拉伸_new()

            渲染_new(Feature, "C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\data\graphics\materials\metal\copper\polished copper.p2m")
            Feature.Select2（False, 4）
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, True, 1, Nothing, 0)
            part.FeatureManager.FeatureLinearPattern5(圈数, 线圈间距 * 4, 0, 0, False, False, "NULL", "NULL", False, False, False, False, False, False, True, True, False, False, 0, 0, False, False)

            渲染_new(Feature, "C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\data\graphics\materials\metal\copper\polished copper.p2m")
            '获得sketchsegment根据name()
            MsgBox(999)
        End Sub
        Public Sub over(dz$)
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
            part.SaveAs3(dz, 0, 8)
        End Sub
        Public Function A3模板(dz$, 主视图X#, 主视图Y#, 图纸比例值#, name$, material$, code$, Optional 技术要求1$ = "", Optional 技术要求2$ = "", Optional 技术要求3$ = "", Optional 技术要求4$ = "", Optional 技术要求5$ = "", Optional 技术要求6$ = "", Optional 图纸格式$ = "A3", Optional 视图$ = "前视") 'Company $, name $, material $, code $

            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")

            Dim NewDocument As SldWorks.ModelDoc2
            If 图纸格式$ = "A3" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a3.drwdot", 1, 0, 0)
            ElseIf 图纸格式$ = "A4P" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4P.drwdot", 1, 0, 0)
            End If



            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
            Dim SketchManager As SldWorks.SketchManager = part.SketchManager
            Dim FeatureManager As SldWorks.FeatureManager = part.FeatureManager
            Dim Dimension As SldWorks.Dimension
            Dim DisplayDimension As SldWorks.DisplayDimension
            Dim sketch As SldWorks.Sketch
            Dim Feature As SldWorks.Feature
            Dim SelectionMgr As SldWorks.SelectionMgr = part.SelectionManager

            Dim Draw As SldWorks.DrawingDoc = swapp.ActiveDoc
            Dim View As SldWorks.View '视图对象
            Dim Notes As Object
            Dim Count As Long
            Dim Annpos() As Double
            Dim Note As SldWorks.Note
            Dim Annotation As SldWorks.Annotation
            Dim Annotations() As Object
            'Dim myView As SldWorks.View
            Dim Displaydimention As SldWorks.DisplayDimension



            Dim DrawTitle As String
            DrawTitle = Draw.GetTitle
            Dim myViewname As String
            part.ViewZoomtofit2()
            SelectionMgr = part.SelectionManager
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 4)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            myView = Draw.CreateDrawViewFromModelView3(dz, "*" + 视图, 主视图X#, 主视图Y#, 0)



            myViewname = myView.Name
            Debug.Print(myViewname)
            'myView = Draw.CreateUnfoldedViewAt3(0.3, 0.19, 0, False)
            Dim myNote As Object
            myNote = part.InsertNote("公司名称")
            If 图纸格式 = "A3" Then

                If Not myNote Is Nothing Then
                    myNote.LockPosition = False
                    myNote.Angle = 0
                    myNote.SetBalloon(0, 0)
                    Annotation = myNote.GetAnnotation()
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.375, 0.055, 0)
                        Annotation.SetTextFormat(0, True, 0)
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()

                View = Draw.GetFirstView 'A3
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes
                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 42 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司")
                            End If
                            If Annpos(0) > 315 / 1000 And Annpos(0) < 365 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)
                            End If
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 14 / 1000 And Annpos(1) < 23 / 1000 Then
                                N1.SetText(code)
                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)
                            End If
                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()

            ElseIf 图纸格式 = "A4P" Then
                If Not myNote Is Nothing Then
                    myNote.LockPosition = False
                    myNote.Angle = 0
                    myNote.SetBalloon(0, 0)
                    Annotation = myNote.GetAnnotation()
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.164493037612998, 0.0537752937136617, 0)
                        Annotation.SetTextFormat(0, True, 0)
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()

                View = Draw.GetFirstView 'A4P
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes

                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 104 / 1000 And Annpos(0) < 153 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司")


                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)


                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 12 / 1000 And Annpos(1) < 24 / 1000 Then
                                N1.SetText(code)


                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)


                            End If

                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()
            End If










            part = swapp.ActiveDoc
            part.FontPoints(18)
            myNote = part.InsertNote(
            技术要求1 + Chr(13) + Chr(10) +
            技术要求2 + Chr(13) + Chr(10) +
            技术要求3 + Chr(13) + Chr(10) +
            技术要求4 + Chr(13) + Chr(10) +
            技术要求5 + Chr(13) + Chr(10) +
            技术要求6）
            Annotation = myNote.GetAnnotation()
            Annotation.SetPosition(0.075, 0.07, 0)


            Dim Sheet1 As SldWorks.Sheet '图纸对象

            Dim SheetPr() As Double
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            SheetPr = Sheet1.GetProperties2()
            SheetPr(2) = 1
            SheetPr(3) = 1 / 图纸比例值
            SheetPr(4) = 1
            Sheet1.SetProperties2(SheetPr(0), SheetPr(1), SheetPr(2), SheetPr(3), SheetPr(4), SheetPr(5), SheetPr(6), SheetPr(7))
            Draw.EditRebuild()





            part.InsertModelAnnotations3(0, 32864 + 2, True, False, True, True) '允许有重复标注


            'part.Extension.SelectByID2("草图1@*@工程图视图1", "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            'part.UnblankSketch()
            'part.Extension.SelectByID2("草图1@*@工程图视图1", "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            'part.BlankSketch()
        End Function
        Public Function A4P模板(dz$, 主视图X#, 主视图Y#, 图纸比例值#, name$, material$, code$, Optional 技术要求1$ = "", Optional 技术要求2$ = "", Optional 技术要求3$ = "", Optional 技术要求4$ = "", Optional 技术要求5$ = "", Optional 技术要求6$ = "", Optional 图纸格式$ = "A4P") 'Company $, name $, material $, code $

            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")

            Dim NewDocument As SldWorks.ModelDoc2
            If 图纸格式$ = "A3" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a3.drwdot", 1, 0, 0)
            ElseIf 图纸格式$ = "A4P" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4P.drwdot", 1, 0, 0)
            End If



            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
            Dim SketchManager As SldWorks.SketchManager = part.SketchManager
            Dim FeatureManager As SldWorks.FeatureManager = part.FeatureManager
            Dim Dimension As SldWorks.Dimension
            Dim DisplayDimension As SldWorks.DisplayDimension
            Dim sketch As SldWorks.Sketch
            Dim Feature As SldWorks.Feature
            Dim SelectionMgr As SldWorks.SelectionMgr = part.SelectionManager





            Dim Draw As SldWorks.DrawingDoc = swapp.ActiveDoc
            Dim View As SldWorks.View '视图对象
            Dim Notes As Object
            Dim Count As Long
            Dim Annpos() As Double
            Dim Note As SldWorks.Note
            Dim Annotation As SldWorks.Annotation
            Dim Annotations() As Object
            Dim myView As SldWorks.View
            Dim Displaydimention As SldWorks.DisplayDimension



            Dim DrawTitle As String
            DrawTitle = Draw.GetTitle
            Dim myViewname As String
            part.ViewZoomtofit2()
            SelectionMgr = part.SelectionManager
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 4)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            myView = Draw.CreateDrawViewFromModelView3(dz, "*前视", 主视图X#, 主视图Y#, 0)



            myViewname = myView.Name
            Debug.Print(myViewname)
            'myView = Draw.CreateUnfoldedViewAt3(0.3, 0.19, 0, False)
            Dim myNote As Object
            myNote = part.InsertNote("公司名称")
            If 图纸格式 = "A4P" Then

                If Not myNote Is Nothing Then
                    myNote.LockPosition = False
                    myNote.Angle = 0
                    myNote.SetBalloon(0, 0)
                    Annotation = myNote.GetAnnotation()
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.375, 0.055, 0)
                        Annotation.SetTextFormat(0, True, 0)
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()

                View = Draw.GetFirstView 'A4P
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes
                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 104 / 1000 And Annpos(0) < 153 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司")
                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)
                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 12 / 1000 And Annpos(1) < 24 / 1000 Then
                                N1.SetText(code)
                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)
                            End If
                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()

            End If










            part = swapp.ActiveDoc
            part.FontPoints(18)
            myNote = part.InsertNote(
            技术要求1 + Chr(13) + Chr(10) +
            技术要求2 + Chr(13) + Chr(10) +
            技术要求3 + Chr(13) + Chr(10) +
            技术要求4 + Chr(13) + Chr(10) +
            技术要求5 + Chr(13) + Chr(10) +
            技术要求6）
            Annotation = myNote.GetAnnotation()
            Annotation.SetPosition(0.081, 0.118, 0)


            Dim Sheet1 As SldWorks.Sheet '图纸对象

            Dim SheetPr() As Double
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            SheetPr = Sheet1.GetProperties2()
            SheetPr(2) = 1
            SheetPr(3) = 1 / 图纸比例值
            SheetPr(4) = 1
            Sheet1.SetProperties2(SheetPr(0), SheetPr(1), SheetPr(2), SheetPr(3), SheetPr(4), SheetPr(5), SheetPr(6), SheetPr(7))
            Draw.EditRebuild()





            part.InsertModelAnnotations3(0, 32864 + 2, True, False, True, True) '允许有重复标注


            'part.Extension.SelectByID2("草图1@*@工程图视图1", "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            'part.UnblankSketch()
            'part.Extension.SelectByID2("草图1@*@工程图视图1", "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            'part.BlankSketch()
        End Function

        Public Function Exciter_rotor_pressing_ring_开始(dz$, 主视图X#, 主视图Y#, 图纸比例值#, name$, material$, code$, Optional 技术要求1$ = "", Optional 技术要求2$ = "", Optional 技术要求3$ = "", Optional 技术要求4$ = "", Optional 技术要求5$ = "", Optional 技术要求6$ = "", Optional 图纸格式$ = "A3") 'Company $, name $, material $, code $
            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")

            Dim NewDocument As SldWorks.ModelDoc2
            If 图纸格式$ = "A3" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a3.drwdot", 1, 0, 0)
            ElseIf 图纸格式$ = "A4P" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4P.drwdot", 1, 0, 0)
            End If



            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
            Dim SketchManager As SldWorks.SketchManager = part.SketchManager
            Dim FeatureManager As SldWorks.FeatureManager = part.FeatureManager
            Dim Dimension As SldWorks.Dimension
            Dim DisplayDimension As SldWorks.DisplayDimension
            Dim sketch As SldWorks.Sketch
            Dim Feature As SldWorks.Feature
            Dim SelectionMgr As SldWorks.SelectionMgr = part.SelectionManager

            Dim Draw As SldWorks.DrawingDoc = swapp.ActiveDoc
            Dim View As SldWorks.View '视图对象
            Dim Notes As Object
            Dim Count As Long
            Dim Annpos() As Double
            Dim Note As SldWorks.Note
            Dim Annotation As SldWorks.Annotation
            Dim Annotations() As Object
            Dim myView As SldWorks.View
            Dim myview1 As SldWorks.View
            Dim Displaydimention As SldWorks.DisplayDimension



            Dim DrawTitle As String
            DrawTitle = Draw.GetTitle
            Dim myViewname As String
            part.ViewZoomtofit2()
            SelectionMgr = part.SelectionManager
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 4)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            myView = Draw.CreateDrawViewFromModelView3(dz, "*前视", 主视图X#, 主视图Y#, 0)

            'Draw.CreateDrawViewFromModelView3(dz, "*左视", 0.326, 0.17, 0)
            part.ActivateView("工程图视图1")
            part.SketchManager.CreateLine(-0.2 * 图纸比例值, 0, 0#, 0.2 * 图纸比例值, 0, 0#)
            myview1 = part.CreateSectionViewAt5(0.32, 主视图Y#, 0, "A", 1, Nothing, 0) '第5参数为1设置不与主视图对齐
            'MsgBox(666)



            myViewname = myView.Name
            Debug.Print(myViewname)
            'myView = Draw.CreateUnfoldedViewAt3(0.3, 0.19, 0, False)
            Dim myNote As Object
            myNote = part.InsertNote("公司名称")
            If 图纸格式 = "A3" Then

                If Not myNote Is Nothing Then
                    myNote.LockPosition = False
                    myNote.Angle = 0
                    myNote.SetBalloon(0, 0)
                    Annotation = myNote.GetAnnotation()
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.375, 0.055, 0)
                        Annotation.SetTextFormat(0, True, 0)
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()

                View = Draw.GetFirstView 'A3
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes
                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 42 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司")
                            End If
                            If Annpos(0) > 315 / 1000 And Annpos(0) < 365 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)
                            End If
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 14 / 1000 And Annpos(1) < 23 / 1000 Then
                                N1.SetText(code)
                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)
                            End If
                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()

            ElseIf 图纸格式 = "A4P" Then
                If Not myNote Is Nothing Then
                    myNote.LockPosition = False
                    myNote.Angle = 0
                    myNote.SetBalloon(0, 0)
                    Annotation = myNote.GetAnnotation()
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.164493037612998, 0.0537752937136617, 0)
                        Annotation.SetTextFormat(0, True, 0)
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()

                View = Draw.GetFirstView 'A4P
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes

                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 104 / 1000 And Annpos(0) < 153 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司")


                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)


                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 12 / 1000 And Annpos(1) < 24 / 1000 Then
                                N1.SetText(code)


                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)


                            End If

                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()
            End If










            part = swapp.ActiveDoc
            part.FontPoints(18)
            myNote = part.InsertNote(
            技术要求1 + Chr(13) + Chr(10) +
            技术要求2 + Chr(13) + Chr(10) +
            技术要求3 + Chr(13) + Chr(10) +
            技术要求4 + Chr(13) + Chr(10) +
            技术要求5 + Chr(13) + Chr(10) +
            技术要求6）
            Annotation = myNote.GetAnnotation()
            Annotation.SetPosition(0.075, 0.07, 0)


            Dim Sheet1 As SldWorks.Sheet '图纸对象

            Dim SheetPr() As Double
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            SheetPr = Sheet1.GetProperties2()
            SheetPr(2) = 1
            SheetPr(3) = 1 / 图纸比例值
            SheetPr(4) = 1
            Sheet1.SetProperties2(SheetPr(0), SheetPr(1), SheetPr(2), SheetPr(3), SheetPr(4), SheetPr(5), SheetPr(6), SheetPr(7))
            Draw.EditRebuild()



            'Dim propertymanager As SldWorks.ModelViewManager
            'propertymanager.GetFeatureManagerTabs()

            'Dim propertymanager As New SldWorks.CustomPropertyManager
            'propertymanager.IsCustomPropertyEditable()

            'Dim propertymanager As New SldWorks.PropertyManagerPage2
            'propertymanager.

            'Dim propertymanager As New SldWorks.PropertyManagerPageActiveX
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageBitmapButton
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageBitmap
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageButton
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageCheckbox
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageControl
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageListbox
            'propertymanager.InsertItem()


            'Dim propertymanager As New SldWorks.PropertyManagerPageOption
            'propertymanager.



            part.Extension.SelectByID2(myView.GetName2, "DRAWINGVIEW", 0.103742299651568, 0.238044982578397, 0, False, 0, Nothing, 0)
            part.InsertModelAnnotations3(0, 32864 + 2, False, False, True, True) '在当前选中视图插入注释，允许有重复标注

            part.Extension.SelectByID2(myview1.GetName2, "DRAWINGVIEW", 0.103742299651568, 0.238044982578397, 0, False, 0, Nothing, 0)
            part.InsertModelAnnotations3(0, 32864 + 2, False, True, True, True) '在当前选中视图插入注释，不允许有重复标注



            part.Extension.SelectByID2("草图1@*@工程图视图1", "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            part.UnblankSketch()
            part.Extension.SelectByID2("草图1@*@工程图视图1", "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            part.BlankSketch()
        End Function

        Public Function 圆底槽口局部视图(局部视图X#, 局部视图Y#, 局部视图图纸比例值#, 局部视图圆心X#, 局部视图圆心Y#, 局部视图圆半径#, Slot_Relative_Y_axis_deflection_angle#)



            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
            Dim SelectionMgr As SldWorks.SelectionMgr = part.SelectionManager

            Dim Draw As SldWorks.DrawingDoc = swapp.ActiveDoc
            Dim Note As SldWorks.Note
            Dim Annotation As SldWorks.Annotation
            Dim myView As SldWorks.View









            Dim arc1 As SldWorks.SketchArc
            Dim arc1Segment As SldWorks.SketchSegment
            Dim LINE01 As SldWorks.SketchSegment
            part.ActivateView("工程图视图1") '局部视图
            arc1 = part.SketchManager.CreateCircle(局部视图圆心X#, 局部视图圆心Y#, 0#, 局部视图圆心X#, 局部视图圆心Y# + 局部视图圆半径, 0#)
            arc1Segment = arc1
            LINE01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.002, 0, 0)
            LINE01.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * Slot_Relative_Y_axis_deflection_angle / 180)




            myView = part.CreateDetailViewAt4(局部视图X#, 局部视图Y#, 0, 0, 1, 1 / 局部视图图纸比例值#, "I", 0, False, False, False, False)
            part.InsertModelAnnotations3(0, 32768, True, False, True, True) '允许有重复标注

            Note = myView.GetFirstNote
            Annotation = Note.GetAnnotation()
            Annotation.SetPosition2(局部视图X#, 局部视图Y# + (局部视图圆半径 + 0.015) * 局部视图图纸比例值, 0)

            'part.Extension.SketchBoxSelect((主视图X# + arc1.IGetCenterPoint2.X * 图纸比例值 - 局部视图半径 * SelectBox_proportion) / 图纸比例值, (主视图Y# + arc1.IGetCenterPoint2.Y * 图纸比例值 - 局部视图半径 * SelectBox_proportion) / 图纸比例值, 0#, (主视图X# + arc1.IGetCenterPoint2.X * 图纸比例值 + 局部视图半径 * SelectBox_proportion) / 图纸比例值, (主视图Y# + arc1.IGetCenterPoint2.Y * 图纸比例值 + 局部视图半径 * SelectBox_proportion) / 图纸比例值, 0#)


            part.Extension.SelectByID2("D1@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("D2@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D3@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D4@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D5@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0， True, 0, Nothing, 0)
            part.Extension.SelectByID2("D6@草图2@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D7@草图2@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D8@草图2@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D9@草图2@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()
        End Function

        '装配图模块
        Public Sub Assembly_initialization()
            OpenDoc7 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            swapp = CreateObject("Sldworks.application")
            swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_assembly.asmdot", 0, 0, 0)
            swapp.Visible = True
            swapp.FrameState = 1

            AssemblyDoc = swapp.ActiveDoc
            AssemblyTitle = AssemblyDoc.GetTitle
            part = swapp.ActiveDoc
            SketchManager = part.SketchManager
            FeatureManager = part.FeatureManager
            SelectionMgr = part.SelectionManager
            part.Extension.InsertScene("\scenes\01 basic scenes\00 soft box.p2s") '绘图空间背景
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swEdgesDefaultBulkSelection, True)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swEdgesHiddenEdgeSelectionInWireframe, True)


            swapp.SetUserPreferenceToggle（SwConst.swUserPreferenceToggle_e.swUseFolderAsDefaultSearchLocation, False） '取消异形孔向导将此文件夹设为默认文件位置，读取自己保存的标准件库
            part.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swViewDisplayHideAllTypes, True) '隐藏所有类型
            初始设置_new（1）
            基准轴featureX = 基准轴_new("X")
            基准轴featureY = 基准轴_new("Y")
            基准轴featureZ = 基准轴_new("Z")

        End Sub
        Public Sub Support_block_assembly()


            Dim mysqlcon As MySqlConnection
            Dim mysqlcom As MySqlCommand
            Dim dr As MySqlDataReader
            mysqlcon = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
            '//打开数据库连接
            mysqlcon.Open()
            '//sql查询
            mysqlcom = New MySqlCommand("select * from _5eq_123_2000", mysqlcon)
            dr = mysqlcom.ExecuteReader()
            dr.Read()
            Do Until dr.GetString("id") = 1
                dr.Read()
            Loop


            Dim Code As String = dr("Code")
            Dim name As String = dr("name")
            Dim company As String = dr("company")
            Dim material As String = dr("material")






            Dim dimension As SldWorks.Dimension
            Dim swbody As SldWorks.Body2





            Dim _8EQ_123_2004 As SldWorks.Component2
            Dim _8EQ_123_2005 As SldWorks.Component2
            Dim 小垫圈 As SldWorks.Component2
            Dim 弹簧垫圈 As SldWorks.Component2
            Dim _8EQ_932_2008 As SldWorks.Component2
            Dim 六角螺母 As SldWorks.Component2


            Dim _8EQ_123_2004name As String
            Dim _8EQ_123_2005name As String
            Dim 小垫圈name As String
            Dim 弹簧垫圈name As String
            Dim _8EQ_932_2008name As String
            Dim 六角螺母name As String

            Dim _8EQ_123_2004edge() As Object
            Dim _8EQ_123_2005edge() As Object
            Dim 小垫圈edge() As Object
            Dim 弹簧垫圈edge() As Object
            Dim _8EQ_932_2008edge() As Object
            Dim 六角螺母edge() As Object

            Dim _8EQ_123_2004face() As Object
            Dim _8EQ_123_2005face() As Object
            Dim 小垫圈face() As Object
            Dim 弹簧垫圈face() As Object
            Dim _8EQ_932_2008face() As Object
            Dim 六角螺母face() As Object




            Dim i As Integer = 1



            For i = 1 To 3
                swapp.OpenDoc6(dr("Part address") + dr("Part" + i.ToString + " Code") + dr("dz2"), 1, 32, "", errors, longwarnings)
                part = swapp.ActivateDoc3(AssemblyTitle, True, 0, errors)
                Component2 = part.AddComponent5(dr("Part address") + dr("Part" + i.ToString + " Code") + dr("dz2"), 0, "", False, "", 0.05 * (i - 1), 0, 0)
                swapp.CloseDoc(dr("Part address") + dr("Part" + i.ToString + " Code") + dr("dz2"))
                Select Case i > 0
                    Case i = 1
                        _8EQ_123_2004 = Component2
                    Case i = 2
                        _8EQ_932_2008 = Component2
                    Case i = 3
                        _8EQ_123_2005 = Component2
                End Select
            Next

            For i = 4 To 6
                swapp.OpenDoc6(dr("Standard Parts address") + dr("Part" + i.ToString + " Code") + dr("dz2"), 1, 32, "", errors, longwarnings)
                part = swapp.ActivateDoc3(AssemblyTitle, True, 0, errors)
                Component2 = part.AddComponent5(dr("Standard Parts address") + dr("Part" + i.ToString + " Code") + dr("dz2"), 0, "", False, "", 0.05 * (i - 1), 0, 0)
                swapp.CloseDoc(dr("Standard Parts address") + dr("Part" + i.ToString + " Code") + dr("dz2"))
                Select Case i > 0
                    Case i = 4
                        六角螺母 = Component2
                    Case i = 5
                        小垫圈 = Component2
                    Case i = 6
                        弹簧垫圈 = Component2
                End Select
            Next



            渲染_new(_8EQ_123_2004, "c:\program files\solidworks corp\solidworks\data\graphics\materials\metal\aluminum\cast aluminum.p2m") '铸铝
            渲染_new(_8EQ_123_2005, "c:\program files\solidworks corp\solidworks\data\graphics\materials\metal\aluminum\cast aluminum.p2m") '铸铝
            渲染_new(_8EQ_932_2008, "c:\program files\solidworks corp\solidworks\data\graphics\materials\metal\steel\polished steel.p2m") '剖光钢

            'MsgBox(666)











            _8EQ_123_2004name = _8EQ_123_2004.Name2()
            part.Extension.SelectByID2(_8EQ_123_2004.IGetBody.Name + "@" + _8EQ_123_2004name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
            swbody = SelectionMgr.GetSelectedObject6(1, -1)
            _8EQ_123_2004edge = swbody.GetEdges()
            _8EQ_123_2004face = swbody.GetFaces()
            facenumber1 = swbody.GetFaceCount()
            edgenumber1 = swbody.GetEdgeCount()
            part.ClearSelection2(True)


            _8EQ_123_2005name = _8EQ_123_2005.Name2()
            part.Extension.SelectByID2(_8EQ_123_2005.IGetBody.Name + "@" + _8EQ_123_2005name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
            swbody = SelectionMgr.GetSelectedObject6(1, -1)

            'Dim DOC As SldWorks.ModelDoc2
            'DOC = _8EQ_123_2005.FirstFeature
            'selection_set_assambly(Object数组1)
            'MsgBox(Object数组1.Count)
            'selection_set_assambly_new(_8EQ_123_2005)
            'MsgBox("零件选择集")



            'Object数组1 = selection_set_assambly(_8EQ_123_2005).aa


            'Object数组2 = selection_set_assambly().bb
            'part.ClearSelection2(True)
            'MsgBox(Object数组1.Count)
            'SelectionMgr.AddSelectionListObject(Object数组1(0), Nothing)

            'Object数组1(0).Select2(False, Nothing)
            'Object数组1(1).Select2(True, Nothing)
            'MsgBox(666)

            'MsgBox("零件选择集")

            _8EQ_123_2005edge = swbody.GetEdges()
            _8EQ_123_2005face = swbody.GetFaces()
            facenumber2 = swbody.GetFaceCount()
            edgenumber2 = swbody.GetEdgeCount()
            part.ClearSelection2(True)


            小垫圈name = 小垫圈.Name2()
            part.Extension.SelectByID2(小垫圈.IGetBody.Name + "@" + 小垫圈name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
            swbody = SelectionMgr.GetSelectedObject6(1, -1)
            小垫圈edge = swbody.GetEdges()
            小垫圈face = swbody.GetFaces()
            facenumber3 = swbody.GetFaceCount()
            edgenumber3 = swbody.GetEdgeCount()
            part.ClearSelection2(True)


            弹簧垫圈name = 弹簧垫圈.Name2()
            part.Extension.SelectByID2(弹簧垫圈.IGetBody.Name + "@" + 弹簧垫圈name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
            swbody = SelectionMgr.GetSelectedObject6(1, -1)
            弹簧垫圈edge = swbody.GetEdges()
            弹簧垫圈face = swbody.GetFaces()
            facenumber4 = swbody.GetFaceCount()
            edgenumber4 = swbody.GetEdgeCount()
            part.ClearSelection2(True)


            _8EQ_932_2008name = _8EQ_932_2008.Name2()
            part.Extension.SelectByID2(_8EQ_932_2008.IGetBody.Name + "@" + _8EQ_932_2008name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
            swbody = SelectionMgr.GetSelectedObject6(1, -1)
            _8EQ_932_2008edge = swbody.GetEdges()
            _8EQ_932_2008face = swbody.GetFaces()
            facenumber5 = swbody.GetFaceCount()
            edgenumber5 = swbody.GetEdgeCount()
            part.ClearSelection2(True)

            part.ClearSelection2(True)
            六角螺母name = 六角螺母.Name2()
            part.Extension.SelectByID2(六角螺母.IGetBody.Name + "@" + 六角螺母name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
            swbody = SelectionMgr.GetSelectedObject6(1, -1)
            六角螺母edge = swbody.GetEdges()
            六角螺母face = swbody.GetFaces()
            facenumber6 = swbody.GetFaceCount()
            edgenumber6 = swbody.GetEdgeCount()


            '遍历（1， 小垫圈face， 小垫圈face.Count）




            part.ClearSelection2(True)
            SelectionMgr.AddSelectionListObject(_8EQ_123_2004face(0), Nothing)
            SelectionMgr.AddSelectionListObject(小垫圈face(1), Nothing)
            配合_new（"重合", 1）
            SelectionMgr.AddSelectionListObject(_8EQ_123_2004face(16), Nothing)
            SelectionMgr.AddSelectionListObject(小垫圈face(3), Nothing)
            配合_new（"同轴", 0）


            SelectionMgr.AddSelectionListObject(弹簧垫圈face(2), Nothing)
            SelectionMgr.AddSelectionListObject(小垫圈face(2), Nothing)
            配合_new（"重合", 1）
            SelectionMgr.AddSelectionListObject(弹簧垫圈face(3), Nothing)
            SelectionMgr.AddSelectionListObject(小垫圈face(3), Nothing)
            配合_new（"同轴", 1）


            SelectionMgr.AddSelectionListObject(弹簧垫圈face(3), Nothing)
            SelectionMgr.AddSelectionListObject(六角螺母face(8), Nothing)
            配合_new（"同轴", 1）
            SelectionMgr.AddSelectionListObject(弹簧垫圈face(1), Nothing)
            SelectionMgr.AddSelectionListObject(六角螺母face(6), Nothing)
            配合_new（"重合", 1）



            SelectionMgr.AddSelectionListObject(_8EQ_932_2008face(4), Nothing)
            SelectionMgr.AddSelectionListObject(六角螺母face(8), Nothing)
            配合_new（"同轴", 1）

            SelectionMgr.AddSelectionListObject(_8EQ_932_2008face(4), Nothing)
            SelectionMgr.AddSelectionListObject(_8EQ_123_2005face(25), Nothing)

            'MsgBox("选择集666")
            ''Object数组1 = selection_set().aa
            'part.ClearSelection2(True)
            'Object数组1(0).Select2(False, Nothing)
            'MsgBox("选择集666")



            配合_new（"同轴", 0）
            SelectionMgr.AddSelectionListObject(_8EQ_932_2008face(13), Nothing)
            SelectionMgr.AddSelectionListObject(_8EQ_123_2005face(18), Nothing)
            配合_new（"重合", 1）
            SelectionMgr.AddSelectionListObject(_8EQ_932_2008face(9), Nothing)
            SelectionMgr.AddSelectionListObject(_8EQ_123_2005face(22), Nothing)
            配合_new（"平行", 1）


            SelectionMgr.AddSelectionListObject(_8EQ_123_2004face(0), Nothing)
            SelectionMgr.AddSelectionListObject(_8EQ_123_2005face(0), Nothing)
            配合_new（"距离", 1， 0.024）


            SelectionMgr.AddSelectionListObject(_8EQ_123_2004face(9), Nothing)
            SelectionMgr.AddSelectionListObject(_8EQ_123_2005face(2), Nothing)
            配合_new（"重合"）
            'MsgBox(999)
            '遍历（1， _8EQ_123_2004face， facenumber1）
            '遍历（1， _8EQ_123_2005face， facenumber2）

            '设置属性













            swapp.SetUserPreferenceIntegerValue(SwConst.swUserPreferenceIntegerValue_e.swEdgesTangentEdgeDisplay, 0) '切边不可见


            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", "撑块装配")
            cusproper.Set2("代号", "5EQ.526.2137")
            cusproper.Set2("材料", " ")


            part.SaveAs3(dr("dz1") + dr("code") + dr("dz4"), 0, 8)


            'MsgBox(5)








            '工程图
            A4P_new("", dr("company"), dr("name"), dr("Code"))
            'Dim myView As Object
            myView = Draw.CreateDrawViewFromModelView3(dr("dz1") + dr("code") + dr("dz4"), "*前视", 0.115, 0.21, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            SelectionMgr = part.SelectionManager
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            设置图纸比例_new(dr("proportion"))

            Object数组1 = 索引字符串_new（dr（"skills_requirement"））
            技术要求_new（0.031, 0.139， Object数组1（0）， Object数组1（1）， Object数组1（2）， Object数组1（3）， Object数组1（4））

            part.InsertModelAnnotations3(3, 32864 + 2, True, True, True, True)

            Object数组1 = myView.GetDimensionIds4()
            part.Extension.SelectByID2(Object数组1(0), "DIMENSION", 0, 0, 0, False, 1, Nothing, 0)
            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
            part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "", "", True, "", "", "", False, 1, "")
            Annotation = DisplayDimension.GetAnnotation
            偏移注释位置_new(Annotation， 0， -0.025)
            插入零件标号_new(myView)


            插入BOM表_new(myView)
            part.SaveAs3(dr("dz1") + dr("code") + dr("dz3"), 0, 2)




            dr.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Sub
        Public Sub rotor_core_assembly(code$)

            mysql_new("rotor_core_assembly", "single_rectangular_slot_rotor_core", code)
            Dim name As String = read("name")
            Dim company As String = read("company")
            Dim material As String = read("material")

            Dim swbody As SldWorks.Body2

            Dim 转子铁芯 As SldWorks.Component2
            Dim 阻尼棒 As SldWorks.Component2
            Dim 阻尼板 As SldWorks.Component2


            Dim 转子铁芯edge() As Object
            Dim 阻尼棒edge() As Object
            Dim 阻尼板edge() As Object

            Dim 转子铁芯face() As Object
            Dim 阻尼棒face() As Object
            Dim 阻尼板face() As Object




            Dim i As Integer = 1


            插入零件(转子铁芯, read("Partaddress2") + read("Part2_Code"))
            插入零件(阻尼板, read("Partaddress3") + read("Part3_Code"), 0.1)
            插入零件(阻尼棒, read("Partaddress1") + read("Part1_Code")， 0.2)

            part.ClearSelection2(True)
            swbody = 阻尼棒.GetBody()
            阻尼棒edge = swbody.GetEdges()
            阻尼棒face = swbody.GetFaces()
            part.ClearSelection2(True)



            Dim 转子铁心特征 As SldWorks.Feature
            Dim 阻尼板特征 As Feature
            转子铁心特征 = 转子铁芯.FeatureByName("切除-拉伸2")
            转子铁芯face = 转子铁心特征.GetFaces()

            阻尼板特征 = 阻尼板.FeatureByName("切除-拉伸2")
            阻尼板face = 阻尼板特征.GetFaces

            配合(阻尼板face(1), 阻尼棒face(0), "同轴", 0)
            配合(转子铁芯face(1), 阻尼板face(1), "同轴", 0)


            转子铁心特征 = 转子铁芯.FeatureByName("凸台-拉伸1")
            阻尼板特征 = 阻尼板.FeatureByName("凸台-拉伸1")
            转子铁芯face = 转子铁心特征.GetFaces()
            阻尼板face = 阻尼板特征.GetFaces
            配合(阻尼板face(0), 阻尼棒face(1), "重合", 0)
            配合(转子铁芯face(0), 阻尼板face(1), "重合", 1)


            基准轴featureZ.Select2(False, 2)
            阻尼板.Select2(True, 1)

            'MsgBox(阻尼板.Name2)
            mysql_new("rotor_lamination", "single_rectangular_slot", read("Part2_Code"))
            Dim thick1, thick2 As Double
            thick1 = read("thickness")

            'MsgBox(666)
            mysql_new("rotor_core_assembly", "single_rectangular_slot_rotor_core", code)
            'MsgBox(666)
            'mysql_new("rotor_lamination", "single_rectangular_slot", read("Part3 Code"))
            mysql_new("Damping_plate", "single_rectangular_slot", read("Part3_Code"))
            thick2 = read("thickness")
            'MsgBox(666)
            特征线性阵列(2, thick1 + thick2, True)
            mysql_new("rotor_core_assembly", "single_rectangular_slot_rotor_core", code)

            'MsgBox(666)

            Dim aaa, bbb As String
            aaa = read("Part2_code")
            bbb = read("dz1") + read("code") + ".SLDASM"


            mysql_new("rotor_lamination", "single_rectangular_slot", aaa)


            Dim aa As Feature
            part.ClearSelection2(True)
            SelectionMgr.AddSelectionListObject(转子铁芯face(2), Nothing)
            SelectionMgr.SetSelectedObjectMark(1, 2, 0) '设定标记
            阻尼棒.Select2(True, 1)
            aa = 特征阵列_angle(Me.read("slot1_number"), -Me.read("slot1_angle"))


            part.ClearSelection2(True)
            SelectionMgr.AddSelectionListObject(转子铁芯face(2), Nothing)
            SelectionMgr.SetSelectedObjectMark(1, 2, 0) '设定标记
            阻尼棒.Select2(True, 1)
            aa.Select2(True, 1)
            特征阵列_等间距(4)







            save(bbb)

            mysql_close()



        End Sub

        Public Sub rotor_core_assembly_定制铁芯()

            mysql_new("定制铁芯", "rotor_core_assembly", "1")

            Dim Code As String = Me.read("Code")
            Dim name As String = Me.read("name")
            Dim company As String = Me.read("company")
            Dim material As String = Me.read("material")

            Dim swbody As SldWorks.Body2

            Dim 转子铁芯 As SldWorks.Component2
            Dim 阻尼棒1 As SldWorks.Component2
            Dim 阻尼棒2 As SldWorks.Component2
            Dim 阻尼板 As SldWorks.Component2

            Dim 转子铁芯face() As Object
            Dim 阻尼棒1face() As Object
            Dim 阻尼棒2face() As Object
            Dim 阻尼板face() As Object

            Dim i As Integer = 1
            插入零件(转子铁芯, Me.read("Partaddress2") + Me.read("Part2 Code"))
            插入零件(阻尼板, Me.read("Partaddress3") + Me.read("Part3 Code"), 0.1)
            插入零件(阻尼棒1, Me.read("Partaddress1") + Me.read("Part1 Code"), 0.2)
            插入零件(阻尼棒2, Me.read("Partaddress1") + Me.read("Part1 Code"), 0.3)

            part.ClearSelection2(True)
            swbody = 阻尼棒1.GetBody()
            阻尼棒1face = swbody.GetFaces()
            part.ClearSelection2(True)

            part.ClearSelection2(True)
            swbody = 阻尼棒2.GetBody()
            阻尼棒2face = swbody.GetFaces()
            part.ClearSelection2(True)

            Dim 阻尼板特征 As SldWorks.Feature
            阻尼板特征 = 阻尼板.FeatureByName("凸台-拉伸1")
            阻尼板face = 阻尼板特征.GetFaces()
            part.ClearSelection2(True)
            Dim 转子铁心特征 As SldWorks.Feature
            转子铁心特征 = 转子铁芯.FeatureByName("凸台-拉伸1")
            转子铁芯face = 转子铁心特征.GetFaces()

            配合(转子铁芯face(0), 阻尼板face(1), "重合", 1)
            配合(转子铁芯face(2), 阻尼板face(2), "同轴", 0)
            配合(阻尼棒1face(1), 阻尼板face(0), "重合", 0)
            face = 阻尼板face(0)

            阻尼板特征 = 阻尼板.FeatureByName("切除-拉伸3")
            阻尼板face = 阻尼板特征.GetFaces()
            配合(阻尼棒1face(0), 阻尼板face(0), "同轴", 0)

            阻尼板特征 = 阻尼板.FeatureByName("切除-拉伸4")
            阻尼板face = 阻尼板特征.GetFaces()
            配合(阻尼棒2face(1), face, "重合", 0)
            配合(阻尼棒2face(0), 阻尼板face(0), "同轴", 0)

            part.ClearSelection2(True)
            基准轴featureZ.Select2(False, 2)
            阻尼棒1.Select2(True, 1)
            特征阵列_等间距(28)

            part.ClearSelection2(True)
            基准轴featureZ.Select2(False, 2)
            阻尼棒2.Select2(True, 1)
            特征阵列_等间距(28)


            基准轴featureZ.Select2(False, 2)
            阻尼板.Select2(True, 1)
            特征线性阵列(2, 181, True)


            save("E:\works\黄紫龙\定制铁芯\" + read("code") + ".sldasm")


            'MsgBox(5)

            'Dim read As Object


            ''工程图
            'A3模板("E:\works\黄紫龙\定制铁芯\" + read("code") + ".sldasm", 0.16, 0.18, 1, read("name"), "", read("Code"), 视图:="右视")
            ''A4P_new("", read("company"), read("name"), read("Code"))
            ''Dim myView As Object
            ''myView = Draw.CreateDrawViewFromModelView3("E:\works\黄紫龙\定制铁芯\" + read("code") + ".sldasm", "*前视", 0.115, 0.21, 0)
            ''part = swapp.ActiveDoc
            ''Draw = swapp.ActiveDoc
            ''SelectionMgr = part.SelectionManager
            ''part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            ''part.Extension.SetUserPreferenceInteger(372, 204, 2)
            ''part.Extension.SetUserPreferenceInteger(516, 2, 0)
            ''part.Extension.SetUserPreferenceInteger(517, 208, 0)
            ''part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            ''设置图纸比例_new(read("proportion"))

            ''Object数组1 = 索引字符串_new（read（"skills_requirement"））
            ''技术要求_new（0.031, 0.139， Object数组1（0）， Object数组1（1）， Object数组1（2）， Object数组1（3）， Object数组1（4））

            ''part.InsertModelAnnotations3(3, 32864 + 2, True, True, True, True)

            ''Object数组1 = myView.GetDimensionIds4()
            ''part.Extension.SelectByID2(Object数组1(0), "DIMENSION", 0, 0, 0, False, 1, Nothing, 0)
            ''DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
            ''part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "", "", True, "", "", "", False, 1, "")
            ''Annotation = DisplayDimension.GetAnnotation
            ''偏移注释位置_new(Annotation， 0， -0.025)
            '插入零件标号_new(myView)


            '插入BOM表_new(myView, 工程视图:="工程视图1")
            'part.SaveAs3("E:\works\黄紫龙\定制铁芯\" + read("code") + ".slddrw", 0, 2)




            read.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()

        End Sub
        Public Sub rotor_250_assembly(code$)
            mysql_new("rotor_assembly", "single_rectangular_slot_rotor", code)
            Dim name As String = read("name")
            Dim company As String = read("company")
            Dim material As String = read("material")

            Dim swbody As SldWorks.Body2
            Dim 转子铁芯 As SldWorks.Component2
            Dim 转轴 As SldWorks.Component2
            Dim 风扇 As SldWorks.Component2


            Dim 转子铁芯edge() As Object
            Dim 转轴edge() As Object
            Dim 风扇edge() As Object

            Dim 转子铁芯face() As Object
            Dim 转轴face() As Object
            Dim 风扇face() As Object

            插入零件(转轴, read("Partaddress1") + read("Part1_Code"))
            插入零件(风扇, read("Partaddress2") + read("Part2_Code"))
            插入子装配体(转子铁芯, read("assemblyaddress1") + read("assembly1_Code"))


            Dim 轴套 As Component2
            Dim 轴套face() As Object
            插入零件(轴套, read("Partaddress3") + read("Part3_Code"))


            Dim 转子铁心_阻尼板 As Component2




            获得子零件(转子铁芯, 转子铁心_阻尼板, "*Damping_plate*")
            If Right(转子铁心_阻尼板.Name2, 1) = "1" Then
                获得子零件(转子铁芯, 转子铁心_阻尼板, "*Damping_plate*", 1)
            End If



            Dim 阻尼板特征 As Feature
            Dim 阻尼板face As Object()
            阻尼板特征 = 转子铁心_阻尼板.FeatureByName("切除-拉伸3")
            阻尼板face = 阻尼板特征.GetFaces

            Dim 转轴特征 As Feature
            转轴特征 = 转轴.FeatureByName("切除-拉伸2")
            转轴face = 转轴特征.GetFaces

            part.ClearSelection2(True)
            配合(阻尼板face(3), 转轴face(1), "同轴", 0)
            阻尼板特征 = 转子铁心_阻尼板.FeatureByName("凸台-拉伸1")
            阻尼板face = 阻尼板特征.GetFaces
            配合(阻尼板face(1), 转轴face(0), "重合", 1)

            转轴特征 = 转轴.FeatureByName("切除-拉伸1")
            转轴face = 转轴特征.GetFaces

            Dim 风扇特征 As Feature
            风扇特征 = 风扇.FeatureByName("旋转3")
            风扇face = 风扇特征.GetFaces

            配合(风扇face(5), 转轴face(2), "重合", 1)
            配合(风扇face(6), 转轴face(0), "同轴", 1)




            转轴特征 = 转轴.FeatureByName("旋转1")
            转轴face = 转轴特征.GetFaces
            Dim 轴套特征 As Feature
            轴套特征 = 轴套.FeatureByName("凸台-拉伸2")
            轴套face = 轴套特征.GetFaces

            配合(轴套face(0), 转轴face(17), "重合", 1)
            配合(轴套face(1), 转轴face(7), "同轴")
            '遍历(1, 轴套face)
            '遍历(1, 转轴face)


            转轴特征 = 转轴.FeatureByName("切除-拉伸8")
            转轴face = 转轴特征.GetFaces
            轴套特征 = 轴套.FeatureByName("切除-拉伸2")
            轴套face = 轴套特征.GetFaces
            配合(轴套face(0), 转轴face(2), "平行")
            '遍历(1, 轴套face)
            '遍历(1, 转轴face)

            'MsgBox(666)
            save(read("dz1") + code + ".SLDASM")

        End Sub

        'Public Sub rotor_280_assembly(code$)


        '    Dim mysqlcon As MySqlConnection
        '    Dim mysqlcom As MySqlCommand
        '    Dim dr As MySqlDataReader
        '    mysqlcon = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_assembly;pooling=false")
        '    '//打开数据库连接
        '    mysqlcon.Open()
        '    '//sql查询
        '    mysqlcom = New MySqlCommand("select * from single_rectangular_slot_rotor", mysqlcon)
        '    dr = mysqlcom.ExecuteReader()
        '    dr.Read()
        '    Do Until dr.GetString("Code") = Code
        '        dr.Read()
        '    Loop

        '    Dim name As String = dr("name")
        '    Dim company As String = dr("company")
        '    'Dim material As String = dr("material")
        '    Dim dimension As SldWorks.Dimension
        '    Dim swbody As SldWorks.Body2
        '    'AxisY = AXIS("Y")
        '    'AxisZ = AXIS("Z")
        '    'AxisX = AXIS("X")
        '    AssemblyDoc = swapp.ActiveDoc

        '    Dim 转子, 转轴, 风扇， 阻尼板, 转子片， 风扇衬套， 轴套, 平衡环, 联轴器片 As SldWorks.Component2
        '    Dim 阻尼板特征， 转子片特征， 风扇衬套特征1， 风扇衬套特征2 As SldWorks.Feature
        '    Dim 转子name, 转轴name, 风扇name， 阻尼板name， 轴套name， 联轴器片name, 平衡环name As String
        '    Dim 转子edge(), 转轴edge(), 风扇edge()， 阻尼板edge() As Object
        '    Dim 转子face(), 转轴face(), 风扇face()， 阻尼板face()， 转子片face()， 风扇衬套face1(), 风扇衬套face2()， 轴套face()， 联轴器片face(), 平衡环face() As Object

        '    swapp.SetUserPreferenceToggle(swUserPreferenceToggle_e.swUseFolderAsDefaultSearchLocation, False)
        '    part.SetUserPreferenceToggle(swUserPreferenceToggle_e.swViewDisplayHideAllTypes, True)

        '    插入零件（转轴, dr("Partaddress1") + dr("Part1_Code"), 0）
        '    插入装配体（转子, dr("assemblyaddress1") + dr("assembly1_Code"), 0.1）
        '    插入装配体（风扇, dr("Partaddress2") + dr("Part2_Code"), 0.2）
        '    '插入零件（平衡环, dr("Partaddress4") + dr("Part4_Code"), 0.3）
        '    插入零件（联轴器片, dr("Partaddress5") + dr("Part5_Code"), 0.5）
        '    插入零件（轴套, dr("Partaddress3") + dr("Part3_Code"), 0.6）

        '    转轴name = 转轴.Name2()
        '    part.ClearSelection2(True)
        '    part.Extension.SelectByID2(转轴.IGetBody.Name + "@" + 转轴name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
        '    swbody = SelectionMgr.GetSelectedObject6(1, -1)
        '    转轴edge = swbody.GetEdges()
        '    转轴face = swbody.GetFaces()
        '    part.ClearSelection2(True)


        '    轴套name = 轴套.Name2()
        '    part.ClearSelection2(True)
        '    part.Extension.SelectByID2(轴套.IGetBody.Name + "@" + 轴套name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
        '    swbody = SelectionMgr.GetSelectedObject6(1, -1)
        '    '转轴edge = swbody.GetEdges()
        '    轴套face = swbody.GetFaces()
        '    part.ClearSelection2(True)

        '    联轴器片name = 联轴器片.Name2()
        '    part.ClearSelection2(True)
        '    part.Extension.SelectByID2(联轴器片.IGetBody.Name + "@" + 联轴器片name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
        '    swbody = SelectionMgr.GetSelectedObject6(1, -1)
        '    '风扇edge = swbody.GetEdges()
        '    联轴器片face = swbody.GetFaces()
        '    part.ClearSelection2(True)


        '    '平衡环name = 平衡环.Name2()
        '    'part.ClearSelection2(True)
        '    'part.Extension.SelectByID2(平衡环.IGetBody.Name + "@" + 平衡环name + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
        '    'swbody = SelectionMgr.GetSelectedObject6(1, -1)
        '    ''转轴edge = swbody.GetEdges()
        '    '平衡环face = swbody.GetFaces()
        '    'part.ClearSelection2(True)

        '    获得子零件(转子， 阻尼板， "*Damping_plate*")
        '    阻尼板特征 = 阻尼板.FeatureByName("凸台-拉伸1")
        '    阻尼板face = 阻尼板特征.GetFaces()
        '    part.ClearSelection2(True)


        '    获得子零件(转子， 转子片， "*rotor_lamination*")
        '    转子片特征 = 转子片.FeatureByName("切除-拉伸3")
        '    转子片face = 转子片特征.GetFaces()
        '    part.ClearSelection2(True)
        '    获得子零件(风扇， 风扇衬套， "*fan_bushing*")
        '    风扇衬套特征1 = 风扇衬套.FeatureByName("切除-拉伸1")
        '    风扇衬套face1 = 风扇衬套特征1.GetFaces()
        '    part.ClearSelection2(True)

        '    获得子零件(风扇， 风扇衬套， "*fan_bushing*")
        '    风扇衬套特征1 = 风扇衬套.FeatureByName("切除-拉伸3")
        '    风扇衬套face2 = 风扇衬套特征1.GetFaces()
        '    part.ClearSelection2(True)

        '    '遍历（1， 阻尼板face， 1000， 0）

        '    Dim tittle As String = part.GetTitle

        '    SelectionMgr.AddSelectionListObject(转子片face（3）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（1）, Nothing)
        '    配合("同轴", 1)
        '    part.ClearSelection2(True)
        '    Debug.Print(1)
        '    'MsgBox(1)
        '    '转轴face 3  9底
        '    SelectionMgr.AddSelectionListObject(阻尼板face（0）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（3）, Nothing)
        '    'MsgBox(1)
        '    配合("重合", 1)
        '    'MsgBox(1)
        '    part.ClearSelection2(True)
        '    Debug.Print(2)
        '    'MsgBox(1)
        '    SelectionMgr.AddSelectionListObject(转子片face（1）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（9）, Nothing)
        '    配合("平行", 1)
        '    part.ClearSelection2(True)
        '    Debug.Print(3)
        '    'MsgBox(1)
        '    SelectionMgr.AddSelectionListObject(风扇衬套face1（2）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（14）, Nothing)
        '    配合("平行", 1)
        '    part.ClearSelection2(True)
        '    Debug.Print(4)
        '    'MsgBox(1)
        '    SelectionMgr.AddSelectionListObject(风扇衬套face1（0）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（17）, Nothing)
        '    配合("同轴", 1)
        '    part.ClearSelection2(True)
        '    Debug.Print(5)
        '    'MsgBox(1)
        '    SelectionMgr.AddSelectionListObject(风扇衬套face2（0）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（35）, Nothing)
        '    配合("重合", 0)
        '    part.ClearSelection2(True)
        '    Debug.Print(6)
        '    'MsgBox(1)
        '    '转轴face 10  14底

        '    '遍历（1， 转轴face， 1000， 0）
        '    SelectionMgr.AddSelectionListObject(轴套face（2）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（17）, Nothing)
        '    配合("同轴", 0)
        '    part.ClearSelection2(True)
        '    Debug.Print(7)
        '    'MsgBox(1)
        '    SelectionMgr.AddSelectionListObject(轴套face（24）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（14）, Nothing)
        '    配合("平行", 1)
        '    part.ClearSelection2(True)
        '    'Debug.Print(8)
        '    'MsgBox(1)
        '    SelectionMgr.AddSelectionListObject(轴套face（3）, Nothing)
        '    SelectionMgr.AddSelectionListObject(转轴face（59）, Nothing)
        '    配合("重合", 1)
        '    part.ClearSelection2(True)
        '    'Debug.Print(9)
        '    'MsgBox(1)
        '    '遍历（1， 转轴face， 1000， 0）



        '    '遍历（1， 轴套face， 1000， 0）


        '    'SelectionMgr.AddSelectionListObject(联轴器片face（0）, Nothing)
        '    'SelectionMgr.AddSelectionListObject(转轴face（17）, Nothing)
        '    '配合("同轴", 0)
        '    配合(联轴器片face（0）, 转轴face（17）, "同轴", 0)
        '    part.ClearSelection2(True)

        '    SelectionMgr.AddSelectionListObject(轴套face（1）, Nothing)
        '    SelectionMgr.AddSelectionListObject(联轴器片face（1）, Nothing)
        '    配合("重合", 1)
        '    part.ClearSelection2(True)

        '    SelectionMgr.AddSelectionListObject(联轴器片face（5）, Nothing)
        '    SelectionMgr.AddSelectionListObject(轴套face（21）, Nothing)
        '    配合("同轴", 0)
        '    part.ClearSelection2(True)

        'End Sub
        Public Sub rotor_355_assembly(code$)
            mysql_new("rotor_assembly", "single_rectangular_slot_rotor", code)
            Dim name As String = read("name")
            Dim company As String = read("company")
            Dim material As String = read("material")

            Dim swbody As SldWorks.Body2
            Dim 转子铁芯 As SldWorks.Component2
            Dim 转轴 As SldWorks.Component2
            Dim 风扇 As SldWorks.Component2

            Dim 转子铁芯edge() As Object
            Dim 转轴edge() As Object
            Dim 风扇edge() As Object

            Dim 转子铁芯face() As Object
            Dim 转轴face() As Object
            Dim 风扇face() As Object




            插入零件(转轴, read("Partaddress1") + read("Part1_Code"))
            插入子装配体(风扇, read("Partaddress2") + read("Part2_Code"))
            插入子装配体(转子铁芯, read("assemblyaddress1") + read("assembly1_Code"))

            Dim 转子铁心_阻尼板 As Component2
            获得子零件_new(转子铁芯, 转子铁心_阻尼板, "*Damping_plate*", 2)


            Dim 阻尼板特征 As Feature
            Dim 阻尼板face As Object()
            阻尼板特征 = 转子铁心_阻尼板.FeatureByName("切除-拉伸3")
            阻尼板face = 阻尼板特征.GetFaces

            Dim 转轴特征 As Feature
            转轴特征 = 转轴.FeatureByName("切除-拉伸3")
            转轴face = 转轴特征.GetFaces

            part.ClearSelection2(True)
            配合(阻尼板face(3), 转轴face(0), "同轴", 0)

            阻尼板特征 = 转子铁心_阻尼板.FeatureByName("凸台-拉伸1")
            阻尼板face = 阻尼板特征.GetFaces
            配合(阻尼板face(1), 转轴face(2), "重合", 1)

            Dim 风扇_轴套 As Component2
            获得子零件(风扇, 风扇_轴套, "*fan_bushing*")
            Dim 风扇_轴套特征 As Feature
            Dim 风扇_轴套face As Object()
            风扇_轴套特征 = 风扇_轴套.FeatureByName("切除-拉伸1")
            风扇_轴套face = 风扇_轴套特征.GetFaces
            转轴特征 = 转轴.FeatureByName("切除-拉伸2")
            转轴face = 转轴特征.GetFaces
            '遍历(1, 风扇_轴套face)
            '遍历(1, 转轴face)
            配合(转轴face(0), 风扇_轴套face(0), "同轴", 0)
            风扇_轴套特征 = 风扇_轴套.FeatureByName("切除-拉伸2")
            风扇_轴套face = 风扇_轴套特征.GetFaces
            '遍历(1, 风扇_轴套face)
            配合(风扇_轴套face(0), 转轴face(2), "重合", 1)




            Dim 轴套 As Component2
            插入零件(轴套, read("Partaddress3") + read("Part3_Code"))
            Dim 轴套特征 As Feature
            Dim 轴套face As Object()
            轴套特征 = 轴套.FeatureByName("凸台-拉伸2")
            轴套face = 轴套特征.GetFaces


            转轴特征 = 转轴.FeatureByName("切除-拉伸1")
            转轴face = 转轴特征.GetFaces

            '遍历(1, 转轴face)
            '遍历(1, 轴套face)
            配合(轴套face(1), 转轴face(0), "同轴", 1)
            配合(轴套face(0), 转轴face(1), "重合", 1)





            Dim 联轴器片 As Component2
            插入零件(联轴器片, read("Partaddress5") + read("Part5_Code"))
            Dim 联轴器片face As Object()
            联轴器片face = 联轴器片.IGetBody.GetFaces


            轴套特征 = 轴套.FeatureByName("凸台-拉伸1")
            轴套face = 轴套特征.GetFaces

            配合(联轴器片face(0), 轴套face(0), "重合", 1)
            配合(联轴器片face(2), 轴套face(2), "同轴")



            轴套特征 = 轴套.FeatureByName("切除-拉伸1")
            轴套face = 轴套特征.GetFaces
            '遍历(1, 轴套face)
            配合(联轴器片face(12), 轴套face(1), "同轴", 1)



            'MsgBox(666)
            save(read("dz1") + code + ".SLDASM")

        End Sub


        Public Sub main_frame_355_assembly(code1$, code2$, code3$)
            mysql_new("rotor_assembly", "single_rectangular_slot_rotor", code1)
            Dim name As String = read("name")
            Dim company As String = read("company")
            Dim material As String = read("material")

            Dim swbody As SldWorks.Body2
            Dim 转子铁芯 As SldWorks.Component2
            Dim 转轴 As SldWorks.Component2
            Dim 风扇 As SldWorks.Component2

            Dim 转子铁芯edge() As Object
            Dim 转轴edge() As Object
            Dim 风扇edge() As Object

            Dim 转子铁芯face() As Object
            Dim 转轴face() As Object
            Dim 风扇face() As Object




            插入零件(转轴, read("Partaddress1") + read("Part1_Code"))
            插入子装配体(风扇, read("Partaddress2") + read("Part2_Code"))
            插入子装配体(转子铁芯, read("assemblyaddress1") + read("assembly1_Code"))

            Dim 转子铁心_阻尼板 As Component2
            获得子零件_new(转子铁芯, 转子铁心_阻尼板, "*Damping_plate*", 2)


            Dim 阻尼板特征 As Feature
            Dim 阻尼板face As Object()
            阻尼板特征 = 转子铁心_阻尼板.FeatureByName("切除-拉伸3")
            阻尼板face = 阻尼板特征.GetFaces

            Dim 转轴特征 As Feature
            转轴特征 = 转轴.FeatureByName("切除-拉伸3")
            转轴face = 转轴特征.GetFaces

            part.ClearSelection2(True)
            配合(阻尼板face(3), 转轴face(0), "同轴", 0)

            阻尼板特征 = 转子铁心_阻尼板.FeatureByName("凸台-拉伸1")
            阻尼板face = 阻尼板特征.GetFaces
            配合(阻尼板face(1), 转轴face(2), "重合", 1)

            Dim 风扇_轴套 As Component2
            获得子零件(风扇, 风扇_轴套, "*fan_bushing*")
            Dim 风扇_轴套特征 As Feature
            Dim 风扇_轴套face As Object()
            风扇_轴套特征 = 风扇_轴套.FeatureByName("切除-拉伸1")
            风扇_轴套face = 风扇_轴套特征.GetFaces
            转轴特征 = 转轴.FeatureByName("切除-拉伸2")
            转轴face = 转轴特征.GetFaces
            '遍历(1, 风扇_轴套face)
            '遍历(1, 转轴face)
            配合(转轴face(0), 风扇_轴套face(0), "同轴", 0)
            风扇_轴套特征 = 风扇_轴套.FeatureByName("切除-拉伸2")
            风扇_轴套face = 风扇_轴套特征.GetFaces
            '遍历(1, 风扇_轴套face)
            配合(风扇_轴套face(0), 转轴face(2), "重合", 1)




            Dim 轴套 As Component2
            插入零件(轴套, read("Partaddress3") + read("Part3_Code"))
            Dim 轴套特征 As Feature
            Dim 轴套face As Object()
            轴套特征 = 轴套.FeatureByName("凸台-拉伸2")
            轴套face = 轴套特征.GetFaces


            转轴特征 = 转轴.FeatureByName("切除-拉伸1")
            转轴face = 转轴特征.GetFaces

            '遍历(1, 转轴face)
            '遍历(1, 轴套face)
            配合(轴套face(1), 转轴face(0), "同轴", 1)
            配合(轴套face(0), 转轴face(1), "重合", 1)





            Dim 联轴器片 As Component2
            插入零件(联轴器片, read("Partaddress5") + read("Part5_Code"))
            Dim 联轴器片face As Object()
            联轴器片face = 联轴器片.IGetBody.GetFaces


            轴套特征 = 轴套.FeatureByName("凸台-拉伸1")
            轴套face = 轴套特征.GetFaces

            配合(联轴器片face(0), 轴套face(0), "重合", 1)
            配合(联轴器片face(2), 轴套face(2), "同轴")



            轴套特征 = 轴套.FeatureByName("切除-拉伸1")
            轴套face = 轴套特征.GetFaces
            '遍历(1, 轴套face)
            配合(联轴器片face(12), 轴套face(1), "同轴", 1)



            'MsgBox(666)
            save(read("dz1") + code1 + ".SLDASM")

        End Sub



        Public Sub Rotor_core()


            Dim mysqlcon As MySqlConnection
            Dim mysqlcom As MySqlCommand
            Dim dr As MySqlDataReader
            mysqlcon = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
            '//打开数据库连接
            mysqlcon.Open()
            '//sql查询
            mysqlcom = New MySqlCommand("select * from _5eq_526_2137", mysqlcon)
            dr = mysqlcom.ExecuteReader()
            dr.Read()
            Do Until dr.GetString("id") = 1
                dr.Read()
            Loop



            Dim Code As String = dr("Code")
            Dim name As String = dr("name")
            Dim company As String = dr("company")
            Dim material As String = dr("material")

            Dim _1 As SldWorks.Component2
            Dim _2 As SldWorks.Component2
            Dim _3 As SldWorks.Component2
            Dim _4 As SldWorks.Component2


            For i = 1 To 4
                swapp.OpenDoc6(dr("Part address") + dr("Part" + i.ToString + " Code") + dr("dz2"), 1, 32, "", errors, longwarnings)
                part = swapp.ActivateDoc3(AssemblyTitle, True, 0, errors)
                Component2 = part.AddComponent5(dr("Part address") + dr("Part" + i.ToString + " Code") + dr("dz2"), 0, "", False, "", 0, 0, 0 + (i - 1) * 0.4)
                swapp.CloseDoc(dr("Part address") + dr("Part" + i.ToString + " Code") + dr("dz2"))
                Select Case i > 0
                    Case i = 1
                        _1 = Component2
                    Case i = 2
                        _2 = Component2
                    Case i = 3
                        _3 = Component2
                    Case i = 4
                        _4 = Component2
                End Select
            Next


            For i = 1 To 4
                Select Case i > 0
                    Case i = 1
                        Component2 = _1
                    Case i = 2
                        Component2 = _2
                    Case i = 3
                        Component2 = _3
                    Case i = 4
                        Component2 = _4
                End Select
                part.Extension.SelectByID2(Component2.IGetBody.Name + "@" + Component2.Name2() + "@" + AssemblyTitle, "SOLIDBODY", 0, 0, 0, False, 1, Nothing, 0)
                swbody = SelectionMgr.GetSelectedObject6(1, -1)
                Select Case i > 0
                    Case i = 1
                        swbody1 = swbody
                    Case i = 2
                        swbody2 = swbody
                    Case i = 3
                        swbody3 = swbody
                    Case i = 4
                        swbody4 = swbody
                End Select
                part.ClearSelection2(True)
            Next




            part.ClearSelection2(True) '隐藏所有草图
            For i = 1 To 4
                Select Case i > 0
                    Case i = 1
                        Component2 = _1
                    Case i = 2
                        Component2 = _2
                    Case i = 3
                        Component2 = _3
                    Case i = 4
                        Component2 = _4
                End Select
                For j = 1 To 30
                    part.Extension.SelectByID2("草图" + j.ToString + "@" + Component2.Name2() + "@" + AssemblyTitle, "SKETCH", 0, 0, 0, True, 0, Nothing, 0)
                Next
            Next
            'MsgBox(999)
            part.BlankSketch()


            'MsgBox(666)
            '

            渲染_new（_1, "C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\data\graphics\materials\Metal\Steel\polished steel.p2m"） '剖光钢
            渲染_new（_2, "C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\data\graphics\materials\Metal\Copper\matte copper.p2m"） '无光红铜
            渲染_new（_3, "C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\data\graphics\materials\Metal\Copper\matte copper.p2m"） '无光红铜
            渲染_new（_4, "C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\data\graphics\materials\Metal\Steel\polished steel.p2m"） '剖光钢


            part.UnblankSketch()


            face1 = swbody1.GetFaces
            face2 = swbody2.GetFaces
            face3 = swbody3.GetFaces
            face4 = swbody4.GetFaces


            part.ClearSelection2(True)
            SelectionMgr.AddSelectionListObject(face1(0), Nothing)
            SelectionMgr.AddSelectionListObject(face2(1), Nothing)
            配合_new（"重合", 1）


            'MsgBox(999)
            遍历（1， swbody1.GetFaces， swbody1.GetFaceCount）








        End Sub


        '完整零件模块
        Public Sub support_block_screw() '螺杆支撑块
            Dim mysqlcon As MySqlConnection
            Dim mysqlcom As MySqlCommand
            Dim dr As MySqlDataReader
            mysqlcon = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
            '//打开数据库连接
            mysqlcon.Open()
            '//sql查询
            mysqlcom = New MySqlCommand("select * from support_block_screw", mysqlcon)
            dr = mysqlcom.ExecuteReader()
            dr.Read()
            Do Until dr.GetString("id") = 1
                dr.Read()
            Loop
            Dim Code As String = dr.GetString("Code")
            Dim name As String = dr.GetString("name")
            Dim company As String = dr.GetString("company")
            Dim material As String = dr.GetString("material")
            'Dim proportion_molecular As Double = dr.GetString("proportion_molecular")
            'Dim Diameter1 As Double = dr.GetString("Diameter1") / 1000
            'Dim Horizontal_distance1 As Double = dr.GetString("Horizontal_distance1") / 1000
            'Dim Hd1_TolType As String = dr.GetString("Hd1_TolType")
            'Dim Hd1_TolMax As Double = dr.GetString("Hd1_TolMax") / 1000
            'Dim Hd1_TolMin As Double = dr.GetString("Hd1_TolMin") / 1000
            'Dim Chamfer_long As Double = dr.GetString("Chamfer_long") / 1000
            'Dim Chamfer_angle As String = dr.GetString("Chamfer_angle")
            'Dim Thread_model As String = dr.GetString("Thread_model")



            Dim swapp As SldWorks.SldWorks
            Dim part As SldWorks.ModelDoc2
            Dim sketcher As SldWorks.SketchManager
            Dim Featmgr As SldWorks.FeatureManager
            Dim feature As SldWorks.Feature
            Dim swbody As SldWorks.Body2
            Dim swedge() As Object
            Dim swface() As Object
            Dim selecmag As SldWorks.SelectionMgr
            Dim pi As Double = 3.1415926535897931

            swapp = CreateObject("Sldworks.application")
            swapp.Visible = True
            swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            'swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_part.prtdot", 0, 0, 0)
            part = swapp.ActiveDoc
            sketcher = part.SketchManager
            Featmgr = part.FeatureManager
            selecmag = part.SelectionManager


            设置属性_new（dr("name")， dr("Code")， dr("material")）
            MsgBox(0)



            part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            sketcher.InsertSketch(True)
            sketcher.CreateCircleByRadius(0, 0, 0, dr("stage1_D") / 2000)
            feature = Featmgr.FeatureExtrusion3(True, False, False, 0, 0, dr("stage1tostage2_L") / 1000 - dr("stage2_L") / 1000, 0, False, False, 0, 0,
                                                0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸
            swface = feature.GetFaces
            selecmag.AddSelectionListObject(swface(0), Nothing)
            part.FeatureManager.InsertFeatureChamfer(6, 1, 0.001, pi / 4, 0, 0, 0, 0)

            part.Extension.SelectByID2("", "FACE", dr("stage1tostage2_L") / 1000 - dr("stage2_L") / 1000, 0, 0, False, 0, Nothing, 0)
            sketcher.InsertSketch(True)
            sketcher.CreateCircleByRadius(0, 0, 0, dr("stage2_D") / 2000)
            Featmgr.FeatureExtrusion3(True, False, False, 0, 0, dr("stage2_L") / 1000, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸2






            part.Extension.SelectByID2("", "FACE", dr("stage1tostage2_L") / 1000, 0, 0, False, 0, Nothing, 0)
            'part.ShowNamedView2("*右视", 4)
            'part.ViewZoomtofit2()
            sketcher.InsertSketch(True)
            part.SketchManager.CreateCenterRectangle(0, 0, 0, dr("stage3_Side_length") / 2000, dr("stage3_Side_length") / 2000, 0)
            '初始设置(0)
            P1 = part.SketchManager.CreatePoint(dr("stage3_Side_length") / 2000, dr("stage3_Side_length") / 2000, 0)
            P1XP2_P1P2_new(P1, 0.01， 右视:=1)
            'MsgBox(33)
            P1YP2_P1P2_new(P1, 0.01， 右视:=1)
            'MsgBox(44)
            P1 = part.SketchManager.CreatePoint(Cos(45 * pi / 180) * dr("stage3_diagonally_long") / 2000, Sin(45 * pi / 180) * dr("stage3_diagonally_long") / 2000, 0)
            P1P2D_new(P1, P10P2_P2_new(P1), 相对P1P2垂直向偏移:=0.01， 右视:=1)

            P1 = part.SketchManager.CreatePoint(Cos(135 * pi / 180) * dr("stage3_diagonally_long") / 2000, Sin(135 * pi / 180) * dr("stage3_diagonally_long") / 2000, 0)
            P1P2D_new(P1, P10P2_P2_new(P1), 相对P1P2垂直向偏移:=0.01， 右视:=1)
            'MsgBox(55)
            feature = Featmgr.FeatureExtrusion3(True, False, False, 0, 0, dr("stage3_L") / 1000, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸2
            swface = feature.GetFaces
            part.ClearSelection2(True)


            '选中两个面用弦长倒角
            selecmag.AddSelectionListObject(swface(2), Nothing)
            selecmag.SetSelectedObjectMark(1, 2, 0) '设定标记
            selecmag.AddSelectionListObject(swface(3), Nothing)
            selecmag.SetSelectedObjectMark(2, 4, 0) '设定标记
            part.FeatureManager.FeatureFillet3(707, (dr("stage3_Side_length") / 1000) / Math.Cos(pi / 4) - dr("stage3_diagonally_long") / 1000, 0.01, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0)
            part.ClearSelection2(True)
            selecmag.AddSelectionListObject(swface(3), Nothing)
            selecmag.SetSelectedObjectMark(1, 2, 0) '设定标记
            selecmag.AddSelectionListObject(swface(4), Nothing)
            selecmag.SetSelectedObjectMark(2, 4, 0) '设定标记
            part.FeatureManager.FeatureFillet3(707, (dr("stage3_Side_length") / 1000) / Math.Cos(pi / 4) - dr("stage3_diagonally_long") / 1000, 0.01, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0)
            part.ClearSelection2(True)
            selecmag.AddSelectionListObject(swface(4), Nothing)
            selecmag.SetSelectedObjectMark(1, 2, 0) '设定标记
            selecmag.AddSelectionListObject(swface(5), Nothing)
            selecmag.SetSelectedObjectMark(2, 4, 0) '设定标记
            part.FeatureManager.FeatureFillet3(707, (dr("stage3_Side_length") / 1000) / Math.Cos(pi / 4) - dr("stage3_diagonally_long") / 1000, 0.01, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0)
            part.ClearSelection2(True)
            selecmag.AddSelectionListObject(swface(5), Nothing)
            selecmag.SetSelectedObjectMark(1, 2, 0) '设定标记
            selecmag.AddSelectionListObject(swface(2), Nothing)
            selecmag.SetSelectedObjectMark(2, 4, 0) '设定标记
            part.FeatureManager.FeatureFillet3(707, (dr("stage3_Side_length") / 1000) / Math.Cos(pi / 4) - dr("stage3_diagonally_long") / 1000, 0.01, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0)
            part.ClearSelection2(True)
            'MsgBox(55)


            part.Extension.SelectByID2("", "FACE", dr("stage1tostage2_L") / 1000 + dr("stage3_L") / 1000, 0, 0, False, 0, Nothing, 0)
            sketcher.InsertSketch(True)
            sketcher.CreateCircleByRadius(0, 0, 0, dr("stage4_D") / 2000)
            Featmgr.FeatureExtrusion3(True, False, False, 0, 0, dr("stage1tostage4_L") / 1000 - dr("stage1tostage2_L") / 1000 - dr("stage3_L") / 1000, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸2





            '插入注释
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            sketcher.InsertSketch(True)
            P1 = sketcher.CreatePoint(0, dr("stage1_D") / 2000, 0)
            P2 = sketcher.CreatePoint(dr("stage1tostage2_L") / 1000, 0, 0)
            P3 = sketcher.CreatePoint(dr("stage1tostage2_L") / 1000 - dr("stage2_L") / 1000, dr("stage2_D") / 2000, 0)
            P4 = sketcher.CreatePoint(dr("stage1tostage2_L") / 1000 + dr("stage3_L") / 1000, 0, 0)
            P5 = sketcher.CreatePoint(dr("stage1tostage4_L") / 1000, dr("stage4_D") / 2000, 0)

            P1P2HD_new(P1, P2, 相对参考点Y向偏移:=0.015)
            P1P2HD_new(P2, P3, P1, 相对参考点Y向偏移:=0.01)
            P1P2HD_new(P2, P4, P1, 相对参考点Y向偏移:=0.015)
            P1P2HD_new(P4, P5, P1, 相对参考点Y向偏移:=0.02)

            DisplayDimension = P1XP2_P1P2_new(P1, -0.01)
            编辑尺寸属性_new（0， "", "", 前缀:="<MOD-DIAM>"）
            DisplayDimension = P1XP2_P1P2_new(P3, -0.01)
            编辑尺寸属性_new（0， "", "", 前缀:="<MOD-DIAM>")
            DisplayDimension = P1XP2_P1P2_new(P5, 0.01)
            编辑尺寸属性_new（0， "", "", 前缀:="<MOD-DIAM>")
            sketcher.InsertSketch(True)
            MsgBox(1)






            part.EditRebuild3()
            MsgBox(2)
            part.SaveAs3(dr("dz1") + dr("dz2"), 0, 2)
            MsgBox(3)


            Dim Draw As SldWorks.DrawingDoc
            Dim View As SldWorks.View
            Dim Notes As Object
            Dim Count As Long
            Dim Annpos() As Double
            Dim Annotation As SldWorks.Annotation
            Draw = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4p.drwdot", 1, 0, 0)
            Dim myView As Object
            myView = Draw.CreateDrawViewFromModelView3(dr("dz1") + dr("dz2"), "*前视", 0.08, 0.19, 0)
            MsgBox(4)
            Draw.CreateUnfoldedViewAt3(0.17, 0.19, 0, False)
            MsgBox(5)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            Dim myNote As Object
            Dim myAnnotation As SldWorks.Annotation
            myNote = part.InsertNote("公司名称")
            MsgBox(6)
            If Not myNote Is Nothing Then
                myNote.LockPosition = False
                myNote.Angle = 0
                myNote.SetBalloon(0, 0)
                myAnnotation = myNote.GetAnnotation()
                If Not myAnnotation Is Nothing Then
                    myAnnotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                    myAnnotation.SetPosition(0.164493037612998, 0.0537752937136617, 0)
                    myAnnotation.SetTextFormat(0, True, 0)
                End If
            End If
            MsgBox(6)
            part.ClearSelection2(True)
            part.WindowRedraw()
            View = Draw.GetFirstView 'A4P
            MsgBox(7)
            Do Until View Is Nothing
                Notes = View.GetNotes()
                Count = View.GetNoteCount()
                If Count > 0 Then
                    For Each N1 In Notes
                        Annotation = N1.GetAnnotation()
                        Annpos = Annotation.GetPosition()
                        If Annpos(0) > 104 / 1000 And Annpos(0) < 153 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                            N1.SetText(material)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                            N1.SetText(company)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                            N1.SetText(name)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 12 / 1000 And Annpos(1) < 24 / 1000 Then
                            N1.SetText(Code)
                        End If
                        If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                            N1.SetText(Code)
                        End If
                    Next
                End If
                MsgBox(8)
                View = View.GetNextView() '获得下一个视图引用
                MsgBox(9)
            Loop
            Draw.EditRebuild3()
            MsgBox(10)

            Dim Sheet1 As SldWorks.Sheet '图纸对象

            Dim SheetPr() As Double
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            SheetPr = Sheet1.GetProperties2()
            SheetPr(2) = 3
            SheetPr(3) = 2
            SheetPr(4) = 1
            Sheet1.SetProperties2(SheetPr(0), SheetPr(1), SheetPr(2), SheetPr(3), SheetPr(4), SheetPr(5), SheetPr(6), SheetPr(7))
            Draw.EditRebuild()


            part = swapp.ActiveDoc
            part.FontPoints(18)
            myNote = part.InsertNote("技术要求" + Chr(13) + Chr(10) +
                "1.倒棱去毛；" + Chr(13) + Chr(10) +
                "2.镀锌纯化；" + Chr(13) + Chr(10) +
                "3.未注公差尺寸的极限偏差按GB/T1804-m级精度。"）
            Annotation = myNote.GetAnnotation()
            Annotation.SetPosition(0.081, 0.118, 0)


            part.Extension.SelectByID2(myView.GetName2, "DRAWINGVIEW", 0.103742299651568, 0.238044982578397, 0, False, 0, Nothing, 0)

            part.InsertModelAnnotations3(0, 32768, True, False, True, True)
            part.EditUndo2(1)
            part.InsertModelAnnotations3(0, 32864 + 2, True, False, True, True) '在当前选中视图插入注释，允许有重复标注



            'part.Extension.SelectByID2("D1@凸台-拉伸1@8EQ.932.2008-1@工程图视图1", "DIMENSION", 0.0859122860719776, 0.161846413412065, 0, False, 0, Nothing, 0)
            'part.Extension.SelectByID2("D1@凸台-拉伸2@8EQ.932.2008-1@工程图视图1", "DIMENSION", 0.10480747326831, 0.164342004173844, 0, True, 0, Nothing, 0)
            'part.Extension.SelectByID2("D1@凸台-拉伸3@8EQ.932.2008-1@工程图视图1", "DIMENSION", 0.110689937206791, 0.16416374769086, 0, True, 0, Nothing, 0)
            'part.Extension.SelectByID2("D1@凸台-拉伸4@8EQ.932.2008-1@工程图视图1", "DIMENSION", 0.121028813219879, 0.16416374769086, 0, True, 0, Nothing, 0)
            'part.Extension.SelectByID2("D2@倒角1@8EQ.932.2008-1@工程图视图1", "DIMENSION", 0.0144314363952848, 0.198210735940856, 0, True, 0, Nothing, 0)
            'MsgBox(555)
            part.ClearSelection2(True)
            'part.Extension.SelectByID2(myView.GetName2, "DRAWINGVIEW", 0.103742299651568, 0.238044982578397, 0, False, 0, Nothing, 0)
            For i = 1 To 4
                part.Extension.SelectByID2("D1@凸台-拉伸" + i.ToString + "@*@工程图视图1", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
                part.EditDelete()
            Next

            For i = 1 To 1
                part.Extension.SelectByID2("D2@倒角" + i.ToString + "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
                part.EditDelete()
            Next

            For i = 1 To 5
                part.Extension.SelectByID2("D1@倒角" + i.ToString + "@*@工程图视图2", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
                part.EditDelete()
            Next


            'Dim aaa As New Basic_module.Bm_huangzilong.Drawings
            'aaa.Exciter_rotor_pressing_ring_开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code")， aaa.index_String(r("skills_requirement"), 1), aaa.index_String(r("skills_requirement"), 2), aaa.index_String(r("skills_requirement"), 3), aaa.index_String(r("skills_requirement"), 4), aaa.index_String(r("skills_requirement"), 5), aaa.index_String(r("skills_requirement"), 6))

            over(dr("dz1") + dr("dz3"))
            dr.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Sub
        Public Sub Support_block_2004()



            初始设置_new（1）
            Dim Surface_SymType2 As Integer
            Dim Surface_OtherVals As String



            Dim mysqlcon As MySqlConnection
            Dim mysqlcom As MySqlCommand
            Dim dr As MySqlDataReader
            mysqlcon = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
            '//打开数据库连接
            mysqlcon.Open()
            '//sql查询
            mysqlcom = New MySqlCommand("select * from support_block_2004", mysqlcon)
            dr = mysqlcom.ExecuteReader()
            dr.Read()
            Do Until dr.GetString("id") = 1
                dr.Read()
            Loop


            Dim sketcher As SldWorks.SketchManager
            Dim Featmgr As SldWorks.FeatureManager
            Dim selecmag As SldWorks.SelectionMgr

            swapp = CreateObject("Sldworks.application")
            swapp.Visible = True
            swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            part = swapp.ActiveDoc
            sketcher = part.SketchManager
            Featmgr = part.FeatureManager
            selecmag = part.SelectionManager
            Dim user As Boolean
            user = swapp.GetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
            Dim myDimension As SldWorks.Dimension
            Dim line1 As SldWorks.SketchSegment
            Dim line2 As SldWorks.SketchSegment
            Dim line3 As SldWorks.SketchSegment
            Dim line4 As SldWorks.SketchSegment
            Dim line5 As SldWorks.SketchSegment
            Dim line6 As SldWorks.SketchSegment
            Dim arc1 As SldWorks.SketchSegment


            初始设置_new(1)
            Dim 底长#， 底厚#， 底倒角长#， 底倒角度数, A视角相对底面角度#， A视角高度#, 顶斜坡长#, 顶弧半径#, 顶总长#, 宽度#, 底圆角#，
                    圆心到顶边距离#， 直径#, 孔深#, 凸台顶半径#， 凸台底半径#
            'Bottom Length#, Bottom Thick#, Bottom Chamfer Length#, Bottom Chamfer Angle Number,A viewing angle relative to the bottom angle， A View Height#, Top Slope Length#, Top Arc Radius#, Top Total Length#, Width#,
            'Bottom Round Angle#, Distance from Center To Top Edge #, diameter#, hole depth#, boss top radius#, boss bottom radius#



            底长# = dr("Bottom Length")
            底厚 = dr("Bottom Thick")
            底倒角长 = dr("Bottom Chamfer Length")
            底倒角度数 = dr("Bottom Chamfer Angle Number")
            A视角相对底面角度 = dr("A viewing angle relative to the bottom angle")
            A视角高度# = dr("A View Height")
            顶斜坡长# = dr("Top Slope Length")
            顶弧半径# = dr("Top Arc Radius")
            顶总长# = dr("Top Total Length")
            宽度# = dr("Width")
            底圆角 = dr("Bottom Round Angle")
            圆心到顶边距离 = dr("Distance from Center To Top Edge")
            直径# = dr("diameter")
            孔深# = dr("hole depth")
            凸台顶半径# = dr("boss top radius")
            凸台底半径# = dr("boss bottom radius")

            底长 = 底长# / 1000
            底厚# = 底厚# / 1000
            底倒角长# = 底倒角长# / 1000
            A视角高度# = A视角高度# / 1000
            顶斜坡长# = 顶斜坡长# / 1000
            顶弧半径# = 顶弧半径# / 1000
            顶总长# = 顶总长# / 1000
            宽度# = 宽度# / 1000
            底圆角 = 底圆角 / 1000
            圆心到顶边距离 = 圆心到顶边距离 / 1000
            直径# = 直径# / 1000
            孔深 = 孔深 / 1000
            凸台顶半径# = 凸台顶半径# / 1000
            凸台底半径 = 凸台底半径 / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            sketcher.InsertSketch(True)
            line1 = sketcher.CreateLine(0, 底长#, 0, 0, 0, 0)
            part.SketchAddConstraints("sgFIXED") '固定

            L1 = line1

            固定点_new（L1.GetStartPoint2）
            固定点_new（L1.GetEndPoint2）
            line2 = sketcher.CreateLine(0, 0, 0, 底厚#, 0, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            固定点_new（line2.getstartpoint2）
            固定点_new（line2.getendpoint2）
            line3 = sketcher.CreateLine(底厚#, 0, 0, 底厚#, 0.01, 0)
            草图方法_new（"垂直"）
            line4 = sketcher.CreateLine(底厚#, 0.01, 0, 底厚# + 0.01, 0.01 + 0.01, 0)
            line5 = sketcher.CreateLine(底厚# + 0.01, 0.01 + 0.01, 0, 底厚#, 0.01 + 0.01 + 0.01, 0)

            '添加约束
            line4.Select4(False, Nothing)
            line1.Select4(True, Nothing)
            DisplayDimension = L1L2D_new(line1, line4, 0.01)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = A视角相对底面角度 * PI / 180
            part.SketchAddConstraints("sgFIXED") '固定


            line4.Select4(False, Nothing)
            line5.Select4(True, Nothing)
            草图方法_new（"相互垂直"）


            DisplayDimension = P1L1D_new(line1.GETENDPOINT2, line5, 0.01, 1)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = A视角高度#


            DisplayDimension = L1D_new(line5, 0.01, 1)
            位置两点中心_new（line5.GetEndPoint2, line5.GetStartPoint2, 1, 0.01）
            'MsgBox(555)



            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 顶斜坡长#


            arc1 = sketcher.CreateTangentArc(line5.getendpoint2.x, line5.getendpoint2.y, 0, 0, 底长#, 0, 1) '1前：线段前端延申相切，2左：线段左端延申相互垂直


            DisplayDimension = Arcdimension_new(arc1， 顶弧半径# + 0.01, Diametric:=False)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 顶弧半径#

            DisplayDimension = P1L1D_new(arc1.GETENDPOINT2, line4, 0.02)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 顶总长#

            P1 = line2.getendpoint2
            P1.Select4(False, Nothing)
            part.SketchManager.CreateChamfer(0, 底倒角长, 底倒角度数 * PI / 180)





            line3.Select4(False, Nothing)
            part.SketchConstraintsDel(1, "sgATINTERSECT")
            旋转草图默认_new(A视角相对底面角度)


            P1 = line3.getendpoint2
            P1.Select4(False, Nothing)
            part.SketchManager.CreateFillet(底圆角, 1)



            Dim line3centerY As Double '用于后面过程的参数
            line3centerY = (line3.getendpoint2.Y + line3.getstartpoint2.Y) / 2


            Dim line3endY As Double '用于后面过程的参数
            line3endY = line4.getstartpoint2.Y


            Dim L5endx As Double
            L5endx = line5.getendpoint2.x
            Dim L5startx As Double
            L5startx = line5.getstartpoint2.x
            Dim L5endy As Double
            L5endy = line5.getstartpoint2.y


            DisplayDimension = L1D_new（line1, 0.01, 1）
            位置两点中心_new（line1.GetEndPoint2, line1.GetStartPoint2, 0, 0.01）
            'MsgBox(999)


            L1L2D_new(line1, line3, 参考点:=line3.getendpoint2)


            Feature = part.GetActiveSketch2

            part.Extension.SelectByID2(Feature.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            Featmgr.FeatureExtrusion3(True, True, False, 0, 0, 宽度, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸




            part.ShowNamedView2（"*右视", 4）
            part.ViewZoomtofit2()
            part.ClearSelection2(True)
            part.Extension.SelectByRay(宽度 / 2, A视角高度 - 圆心到顶边距离, 宽度 / 2, -1, 0, 0, 0.0001, 2, False, 0, 0)
            L01 = sketcher.CreateCenterLine(-宽度 / 2, 0, 0, -宽度 / 2, 0.01, 0)
            L1 = sketcher.CreateLine(-宽度 / 2, A视角高度, 0, 0, A视角高度, 0)
            L2 = sketcher.CreateLine(0, A视角高度, 0, 0, line3endY, 0)
            P1 = L1.GetStartPoint2()
            P2 = L1.GetEndPoint2()
            P3 = L2.GetEndPoint2()
            'P4 =
            L1.select2(False, Nothing)
            L2.select2(True, Nothing)
            草图方法_new（"固定"）
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            P3.Select4(True, Nothing)
            草图方法_new（"固定"）



            A1 = sketcher.CreateTangentArc(L1.GetStartPoint2.x, L1.GetStartPoint2.y, 0， L1.GetStartPoint2.x + 凸台顶半径, L1.GetStartPoint2.y - 凸台顶半径, 0, 3) '1前：线段前端延申相切，2左：线段左端延申相互垂直，3后，4右，切线圆
            DisplayDimension = Arcdimension_new(A1， 0.01， 0.01, Diametric:=False)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 凸台顶半径
            位置点半径角度_new(A1.IGetCenterPoint2, A1.GetRadius + 0.01, 60)



            L3 = sketcher.CreateLine(L1.GetStartPoint2.x + 凸台顶半径, L1.GetStartPoint2.y - 凸台顶半径, 0, L1.GetStartPoint2.x + 凸台顶半径 + 0.002, L1.GetStartPoint2.y - 凸台顶半径 - 0.002, 0)
            A2 = sketcher.Create3PointArc(L1.GetStartPoint2.x + 凸台顶半径 + 0.002, L1.GetStartPoint2.y - 凸台顶半径 - 0.002, 0， 0, line3endY, 0, (L1.GetStartPoint2.x + 凸台顶半径 + 0.002) / 2 - 0.001, (L1.GetStartPoint2.y - 凸台顶半径 - 0.002 + line3endY) / 2, 0)


            DisplayDimension = Arcdimension_new(A2， 0.01， 0.01, Diametric:=False)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)

            L1.select2(False, Nothing)
            A1.select2(True, Nothing)
            草图方法_new（"相切"）
            A1.select2(False, Nothing)
            L3.select2(True, Nothing)
            草图方法_new（"相切"）
            A2.select2(False, Nothing)
            L3.select2(True, Nothing)
            草图方法_new（"相切"）
            myDimension.SystemValue = 凸台底半径
            位置点半径角度_new(A2.IGetCenterPoint2, 0.002, 240)


            sketchfeature1 = part.GetActiveSketch2
            part.InsertSketch2(True)


            'part.Extension.SelectByRay(宽度 / 2, line3centerY, 0, -1, 0, 0, 0.0001, 2, False, 1, 0)


            '切除到指定面
            'SketchSegment = L1
            part.ShowNamedView2（"*上视", 5）
            part.ViewZoomtofit2()
            part.ClearSelection2(True)
            part.Extension.SelectByRay((L5endx + L5startx) / 2, 宽度 + 0.01, 0, 0, -1, 0, 0.0001, 2, False, 1, 0)
            L10 = sketcher.CreateCenterLine(L5endx, 0, 0, L5startx, -宽度 / 2, 0)
            构造线_new()
            sketchfeature2 = part.GetActiveSketch2
            part.InsertSketch2(True)


            part.Extension.SelectByID2(sketchfeature1.Name, "SKETCH", 0, 0, 0, False, 1, Nothing, 0)
            part.Extension.SelectByID2(sketchfeature2.Name, "SKETCH", 0, 0, 0, True, 4, Nothing, 0)
            Feature2 = 扫描切除_new()


            SketchSegment = L01
            Feature = 基准面_new（SketchSegment, sketchfeature1, "前视"）

            part.Extension.SelectByID2(Feature2.Name, "BODYFEATURE", 0, 0, 0, False, 1, Nothing, 0)
            part.Extension.SelectByID2(Feature.Name, "PLANE", 0, 0, 0, True, 2, Nothing, 0)
            part.FeatureManager.InsertMirrorFeature(False, False, False, False)
            'MsgBox(Feature2.Name)
            'MsgBox(Feature.Name)


            part.ShowNamedView2("*前视", 1)
            part.ViewZoomtofit2()
            part.ShowNamedView2（"*右视", 4）
            part.ViewZoomtofit2()
            sketcher.InsertSketch(True)
            part.Extension.SelectByRay(宽度 / 2, A视角高度 - 圆心到顶边距离, 宽度 / 2, -1, 0, 0, 0.0001, 2, False, 0, 0)
            L01 = sketcher.CreateCenterLine(-宽度 / 2, 0, 0, -宽度 / 2, 0.01, 0)
            A1 = sketcher.CreateCircleByRadius(-宽度 / 2, A视角高度 - 圆心到顶边距离, 0, 直径# / 2)
            DisplayDimension = Arcdimension_new(A1， 0.1， 0)
            'MsgBox(666)


            位置点半径角度_new(A1.GetCenterPoint2, A1.GetRadius + 0.01, 150, 1)
            'MsgBox(999)
            Feature = 拉伸切除_new(0, 孔深)
            face1 = Feature.GetFaces


            '遍历_测试(1, face1, face1.Count)

            'selection_set() = face1(0).Select2(False, Nothing)
            face1(1).Select2(False, Nothing)
            SelectionSet = part.Extension.SaveSelection(True)



            '设置属性
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", dr("name"))
            cusproper.Set2("代号", dr("Code"))
            cusproper.Set2("材料", dr("material"))
            part.SaveAs3(dr("dz1") + dr("code") + dr("dz2"), 0, 2)














            A4P_new(dr("material"), dr("company"), dr("name"), dr("Code"))
            'Dim myView As Object
            myView = Draw.CreateDrawViewFromModelView3(dr("dz1") + dr("code") + dr("dz2"), "*右视", 0.07, 0.21, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            selecmag = part.SelectionManager
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            'Dim myNote As Object


            设置图纸比例_new(dr("proportion"))






            part.ActivateView("工程图视图1")


            Dim sss As SldWorks.SFSymbol
            sss = part.Extension.InsertSurfaceFinishSymbol3(Surface_SymType2, 0, 0.32, 0.24, 0, 0, 1, "", "", "", "", "", "", "") '插入粗糙度符号
            Annotation = sss.GetAnnotation()
            Annotation.SetPosition2(0.17, 0.27, 0)
            sss = part.Extension.InsertSurfaceFinishSymbol3(Surface_SymType2, 0, 0.33, 0.24, 0, 0, 1, "=", Surface_OtherVals, "", "Rz", "", "", "")
            Annotation = sss.GetAnnotation()
            Annotation.SetPosition2(0.18, 0.27, 0)


            技术要求_new（0.06, 0.09， "技术要求"， "1.压铸制造；"， "2.表面光滑，内部组织致密均匀，去飞边；"， "3.未注圆角R0.5；"， "4.未注公差尺寸的极限偏差按GB/T1804-m级精度。"）



            part.ClearSelection2(True)
            part.ActivateSheet("图纸1")
            part.ActivateView("工程图视图1")

            part.SketchManager.CreateLine(0, -0.03, 0#, 0, 0.03, 0#)
            part.CreateSectionViewAt5(0.15, 0.21, 0, "A", 128, Nothing, 0) '插入剖视图
            'part.InsertModelAnnotations3(0, 512 + 1 + 1024 + 2 + 4 + 8 + 32768 + 524288 + 32 + 1048576 + 131072 + 65536 + 16 + 64 + 16384 + 2048 + 8192 + 262144 + 128 + 4194304 + 4096 + 16777216 + 2097152 + 8388608 + 256, True, False, True, True) '插入零件尺寸,允许重复

            part.InsertModelAnnotations3(0, 32864 + 2, True, True, True, True)
            part.SaveAs3(dr("dz1") + dr("code") + dr("dz3"), 0, 2)
            'swapp.ExitApp()


            dr.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()

        End Sub
        Public Sub Support_block_2005()



            初始设置_new（1）
            Dim Surface_SymType2 As Integer
            Dim Surface_OtherVals As String



            Dim mysqlcon As MySqlConnection
            Dim mysqlcom As MySqlCommand
            Dim dr As MySqlDataReader
            mysqlcon = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
            '//打开数据库连接
            mysqlcon.Open()
            '//sql查询
            mysqlcom = New MySqlCommand("select * from support_block_2005", mysqlcon)
            dr = mysqlcom.ExecuteReader()
            dr.Read()
            Do Until dr.GetString("id") = 1
                dr.Read()
            Loop


            Dim sketcher As SldWorks.SketchManager
            Dim Featmgr As SldWorks.FeatureManager
            Dim selecmag As SldWorks.SelectionMgr

            swapp = CreateObject("Sldworks.application")
            swapp.Visible = True
            swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            part = swapp.ActiveDoc
            sketcher = part.SketchManager
            Featmgr = part.FeatureManager
            selecmag = part.SelectionManager
            Dim user As Boolean
            user = swapp.GetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
            Dim myDimension As SldWorks.Dimension
            Dim line1 As SldWorks.SketchSegment
            Dim line2 As SldWorks.SketchSegment
            Dim line3 As SldWorks.SketchSegment
            Dim line4 As SldWorks.SketchSegment
            Dim line5 As SldWorks.SketchSegment
            Dim line6 As SldWorks.SketchSegment
            Dim arc1 As SldWorks.SketchSegment


            初始设置_new(1)
            Dim 底长#， 底厚#， 底倒角长1#， 底倒角长2#， A视角相对底面角度， A视角高度#, 顶斜坡长#, 顶弧半径#, 顶总长#, 宽度#, 底圆角#，
                    圆心到顶边距离#， 直径#, 孔深#, 凸台顶半径#， 凸台底半径#， 矩形孔边长#， 矩形孔深#
            'Bottom Length#, Bottom Thick#, Bottom Chamfer Length1#,Bottom Chamfer Length2， Bottom Chamfer Angle Number,A viewing angle relative to the bottom angle， A View Height#, Top Slope Length#, Top Arc Radius#, Top Total Length#, Width#,
            'Bottom Round Angle#, Distance from Center To Top Edge #, diameter#, hole depth#, boss top radius#, boss bottom radius#,Rectangular hole side length,Rectangular hole depth



            底长# = dr("Bottom Length")
            底厚 = dr("Bottom Thick")
            底倒角长1 = dr("Bottom Chamfer Length1")
            底倒角长2 = dr("Bottom Chamfer Length2")
            A视角相对底面角度 = dr("A viewing angle relative to the bottom angle")

            A视角高度# = dr("A View Height")
            顶斜坡长# = dr("Top Slope Length")
            顶弧半径# = dr("Top Arc Radius")
            顶总长# = dr("Top Total Length")
            宽度# = dr("Width")
            底圆角 = dr("Bottom Round Angle")
            圆心到顶边距离 = dr("Distance from Center To Top Edge")
            直径# = dr("diameter")
            孔深# = dr("hole depth")
            凸台顶半径# = dr("boss top radius")
            凸台底半径# = dr("boss bottom radius")
            矩形孔边长# = dr("Rectangular hole side length")
            矩形孔深 = dr("Rectangular hole depth")

            底长 = 底长# / 1000
            底厚# = 底厚# / 1000
            底倒角长1# = 底倒角长1# / 1000
            底倒角长2 = 底倒角长2 / 1000
            A视角高度# = A视角高度# / 1000
            顶斜坡长# = 顶斜坡长# / 1000
            顶弧半径# = 顶弧半径# / 1000
            顶总长# = 顶总长# / 1000
            宽度# = 宽度# / 1000
            底圆角 = 底圆角 / 1000
            圆心到顶边距离 = 圆心到顶边距离 / 1000
            直径# = 直径# / 1000
            孔深 = 孔深 / 1000
            凸台顶半径# = 凸台顶半径# / 1000
            凸台底半径 = 凸台底半径 / 1000
            矩形孔边长# = 矩形孔边长# / 1000
            矩形孔深 = 矩形孔深 / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            sketcher.InsertSketch(True)
            line1 = sketcher.CreateLine(0, 底长#, 0, 0, 0, 0)
            part.SketchAddConstraints("sgFIXED") '固定

            L1 = line1

            固定点_new（L1.GetStartPoint2）
            固定点_new（L1.GetEndPoint2）
            line2 = sketcher.CreateLine(0, 0, 0, 底厚#, 0, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            固定点_new（line2.getstartpoint2）
            固定点_new（line2.getendpoint2）
            line3 = sketcher.CreateLine(底厚#, 0, 0, 底厚#, 0.01, 0)
            草图方法_new（"垂直"）
            line4 = sketcher.CreateLine(底厚#, 0.01, 0, 底厚# + 0.01, 0.01 + 0.01, 0)
            line5 = sketcher.CreateLine(底厚# + 0.01, 0.01 + 0.01, 0, 底厚#, 0.01 + 0.01 + 0.01, 0)

            '添加约束
            line4.Select4(False, Nothing)
            line1.Select4(True, Nothing)
            DisplayDimension = L1L2D_new(line1, line4, 0.01)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = A视角相对底面角度 * PI / 180
            part.SketchAddConstraints("sgFIXED") '固定


            line4.Select4(False, Nothing)
            line5.Select4(True, Nothing)
            草图方法_new（"相互垂直"）


            DisplayDimension = P1L1D_new(line1.GETENDPOINT2, line5, 0.01, 1)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = A视角高度#


            DisplayDimension = L1D_new(line5, 0.01, 1)
            位置两点中心_new（line5.GetEndPoint2, line5.GetStartPoint2, 1, 0.01）
            'MsgBox(555)



            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 顶斜坡长#


            arc1 = sketcher.CreateTangentArc(line5.getendpoint2.x, line5.getendpoint2.y, 0, 0, 底长#, 0, 1) '1前：线段前端延申相切，2左：线段左端延申相互垂直


            DisplayDimension = Arcdimension_new(arc1， 顶弧半径# + 0.01, Diametric:=False)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 顶弧半径#

            DisplayDimension = P1L1D_new(arc1.GETENDPOINT2, line4, 0.02)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 顶总长#

            P1 = line2.getendpoint2
            P1.Select4(False, Nothing)
            part.SketchManager.CreateChamfer(1, 底倒角长1, 底倒角长2)
            'MsgBox(66)





            line3.Select4(False, Nothing)
            part.SketchConstraintsDel(1, "sgATINTERSECT")
            旋转草图默认_new(A视角相对底面角度)


            P1 = line3.getendpoint2
            P1.Select4(False, Nothing)
            part.SketchManager.CreateFillet(底圆角, 1)



            Dim line3centerY As Double '用于后面过程的参数
            line3centerY = (line3.getendpoint2.Y + line3.getstartpoint2.Y) / 2


            Dim line3endY As Double '用于后面过程的参数
            line3endY = line4.getstartpoint2.Y


            Dim L5endx As Double
            L5endx = line5.getendpoint2.x
            Dim L5startx As Double
            L5startx = line5.getstartpoint2.x
            Dim L5endy As Double
            L5endy = line5.getstartpoint2.y


            DisplayDimension = L1D_new（line1, 0.01, 1）
            位置两点中心_new（line1.GetEndPoint2, line1.GetStartPoint2, 0, 0.01）
            'MsgBox(999)


            DisplayDimension = L1L2D_new(line1, line3, 参考点:=line3.getendpoint2)
            位置两点中心_new（line2.GetEndPoint2, line2.GetStartPoint2, 0, 0.015）
            'MsgBox(999)

            Feature = part.GetActiveSketch2

            part.Extension.SelectByID2(Feature.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            Featmgr.FeatureExtrusion3(True, True, False, 0, 0, 宽度, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸




            part.ShowNamedView2（"*右视", 4）
            part.ViewZoomtofit2()
            part.ClearSelection2(True)
            part.Extension.SelectByRay(宽度 / 2, A视角高度 - 圆心到顶边距离, 宽度 / 2, -1, 0, 0, 0.0001, 2, False, 0, 0)
            L01 = sketcher.CreateCenterLine(-宽度 / 2, 0, 0, -宽度 / 2, 0.01, 0)

            L1 = sketcher.CreateLine(-宽度 / 2, A视角高度, 0, 0, A视角高度, 0)
            L2 = sketcher.CreateLine(0, A视角高度, 0, 0, line3endY, 0)
            P1 = L1.GetStartPoint2()
            P2 = L1.GetEndPoint2()
            P3 = L2.GetEndPoint2()
            'P4 =
            L1.select2(False, Nothing)
            L2.select2(True, Nothing)
            草图方法_new（"固定"）
            P1.Select4(False, Nothing)
            P2.Select4(True, Nothing)
            P3.Select4(True, Nothing)
            草图方法_new（"固定"）



            A1 = sketcher.CreateTangentArc(L1.GetStartPoint2.x, L1.GetStartPoint2.y, 0， L1.GetStartPoint2.x + 凸台顶半径, L1.GetStartPoint2.y - 凸台顶半径, 0, 3) '1前：线段前端延申相切，2左：线段左端延申相互垂直，3后，4右，切线圆
            DisplayDimension = Arcdimension_new(A1， 0.01， 0.01, Diametric:=False)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 凸台顶半径
            位置点半径角度_new(A1.IGetCenterPoint2, A1.GetRadius + 0.01, 60)




            L3 = sketcher.CreateLine(L1.GetStartPoint2.x + 凸台顶半径, L1.GetStartPoint2.y - 凸台顶半径, 0, L1.GetStartPoint2.x + 凸台顶半径 + 0.002, L1.GetStartPoint2.y - 凸台顶半径 - 0.002, 0)
            A2 = sketcher.Create3PointArc(L1.GetStartPoint2.x + 凸台顶半径 + 0.002, L1.GetStartPoint2.y - 凸台顶半径 - 0.002, 0， 0, line3endY, 0, (L1.GetStartPoint2.x + 凸台顶半径 + 0.002) / 2 - 0.001, (L1.GetStartPoint2.y - 凸台顶半径 - 0.002 + line3endY) / 2, 0)


            DisplayDimension = Arcdimension_new(A2， 0.01， 0.01, Diametric:=False)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)

            L1.select2(False, Nothing)
            A1.select2(True, Nothing)
            草图方法_new（"相切"）
            A1.select2(False, Nothing)
            L3.select2(True, Nothing)
            草图方法_new（"相切"）
            A2.select2(False, Nothing)
            L3.select2(True, Nothing)
            草图方法_new（"相切"）
            myDimension.SystemValue = 凸台底半径
            位置点半径角度_new(A2.IGetCenterPoint2, 0.002, 240)

            sketchfeature1 = part.GetActiveSketch2
            part.InsertSketch2(True)


            'part.Extension.SelectByRay(宽度 / 2, line3centerY, 0, -1, 0, 0, 0.0001, 2, False, 1, 0)


            '切除到指定面
            'SketchSegment = L1
            part.ShowNamedView2（"*上视", 5）
            part.ViewZoomtofit2()
            part.ClearSelection2(True)
            part.Extension.SelectByRay((L5endx + L5startx) / 2, 宽度 + 0.01, 0, 0, -1, 0, 0.0001, 2, False, 1, 0)
            L10 = sketcher.CreateCenterLine(L5endx, 0, 0, L5startx, -宽度 / 2, 0)
            构造线_new()
            sketchfeature2 = part.GetActiveSketch2
            part.InsertSketch2(True)


            part.Extension.SelectByID2(sketchfeature1.Name, "SKETCH", 0, 0, 0, False, 1, Nothing, 0)
            part.Extension.SelectByID2(sketchfeature2.Name, "SKETCH", 0, 0, 0, True, 4, Nothing, 0)
            Feature2 = 扫描切除_new()


            SketchSegment = L01
            Feature = 基准面_new（SketchSegment, sketchfeature1, "前视"）

            part.Extension.SelectByID2(Feature2.Name, "BODYFEATURE", 0, 0, 0, False, 1, Nothing, 0)
            part.Extension.SelectByID2(Feature.Name, "PLANE", 0, 0, 0, True, 2, Nothing, 0)
            part.FeatureManager.InsertMirrorFeature(False, False, False, False)
            'MsgBox(Feature2.Name)
            'MsgBox(Feature.Name)

            sketcher.InsertSketch(True)
            part.Extension.SelectByRay(宽度 / 2, A视角高度 - 圆心到顶边距离, 宽度 / 2, -1, 0, 0, 0.0001, 2, False, 0, 0)
            A1 = sketcher.CreateCircleByRadius(-宽度 / 2, A视角高度 - 圆心到顶边距离, 0, 直径# / 2)
            X1 = A1.GetCenterPoint2.x
            Y1 = A1.GetCenterPoint2.y
            DisplayDimension = Arcdimension_new(A1， 0， 0)
            位置点半径角度_new(A1.GetCenterPoint2, A1.GetRadius + 0.01, 150, 1)
            Feature = 拉伸切除_new(0, 孔深)

            '保存选择集
            face1 = Feature.GetFaces
            '遍历_测试(1, face1, face1.Count)
            'selection_set() = face1(0).Select2(False, Nothing)
            face1(1).Select2(False, Nothing)
            SelectionSet = part.Extension.SaveSelection(True)

            SketchSegment = L01
            Feature = 基准面_new（SketchSegment, sketchfeature1, "右视"）
            Feature.Select2(False, 1)
            sketcher.InsertSketch(True)
            part.SketchManager.CreateCenterRectangle(X1, Y1, 0, X1 + 矩形孔边长 / 2, Y1 + 矩形孔边长 / 2, 0)

            part.ClearSelection2(True)
            'part.Extension.SelectByID2("Line3", "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)

            'MsgBox(999)
            'Object1 = SelectionMgr.GetSelectedObject6(-1, 1)
            ''L1 = Object1
            ''SketchSegment = Object1
            'Object1.GetType()

            SketchSegment = 获得sketchsegment根据name_new（"直线3"）
            SketchSegment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(0, 0, 0)
            位置两点中心_new（SketchSegment.GetStartPoint2, SketchSegment.GetEndPoint2, 1, 0.01， 视图:="右"）
            拉伸切除_new(0, 矩形孔深)


            '设置属性
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", dr("name"))
            cusproper.Set2("代号", dr("Code"))
            cusproper.Set2("材料", dr("material"))
            part.SaveAs3(dr("dz1") + dr("code") + dr("dz2"), 0, 2)































            A4P_new(dr("material"), dr("company"), dr("name"), dr("Code"))
            'Dim myView As Object
            myView = Draw.CreateDrawViewFromModelView3(dr("dz1") + dr("code") + dr("dz2"), "*右视", 0.07, 0.21, 0)
            part = swapp.ActiveDoc
            Draw = swapp.ActiveDoc
            selecmag = part.SelectionManager
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            'Dim myNote As Object


            设置图纸比例_new(dr("proportion"))


            part.ActivateView("工程图视图1")
            Dim sss As SldWorks.SFSymbol
            sss = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0.32, 0.24, 0, 0, 1, "", "", "", "", "", "12.5", "") '插入粗糙度符号
            Annotation = sss.GetAnnotation()
            Annotation.SetPosition2(0.17, 0.27, 0)


            技术要求_new（0.06, 0.09， "技术要求"， "1.压铸制造；"， "2.表面光滑，内部组织致密均匀，去飞边；"， "3.未注圆角R0.5；"， "4.未注公差尺寸的极限偏差按GB/T1804-m级精度。"）



            part.ClearSelection2(True)
            part.ActivateSheet("图纸1")
            part.ActivateView("工程图视图1")

            part.SketchManager.CreateLine(0, -0.03, 0#, 0, 0.03, 0#)
            myView = part.CreateSectionViewAt5(0.15, 0.21, 0, "A", 128, Nothing, 0) '插入剖视图
            'part.InsertModelAnnotations3(0, 512 + 1 + 1024 + 2 + 4 + 8 + 32768 + 524288 + 32 + 1048576 + 131072 + 65536 + 16 + 64 + 16384 + 2048 + 8192 + 262144 + 128 + 4194304 + 4096 + 16777216 + 2097152 + 8388608 + 256, True, False, True, True) '插入零件尺寸,允许重复

            part.InsertModelAnnotations3(0, 32864 + 2, True, True, True, True)
            Note = myView.GetFirstNote
            Annotation = Note.GetAnnotation()
            Annotation.SetPosition2(0.15, 0.21 + 0.05, 0)
            part.SaveAs3(dr("dz1") + dr("code") + dr("dz3"), 0, 2)
            'swapp.ExitApp()


            dr.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()

        End Sub
        Public Sub fan_parts_series_one(code$, 配置$)

            初始设置_new（1）
            mysql_new("fan", "fan_parts_series_one", code)

            Dim user As Boolean
            user = swapp.GetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
            Dim myDimension As SldWorks.Dimension

            Dim 轴顶到扇叶顶高#, 轴外径#， 轴内径#， 轴高#， 轴底到螺纹孔顶高#， 轴腰弧半径#， 扇叶弧内半径#， 扇叶弧圆心X#, 扇叶弧圆心Y#, 扇叶外径#， 扇叶厚度#， 轴顶凹弧半径#
            'Shaft top To fan top height#, shaft outer diameter#, shaft inner diameter#, shaft height#, shaft bottom To hole top height#, shaft waist arc radius#,
            'fan blade arc inner radius#, fan blade arc center X#, fan Blade arc center Y#, fan blade outer diameter#, fan blade thickness#, shaft top concave arc radius#,

            轴顶到扇叶顶高 = read("Shaft top To fan top height")
            轴外径 = read("shaft outer diameter")
            轴内径 = read("shaft inner diameter")
            轴高 = read("shaft height")
            轴底到螺纹孔顶高 = read("shaft bottom To hole top height")
            轴腰弧半径 = read("shaft waist arc radius")
            扇叶弧内半径 = read("fan blade arc inner radius")
            扇叶弧圆心X = read("fan blade arc center X")
            扇叶弧圆心Y = read("fan Blade arc center Y")
            扇叶外径 = read("fan blade outer diameter")
            扇叶厚度 = read("fan blade thickness")
            轴顶凹弧半径 = read("shaft top concave arc radius")

            轴顶到扇叶顶高 = 轴顶到扇叶顶高 / 1000
            轴外径 = 轴外径 / 1000
            轴内径 = 轴内径 / 1000
            轴高 = 轴高 / 1000
            轴底到螺纹孔顶高 = 轴底到螺纹孔顶高 / 1000
            轴腰弧半径 = 轴腰弧半径 / 1000
            扇叶弧内半径 = 扇叶弧内半径 / 1000
            扇叶弧圆心X = 扇叶弧圆心X / 1000
            扇叶弧圆心Y = 扇叶弧圆心Y / 1000
            扇叶外径 = 扇叶外径 / 1000
            扇叶厚度 = 扇叶厚度 / 1000
            轴顶凹弧半径 = 轴顶凹弧半径 / 1000

            Dim line1 As SldWorks.SketchSegment
            Dim line2 As SldWorks.SketchSegment
            Dim line3 As SldWorks.SketchSegment
            Dim line4 As SldWorks.SketchSegment
            Dim line5 As SldWorks.SketchSegment
            Dim arc1 As SldWorks.SketchArc
            Dim arc2 As SldWorks.SketchArc
            Dim arc3 As SldWorks.SketchArc
            Dim arc4 As SldWorks.SketchArc

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)

            DL1 = SketchManager.CreateCenterLine(0, 0, 0, 0.01, 0, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            line1 = SketchManager.CreateLine(轴顶到扇叶顶高, 轴外径 / 2, 0, 轴顶到扇叶顶高, 轴内径 / 2, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            固定点_new（line1.GetstartPoint2）
            line2 = SketchManager.CreateLine(轴顶到扇叶顶高, 轴内径 / 2, 0， 轴顶到扇叶顶高 + 轴高, 轴内径 / 2, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            line3 = SketchManager.CreateLine(轴顶到扇叶顶高 + 轴高, 轴内径 / 2, 0， 轴顶到扇叶顶高 + 轴高, 轴外径 / 2, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            line4 = SketchManager.CreateLine(轴顶到扇叶顶高 + 轴高, 轴外径 / 2, 0， 轴顶到扇叶顶高 + 轴高 - 轴底到螺纹孔顶高, 轴外径 / 2, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1 = part.SketchManager.CreateArc(轴顶到扇叶顶高 + 轴高 - 轴底到螺纹孔顶高, 轴外径 / 2 + 轴腰弧半径, 0, 轴顶到扇叶顶高 + 轴高 - 轴底到螺纹孔顶高, 轴外径 / 2, 0#, 轴顶到扇叶顶高 + 轴高 - 轴底到螺纹孔顶高 + 轴腰弧半径 * Cos(250 * PI / 180), 轴外径 / 2 + 轴腰弧半径 + 轴腰弧半径 * Sin(250 * PI / 180), 0, -1) '圆心，起点，终点画弧
            arc1.SetRadius(轴腰弧半径)
            arc1.select2(False, Nothing)
            line4.Select2(True, Nothing)
            草图方法_new（"相切"）

            arc2 = part.SketchManager.CreateArc(扇叶弧圆心X, 扇叶弧圆心Y, 0, arc1.GetEndPoint2.x, arc1.GetEndPoint2.y, 0, 扇叶弧圆心X + 扇叶弧内半径 * Cos(200 * PI / 180), 扇叶弧圆心Y + 扇叶弧内半径 * Sin(200 * PI / 180), 0, -1) '圆心，起点，终点画弧
            固定点_new（arc2.GetCenterPoint2）
            arc2.SetRadius（扇叶弧内半径）
            arc2.select2(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            arc1.select2(False, Nothing)
            arc2.select2(True, Nothing)
            草图方法_new（"相切"）

            DP1 = arc2.GetEndPoint2()
            DisplayDimension = P1L1D_new(DP1, DL1, 0.01)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 扇叶外径 / 2

            line5 = SketchManager.CreateLine(arc2.GetEndPoint2.x, arc2.GetEndPoint2.y, 0， arc2.GetEndPoint2.x - 0.01, arc2.GetEndPoint2.y, 0)
            草图方法_new（"水平"）
            arc3 = part.SketchManager.CreateArc(扇叶弧圆心X, 扇叶弧圆心Y, 0, line5.GetEndPoint2.x, line5.GetEndPoint2.y, 0, 扇叶弧圆心X + 扇叶弧内半径 * Cos(230 * PI / 180), 扇叶弧圆心Y + 扇叶弧内半径 * Sin(230 * PI / 180), 0, 1) '圆心，起点，终点画弧
            arc3.SetRadius（扇叶弧内半径 + 扇叶厚度）
            arc3.select2(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            arc4 = part.SketchManager.CreateArc(line1.getstartpoint2.x, line1.getstartpoint2.y + 轴顶凹弧半径, 0, line1.getstartpoint2.x, line1.getstartpoint2.y, 0, line1.getstartpoint2.x + 轴顶凹弧半径 * Cos(30 * PI / 180), line1.getstartpoint2.y + 轴顶凹弧半径 + 轴顶凹弧半径 * Sin(30 * PI / 180), 0, 1) '圆心，起点，终点画弧
            arc4.SetRadius（轴顶凹弧半径）

            arc3.select2(False, Nothing)
            arc4.select2(True, Nothing)
            草图方法_new（"相切"）

            DP1 = arc3.GetEndPoint2
            DP2 = arc4.GetEndPoint2
            DP1.Select2(False, Nothing)
            DP2.Select2(True, Nothing)
            草图方法_new（"合并"）
            sketchfeature1 = part.GetActiveSketch2
            SketchManager.InsertSketch(True)

            sketchfeature1.Select2(False, 0)
            DL1.Select2(True, 16)
            特征旋转_new()






            Dim Dline1 As SldWorks.SketchSegment
            Dim Dline2 As SldWorks.SketchSegment
            Dim Darc1 As SldWorks.SketchArc
            Dim Darc2 As SldWorks.SketchArc
            Dim 底环弧半径#， 底环弧圆心X#, 底环弧圆心Y#, 底环厚#, 底环内径#, 底环到扇页顶高#, 底环圆角#, 底环筋到底环底高度#, 筋圆角#, 筋厚度#， 筋圆角上#， 筋圆角下#， 筋阵列数%
            'bottom ring arc radius#, bottom ring arc center X#, bottom ring arc center Y#, bottom ring thickness#, bottom ring Inner diameter#, bottom ring To fan page top height#,
            'bottom ring round corner#, bottom ring rib To bottom ring bottom height#, rib round corner#, rib thickness#, rib round corner upper#, rib round corner lower#, rib array number%
            底环弧半径 = read("bottom ring arc radius")
            底环弧圆心X = read("bottom ring arc center X")
            底环弧圆心Y = read("bottom ring arc center Y")
            底环厚 = read("bottom ring thickness")
            底环内径# = read("bottom ring Inner diameter")
            底环到扇页顶高 = read("bottom ring To fan page top height")
            底环圆角 = read("bottom ring round corner")
            底环筋到底环底高度 = read("bottom ring rib To bottom ring bottom height")
            筋圆角 = read("rib round corner")
            筋厚度 = read("rib thickness")
            筋圆角上 = read("rib round corner upper")
            筋圆角下 = read("rib round corner lower")
            筋阵列数 = read("rib array number")

            底环弧半径 = 底环弧半径 / 1000
            底环弧圆心X = 底环弧圆心X / 1000
            底环弧圆心Y = 底环弧圆心Y / 1000
            底环厚 = 底环厚 / 1000
            底环内径# = 底环内径# / 1000
            底环到扇页顶高 = 底环到扇页顶高 / 1000
            底环圆角 = 底环圆角 / 1000
            底环筋到底环底高度 = 底环筋到底环底高度 / 1000
            筋圆角 = 筋圆角 / 1000
            筋厚度 = 筋厚度 / 1000
            筋圆角上 = 筋圆角上 / 1000
            筋圆角下 = 筋圆角下 / 1000

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)

            Dline1 = SketchManager.CreateLine(底环到扇页顶高, 底环内径 / 2, 0， 底环到扇页顶高, 底环内径 / 2 - 0.01, 0)
            草图方法_new（"垂直"）
            part.SketchAddConstraints("sgFIXED") '固定

            Darc1 = part.SketchManager.CreateArc(底环弧圆心X, 底环弧圆心Y, 0, Dline1.GetstartPoint2.x, Dline1.GetstartPoint2.y, 0, 底环弧圆心X + 底环弧半径 * Cos(200 * PI / 180), 底环弧圆心Y + 底环弧半径 * Sin(200 * PI / 180), 0, -1) '圆心，起点，终点画弧
            固定点_new（Darc1.GetCenterPoint2）
            Darc1.SetRadius（底环弧半径）
            Darc1.select2(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            Dline2 = SketchManager.CreateLine(Darc1.GetEndPoint2.X, Darc1.GetEndPoint2.y, 0， Darc1.GetEndPoint2.X - 0.01, Darc1.GetEndPoint2.y, 0)
            草图方法_new（"水平"）

            Darc2 = part.SketchManager.CreateArc(底环弧圆心X, 底环弧圆心Y, 0, Dline2.GetendPoint2.x, Dline2.GetendPoint2.y, 0, 底环弧圆心X + 底环弧半径 * Cos(220 * PI / 180), 底环弧圆心Y + 底环弧半径 * Sin(220 * PI / 180), 0, 1) '圆心，起点，终点画弧
            固定点_new（Darc2.GetCenterPoint2）
            Darc2.SetRadius（底环弧半径 + 底环厚）
            Darc2.select2(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            DP1 = Dline1.GetEndPoint2
            DP2 = Darc2.GetEndPoint2
            DP1.Select2(False, Nothing)
            DP2.Select2(True, Nothing)
            草图方法_new（"合并"）

            DisplayDimension = P1L1D_new(Dline2.getendpoint2, DL1, 0.01)
            myDimension = part.Parameter(DisplayDimension.GetNameForSelection)
            myDimension.SystemValue = 扇叶外径 / 2

            DP1.Select2(False, Nothing)
            草图圆角_new（底环圆角）

            sketchfeature2 = part.GetActiveSketch2
            SketchManager.InsertSketch(True)

            基准轴featureX = 基准轴_new（"X"）
            SelectionMgr.SetSelectedObjectMark(1, 16, 0)
            sketchfeature2.Select2(True, 0)
            特征旋转_new()








            Dim Eline1 As SldWorks.SketchSegment
            Dim Eline2 As SldWorks.SketchSegment
            Dim Earc1 As SldWorks.SketchArc
            Dim Earc2 As SldWorks.SketchArc
            Dim Earc3 As SldWorks.SketchArc

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)

            arc2.select2(False, Nothing)
            转换实体引用_new()

            Earc1 = 获得sketchsegment根据name_new（"圆弧2"） '左

            偏移草图_new(-0.001， 0)
            Earc1.select2(True, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            Darc2.select2(True, Nothing)
            转换实体引用_new()
            Earc2 = 获得sketchsegment根据name_new（"圆弧4"）
            Earc2.select2(True, Nothing)
            Eline1 = SketchManager.CreateLine(Earc1.GetStartPoint2.X, Earc1.GetStartPoint2.Y, 0， Earc2.GetStartPoint2.X, Earc2.GetStartPoint2.Y, 0)
            草图方法_new（"水平"）
            part.SketchAddConstraints("sgFIXED") '固定

            part.ClearSelection2(True)
            Earc2.select2(False, Nothing)
            part.SketchConstraintsDel(0, "sgUSEEDGE") '删除在边线上约束
            Earc2.select2(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            'Earc2.GetEndPoint2.X = 0.105
            DisplayDimension = P1L1D_new(Earc2.GetEndPoint2, Dline1, 0.01)
            尺寸数值_new（底环筋到底环底高度）
            part.EditDelete()

            Eline2 = SketchManager.CreateLine(Earc2.GetEndPoint2.X, Earc2.GetEndPoint2.Y, 0， Earc1.GetEndPoint2.X, Earc1.GetEndPoint2.Y + 0.03, 0)
            L1 = Eline2
            L1.Angle = (180 + 75) * PI / 180
            part.SketchAddConstraints("sgFIXED") '固定

            Earc1.GetEndPoint2.X -= 0.03

            Earc3 = part.SketchManager.CreateTangentArc(Eline2.GetEndPoint2.X, Eline2.GetEndPoint2.y, 0#, Earc1.GetEndPoint2.X, Earc1.GetEndPoint2.y, 0#, 1)
            Earc3.SetRadius(筋圆角)

            SketchManager.InsertSketch(True)

            Feature = part.FeatureManager.FeatureExtrusion2(True, False, False, 6, 0, 筋厚度 / 2, 0.01, False, False, False, False, 0.0174532925199433, 0.0174532925199433, False, False, False, False, True, True, True, 0, 0, False)

            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, False, 1, Nothing, 0)
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Object数组1 = Feature.GetFaces()
            facenumber5 = Feature.GetFaceCount()
            '遍历（1, Object数组1, facenumber5）

            swface = Object数组1(7)
            Object数组2 = swface.GetEdges()
            swface = Object数组1(8)
            Object数组3 = swface.GetEdges()

            part.ClearSelection2(True)

            '遍历（1, Object数组3, Object数组2.Count）

            SelectionMgr.AddSelectionListObject(Object数组2(0), Nothing)
            SelectionMgr.AddSelectionListObject(Object数组3(1), Nothing)
            Feature1 = 特征圆角_new（筋圆角上）

            part.ClearSelection2(True)
            SelectionMgr.AddSelectionListObject(Object数组2(3), Nothing)
            SelectionMgr.AddSelectionListObject(Object数组3(7), Nothing)
            Feature2 = 特征圆角_new（筋圆角下）


            基准轴featureX.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.Extension.SelectByID2(Feature1.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.Extension.SelectByID2(Feature2.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)

            特征阵列_等间距(筋阵列数)

            part.Extension.SelectByID2(Feature2.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)

            part.ClearSelection2(True)
            part.Extension.SelectByID2(part.GetTitle(), "COMPONENT", 0, 0, 0, False, 0, Nothing, 0)
            Component2 = SelectionMgr.GetSelectedObject6(1, -1)
            '渲染(Component2, "c:\program files\solidworks corp\solidworks\data\graphics\materials\metal\aluminum\polished aluminum.p2m") '剖光铝
            '渲染(Component2, "C:\Program Files\SOLIDWORKS Corp\SOLIDWORKS\data\graphics\materials\Plastic\Patterned\blue dimpled plastic.p2m") '蓝酒涡型塑料



            part.SetMaterialPropertyName2("默认", "C:/Program Files/SOLIDWORKS Corp/SOLIDWORKS/lang/chinese-simplified/sldmaterials/solidworks materials.sldmat", "356.0-T6 永久成型铸件 (SS)")
            Dim swMass As MassProperty
            part.Extension.SelectByID2(part.GetTitle, "COMPONENT", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Component2 = SelectionMgr.GetSelectedObject5(1)
            swMass = part.Extension.CreateMassProperty

            'Dim vBodies(0) As Object
            'Dim aa As Object
            'vBodies = Component2.GetBodies(0)
            'Dim dispArray() As DispatchWrapper
            'dispArray = ObjectArrayToDispatchWrapperArray(vBodies)
            'swMass.AddBodies(dispArray)
            'MsgBox(swMass.Mass) '质量
            'MsgBox(swMass.Volume) '体积
            'MsgBox(swMass.Density） '密度
            'Dim aaa As Double()
            'aaa = swMass.CenterOfMass '质心
            'MsgBox(aaa(0))
            'MsgBox(aaa(1))
            'MsgBox(aaa(2))

            If 配置 = "默认" Then
            Else
                part.Extension.SelectByID2(part.GetTitle, "COMPONENT", 0, 0, 0, False, 0, Nothing, 0)
                part.AddConfiguration2("配置2", "", "", False, False, False, True, 256)
                part.ShowConfiguration2("配置2")
                part.ForceRebuild3(True)
                part.SetMaterialPropertyName2("配置2", "C:/Program Files/SOLIDWORKS Corp/SOLIDWORKS/lang/chinese-simplified/sldmaterials/solidworks materials.sldmat", "纯金")


                Dim 螺纹孔径#， 螺纹中心距底高#
                螺纹孔径 = 10
                螺纹中心距底高 = 10
                螺纹孔径 = 螺纹孔径 / 1000
                螺纹中心距底高 = 螺纹中心距底高 / 1000

                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                SketchManager.InsertSketch(True)
                part.SketchManager.CreateCircleByRadius(轴顶到扇叶顶高 + 轴高 - 螺纹中心距底高, 0, 0, 螺纹孔径 / 2)
                拉伸切除_new(1, 0, True)
            End If





            'A4P(dr("material"), dr("company"), dr("name"), dr("Code"))
            ''Dim myView As Object
            'myView = Draw.CreateDrawViewFromModelView3(dr("dz1") + dr("code") + dr("dz2"), "*右视", 0.07, 0.21, 0)



            '设置属性
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", read("name"))
            cusproper.Set2("代号", read("Code"))
            cusproper.Set2("材料", read("material"))
            part.EditRebuild3()
            part.SaveAs3(read("dz1") + read("code") + read("dz2"), 0, 2)

        End Sub
        Public Sub 外风扇_8LY_435_001(Code$, Optional 配置$ = "默认")


            '

            mysql_new("fan", "Outside_fan", Code)



            Dim user As Boolean
            user = swapp.GetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
            基准轴featureX = 基准轴_new("X")


            '画扇面
            Dim 轴顶到扇叶顶高#, 轴外径#， 轴内径#， 轴高#， 轴底到扇叶底高#， 扇叶外径#， 扇叶顶外切圆弧半径#， 扇叶顶厚度#， 扇叶顶内切圆弧半径#， 扇叶底厚度#， 扇叶底圆角半径#， 扇叶顶圆角半径#
            'Shaft top To fan top height#, shaft outer diameter#, shaft inner diameter#, shaft height#,

            轴顶到扇叶顶高 = read("Shaft top To fan top height") '35
            轴外径 = read("shaft outer diameter") '175
            轴内径 = read("shaft inner diameter") '150
            轴高 = read("shaft height") '80
            轴底到扇叶底高 = 80 - 40 - 16
            扇叶外径 = 500
            扇叶顶外切圆弧半径 = 10
            扇叶顶厚度 = 8
            扇叶顶内切圆弧半径 = 2
            扇叶底厚度 = 16
            扇叶底圆角半径 = 30
            扇叶顶圆角半径 = 5




            轴顶到扇叶顶高 = 轴顶到扇叶顶高 / 1000
            轴外径 = 轴外径 / 1000
            轴内径 = 轴内径 / 1000
            轴高 = 轴高 / 1000
            轴底到扇叶底高 = 轴底到扇叶底高 / 1000
            扇叶外径 = 扇叶外径 / 1000
            扇叶顶外切圆弧半径 = 扇叶顶外切圆弧半径 / 1000
            扇叶顶厚度 = 扇叶顶厚度 / 1000
            扇叶顶内切圆弧半径 = 扇叶顶内切圆弧半径 / 1000
            扇叶底厚度 = 扇叶底厚度 / 1000
            扇叶底圆角半径 = 扇叶底圆角半径 / 1000
            扇叶顶圆角半径 = 扇叶顶圆角半径 / 1000


            Dim line1 As SldWorks.SketchSegment
            Dim line2 As SldWorks.SketchSegment
            Dim line3 As SldWorks.SketchSegment
            Dim line4 As SldWorks.SketchSegment
            Dim line5 As SldWorks.SketchSegment
            Dim line6 As SldWorks.SketchSegment
            Dim line7 As SldWorks.SketchSegment
            Dim line8 As SldWorks.SketchSegment
            Dim arc1 As SldWorks.SketchArc
            Dim arc2 As SldWorks.SketchArc
            Dim arc1圆角 As SldWorks.SketchArc
            Dim arc2圆角 As SldWorks.SketchArc

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)

            DL1 = SketchManager.CreateCenterLine(0, 0, 0, 0.01, 0, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            line1 = SketchManager.CreateLine(轴顶到扇叶顶高, 轴外径 / 2, 0, 轴顶到扇叶顶高, 轴内径 / 2, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            固定点_new(line1.GetstartPoint2)
            line2 = SketchManager.CreateLine(line1.GetendPoint2.x, line1.GetendPoint2.y, 0， 轴顶到扇叶顶高 + 轴高, 轴内径 / 2, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            line3 = SketchManager.CreateLine(line2.GetendPoint2.x, line2.GetendPoint2.y, 0， 轴顶到扇叶顶高 + 轴高, 轴外径 / 2, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            line4 = SketchManager.CreateLine(line3.GetendPoint2.x, line3.GetendPoint2.y, 0， 轴顶到扇叶顶高 + 轴高 - 轴底到扇叶底高, 轴外径 / 2, 0)
            part.SketchAddConstraints("sgFIXED") '固定
            'line5 = SketchManager.CreateLine(line4.GetendPoint2.x, line4.GetendPoint2.y, 0， 轴顶到扇叶顶高 + 轴高 - 轴底到扇叶底高, 轴外径 / 2, 0)

            'part.SketchAddConstraints("sgFIXED") '固定

            line5 = SketchManager.CreateLine(line4.GetendPoint2.x, line4.GetendPoint2.y, 0， line4.GetendPoint2.x, line4.GetendPoint2.y + 0.01, 0)
            固定点_new(line5.GetstartPoint2)
            arc1 = 圆心起点终点画弧(0, 扇叶外径 / 2 - 扇叶顶外切圆弧半径, 0, 0, 扇叶外径 / 2, 0, 0 + 扇叶顶外切圆弧半径 * Cos(PI * 30 / 180), 扇叶外径 / 2 - 扇叶顶外切圆弧半径 + 扇叶顶外切圆弧半径 * Sin(PI * 30 / 180), 0)
            固定点_new(arc1.GetCenterPoint2)
            固定点_new(arc1.GetStartPoint2)
            合并点(line5.GetendPoint2, arc1.GetEndPoint2)
            line5.Select2(False, 0)
            arc1.select2(True, 0)
            草图方法("相切")

            line6 = SketchManager.CreateLine(arc1.GetStartPoint2.x, arc1.GetStartPoint2.y, 0， arc1.GetStartPoint2.x, arc1.GetStartPoint2.y - 扇叶顶厚度, 0)
            固定点_new(line6.GetendPoint2)

            放大视图(5)
            arc2 = 圆心起点终点画弧(0, 扇叶外径 / 2 - 扇叶顶厚度 - 扇叶顶内切圆弧半径, 0, line6.GetendPoint2.x, line6.GetendPoint2.y, 0, 0 + 扇叶顶内切圆弧半径 * Cos(PI * 30 / 180), 扇叶外径 / 2 - 扇叶顶厚度 - 扇叶顶内切圆弧半径 + 扇叶顶内切圆弧半径 * Sin(PI * 30 / 180), 0)
            part.ViewZoomtofit2()
            固定点_new(arc2.GetCenterPoint2)
            line7 = SketchManager.CreateLine(arc2.GetEndPoint2.x, arc2.GetEndPoint2.y, 0， line4.GetendPoint2.x - 扇叶底厚度, line4.GetendPoint2.y, 0)
            固定点_new(line7.GetendPoint2)
            line7.Select2(False, 0)
            arc2.select2(True, 0)
            草图方法("相切")
            line8 = SketchManager.CreateLine(line7.GetEndPoint2.x, line7.GetEndPoint2.y, 0， line1.GetstartPoint2.x, line1.GetstartPoint2.y, 0)

            P1 = line4.GetEndPoint2
            P1.Select2(False, 0)
            arc1圆角 = 草图圆角_new(扇叶底圆角半径)

            P1 = line7.GetEndPoint2
            P1.Select2(False, 0)
            arc2圆角 = 草图圆角_new(扇叶顶圆角半径)
            删除约束()
            sketchfeature1 = part.GetActiveSketch2
            SketchManager.InsertSketch(True)

            sketchfeature1.Select2(False, 0)
            Dim 旋转 As SldWorks.Feature
            旋转 = 特征旋转_new()

            'face1 = 旋转.GetFaces
            'face1(0).select2(False, Nothing)
            'MsgBox(666)
            'Feature = part.FeatureManager.InsertMateReference2("默认", Nothing, 0, 0, False, Nothing, 0, 0, False, Nothing, 0, 0)
            'Feature.Select2(False, Nothing)
            'MsgBox(666)
            'face6 = Feature.GetFaces()
            'face6(0).select2(False, Nothing)
            'MsgBox(666)







            '画内筋条
            Dim 筋顶距轴顶距离#， 筋厚度#, 筋顶圆角#， 筋底圆角#, 扇叶高#, 扇叶内顶宽#, 扇叶外顶圆角R#, 扇叶内顶圆角R#, 扇叶内顶角角度, 外筋顶宽#, 外筋底圆角#， 外筋顶圆角#
            筋顶距轴顶距离 = 5
            筋厚度# = 10
            筋顶圆角 = 4
            筋底圆角 = 5
            扇叶高 = 170
            扇叶内顶宽 = 270
            扇叶外顶圆角R = 12
            扇叶内顶圆角R = 6
            扇叶内顶角角度 = 125
            外筋顶宽 = 5
            外筋底圆角 = 5
            外筋顶圆角 = 2.5

            筋顶距轴顶距离 = 筋顶距轴顶距离 / 1000
            筋厚度# = 筋厚度# / 1000
            筋顶圆角 = 筋顶圆角 / 1000
            筋底圆角 = 筋底圆角 / 1000
            扇叶高 = 扇叶高 / 1000
            扇叶内顶宽 = 扇叶内顶宽 / 1000
            扇叶外顶圆角R = 扇叶外顶圆角R / 1000
            扇叶内顶圆角R = 扇叶内顶圆角R / 1000
            外筋顶宽 = 外筋顶宽 / 1000
            外筋底圆角 = 外筋底圆角 / 1000
            外筋顶圆角 = 外筋顶圆角 / 1000

            Dim Aline1 As SldWorks.SketchSegment

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)
            arc2圆角.select2(False, Nothing)
            line6.Select2(True, Nothing)
            转换实体引用_new()
            A1 = 获得sketchsegment根据name_new（"圆弧2"） '左
            DL1 = 获得sketchsegment根据name_new（"直线2"）
            line7.Select2(False, Nothing)
            转换实体引用_new()
            DL2 = 获得sketchsegment根据name_new（"直线4"）
            line8.Select2(False, Nothing)
            转换实体引用_new()
            DL3 = 获得sketchsegment根据name_new（"直线6"）
            删除约束()

            A1.select2(False, Nothing)
            DL1.Select2(True, Nothing)
            DL2.Select2(True, Nothing)
            草图方法("固定")
            DL3.select2(False, Nothing)
            草图方法("水平")


            P1 = 两点选一点(DL2.GetStartPoint2, DL2.GetEndPoint2, 2)
            P2 = 两点选一点(DL3.GetStartPoint2, DL3.GetEndPoint2, 1, 0)


            Aline1 = SketchManager.CreateLine(P1.X, P1.Y, 0， P2.X, P2.Y, 0)
            草图方法("垂直")

            DisplayDimension = L1L2D_new(Aline1, DL1)
            尺寸数值_new（轴顶到扇叶顶高 + 筋顶距轴顶距离）

            A1.select2(False, Nothing)
            DL2.Select2(True, Nothing)
            DL3.Select2(True, Nothing)
            part.EditDelete()
            DL1.Select2(False, Nothing)
            构造线_new()

            Aline1.Select2(False, Nothing)
            Feature1 = 特征筋(筋厚度)
            face1 = Feature1.GetFaces

            edge1 = face1(2).getedges
            part.ClearSelection2(True)
            SelectionMgr.AddSelectionListObject(edge1(1), Nothing)
            SelectionMgr.AddSelectionListObject(edge1(3), Nothing)
            Feature2 = 特征圆角_new(筋顶圆角)



            edge2 = face1(0).getedges
            edge3 = face1(1).getedges
            part.ClearSelection2(True)
            SelectionMgr.AddSelectionListObject(edge2(0), Nothing)
            SelectionMgr.AddSelectionListObject(edge3(0), Nothing)
            Feature3 = 特征圆角_new(筋底圆角)


            Feature1.Select2(False, 4)
            Feature2.Select2(True, 4)
            Feature3.Select2(True, 4)
            基准轴featureX.Select2(True, 1)
            特征阵列_等间距(9)



            '画外筋条
            Dim Bline1 As SldWorks.SketchSegment
            Dim Bline2 As SldWorks.SketchSegment
            Dim Bline3 As SldWorks.SketchSegment
            Dim Bline4 As SldWorks.SketchSegment

            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)

            line4.Select2(True, Nothing)
            转换实体引用_new()
            DL1 = 获得sketchsegment根据name_new（"直线2"）

            line6.Select2(False, Nothing)
            转换实体引用_new()
            DL2 = 获得sketchsegment根据name_new（"直线4"）

            arc2.Select2(False, Nothing)
            转换实体引用_new()
            A1 = 获得sketchsegment根据name_new（"圆弧2"）

            line7.Select2(False, Nothing)
            转换实体引用_new()
            DL3 = 获得sketchsegment根据name_new（"直线6"）

            arc2圆角.Select2(False, Nothing)
            转换实体引用_new()
            A2 = 获得sketchsegment根据name_new（"圆弧4"）

            删除约束()

            part.ClearSelection2(True)
            P1 = 两点选一点(DL1.GetStartPoint2, DL1.GetEndPoint2, 1, 0)
            P2 = 两点选一点(A2.GetStartPoint2, A2.GetEndPoint2, 2, 0)
            Bline1 = SketchManager.CreateLine(P1.X, P1.Y, 0， P2.X, P2.Y, 0)

            P1 = 两点选一点(DL2.GetStartPoint2, DL2.GetEndPoint2, 2)
            Bline2 = SketchManager.CreateLine(P1.X, P1.Y, 0， P1.X + 扇叶高, P1.Y, 0)

            Bline3 = SketchManager.CreateLine(Bline2.GetEndPoint2.X, Bline2.GetEndPoint2.Y, 0， Bline2.GetEndPoint2.X, 扇叶内顶宽 / 2, 0)

            P1 = 两点选一点(DL1.GetStartPoint2, DL1.GetEndPoint2, 1, 0)
            Bline4 = SketchManager.CreateLine(Bline3.GetEndPoint2.X, Bline3.GetEndPoint2.Y, 0， P1.X, P1.Y, 0)

            P1 = Bline3.GetStartPoint2
            P1.Select2(False, 0)
            草图圆角_new(扇叶外顶圆角R)

            P1 = Bline3.GetEndPoint2
            P1.Select2(False, 0)
            草图圆角_new(扇叶内顶圆角R)

            DL1.Select2(False, 0)
            part.EditDelete()

            DL2.Select2(False, 0)
            A1.Select2(True, 0)
            DL3.Select2(True, 0)
            A2.Select2(True, 0)
            Bline2.Select2(True, 0)
            Bline3.Select2(True, 0)
            草图方法("固定")
            Bline1.Select2(False, 0)
            草图方法("水平")

            DisplayDimension = L1L2D_new(Bline3, Bline4, 0, -0.01, Bline3.GetEndPoint2)
            尺寸数值_new(PI * 扇叶内顶角角度 / 180)


            Feature4 = 特征拉伸(6, 外筋顶宽)
            face1 = Feature4.GetFaces()
            part.ClearSelection2(True)
            添加选择并标记(face1(2), 1, 1)
            添加选择并标记(face1(5), 2, 2)
            添加选择并标记(face1(6), 3, 2)
            Feature5 = 拔模(PI * 1 / 180)

            edge1 = face1(5).getedges
            edge2 = face1(6).getedges

            part.ClearSelection2(True)
            添加选择并标记(edge1(0))
            添加选择并标记(edge2(1))
            Feature6 = 特征圆角_new(外筋底圆角)

            edge3 = face1(2).getedges
            添加选择并标记(edge3(0))
            添加选择并标记(edge3(2))
            Feature7 = 特征圆角_new(外筋顶圆角)
            Feature4.Select2(False, 4)
            Feature5.Select2(True, 4)
            Feature6.Select2(True, 4)
            Feature7.Select2(True, 4)
            基准轴featureX.Select2(True, 1)
            特征阵列_等间距(9)






            '画铸件
            Dim 铸件宽度#
            铸件宽度 = 25
            铸件宽度 = 铸件宽度 / 1000
            Dim Cline1 As SldWorks.SketchSegment
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            SketchManager.InsertSketch(True)
            Cline1 = SketchManager.CreateLine(Aline1.GETENDPOINT2.X, -Aline1.GETENDPOINT2.Y, 0， Aline1.GETSTARTPOINT2.X, -Aline1.GETSTARTPOINT2.Y, 0)
            Cline1.Select2(False, Nothing)
            Feature1 = 特征筋(铸件宽度)
            Feature1.Select2(False, 4)
            基准轴featureX.Select2(True, 1)
            特征阵列_等间距(3)




            '画孔
            Dim 孔边长#, 中心距#
            孔边长 = 25
            中心距 = 110
            孔边长 = 孔边长 / 1000
            中心距 = 中心距 / 1000
            Dim Dline1 As SldWorks.SketchSegment
            face1 = Feature1.GetFaces()
            part.ClearSelection2(True)
            添加选择并标记(face1(0))
            SketchManager.InsertSketch(True)
            edge1 = face1(0).getedges
            part.ClearSelection2(True)

            添加选择并标记(edge1(1))
            转换实体引用_new()
            DL1 = 获得sketchsegment根据name_new（"直线2"）

            添加选择并标记(edge1(2))
            转换实体引用_new()
            A1 = 获得sketchsegment根据name_new（"圆弧2"）

            添加选择并标记(edge1(3))
            转换实体引用_new()
            DL2 = 获得sketchsegment根据name_new（"直线4"）
            删除约束()

            A1.select2(False, Nothing)
            草图方法("固定")




            P1 = 两点选一点(DL1.GetEndPoint2, DL1.GetStartPoint2, 2)
            P2 = 两点选一点(DL2.GetEndPoint2, DL2.GetStartPoint2, 2)
            Dline1 = SketchManager.CreateLine(P1.X, P1.Y, 0， P2.X, P2.Y, 0)
            Dline1.Select2(False, Nothing)
            草图方法("水平")
            P3 = SketchManager.CreatePoint(0, 0, 0)
            DisplayDimension = P1L1D_new(P3, Dline1, 0.01)
            尺寸数值_new(中心距)

            face1 = 旋转.GetFaces




            part.ClearSelection2(True)
            添加选择并标记(face1(52), 1, 1)
            Feature = 拉伸切除_new(4, 0) '切除到指定面
            Feature.Select2(False, 4)
            基准轴featureX.Select2(True, 1)
            特征阵列_等间距(3)



            Dim Eline1 As SldWorks.SketchSegment
            Dim Eline2 As SldWorks.SketchSegment
            Dim Eline3 As SldWorks.SketchSegment
            face1 = Feature1.GetFaces()
            part.ClearSelection2(True)
            添加选择并标记(face1(0))
            SketchManager.InsertSketch(True)
            edge1 = face1(0).getedges
            part.ClearSelection2(True)
            '遍历_测试(1, edge1, edge1.Count)
            添加选择并标记(edge1(0))
            转换实体引用_new()
            DL1 = 获得sketchsegment根据name_new（"直线2"）
            Eline1 = SketchManager.CreateLine(DL1.GetEndPoint2.X, DL1.GetEndPoint2.Y, 0， DL1.GetEndPoint2.X, DL1.GetEndPoint2.Y - 孔边长, 0)
            Eline2 = SketchManager.CreateLine(DL1.GetStartPoint2.X, DL1.GetStartPoint2.Y, 0， DL1.GetStartPoint2.X, DL1.GetStartPoint2.Y - 孔边长, 0)
            Eline3 = SketchManager.CreateLine(Eline1.GetEndPoint2.X, Eline1.GetEndPoint2.Y, 0， Eline2.GetEndPoint2.X, Eline2.GetEndPoint2.Y, 0)
            Feature = 拉伸切除_new(1, 0) '贯穿
            Feature.Select2(False, 4)
            基准轴featureX.Select2(True, 1)
            特征阵列_等间距(3)



            face1 = Feature.GetFaces
            face1(0).Select2(False, Nothing)
            face1(1).Select2(True, Nothing)
            SelectionSet = part.Extension.SaveSelection(True)

            Object数组1 = selection_set().aa
            Object数组2 = selection_set().bb

            part.ClearSelection2(True)
            Object数组1(0).Select2(False, Nothing)
            Object数组1(1).Select2(True, Nothing)
            MsgBox(666)





            属性设置("356.0-T6 永久成型铸件 (SS)")

            part.SaveAs3(read("dz1") + read("code") + read("dz2"), 0, 2)





            'A4P_new(dr("material"), dr("company"), dr("name"), dr("Code"))
            'myView = Draw.CreateDrawViewFromModelView3(dr("dz1") + dr("code") + dr("dz2"), "*右视", 0.07, 0.21, 0)
            'part = swapp.ActiveDoc
            'Draw = swapp.ActiveDoc
            'SelectionMgr = part.SelectionManager
            'part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            'part.Extension.SetUserPreferenceInteger(372, 204, 2)
            'part.Extension.SetUserPreferenceInteger(516, 2, 0)
            'part.Extension.SetUserPreferenceInteger(517, 208, 0)
            'part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            ''Dim myNote As Object


            '设置图纸比例_new(dr("proportion"))


            'part.ActivateView("工程图视图1")
            'Dim sss As SldWorks.SFSymbol
            'sss = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0.32, 0.24, 0, 0, 1, "", "", "", "", "", "12.5", "") '插入粗糙度符号
            'Annotation = sss.GetAnnotation()
            'Annotation.SetPosition2(0.17, 0.27, 0)


            '技术要求_new（0.06, 0.09， "技术要求"， "1.压铸制造；"， "2.表面光滑，内部组织致密均匀，去飞边；"， "3.未注圆角R0.5；"， "4.未注公差尺寸的极限偏差按GB/T1804-m级精度。"）



            'part.ClearSelection2(True)
            'part.ActivateSheet("图纸1")
            'part.ActivateView("工程图视图1")

            'part.SketchManager.CreateLine(0, -0.03, 0#, 0, 0.03, 0#)
            'myView = part.CreateSectionViewAt5(0.15, 0.21, 0, "A", 128, Nothing, 0) '插入剖视图
            ''part.InsertModelAnnotations3(0, 512 + 1 + 1024 + 2 + 4 + 8 + 32768 + 524288 + 32 + 1048576 + 131072 + 65536 + 16 + 64 + 16384 + 2048 + 8192 + 262144 + 128 + 4194304 + 4096 + 16777216 + 2097152 + 8388608 + 256, True, False, True, True) '插入零件尺寸,允许重复

            'part.InsertModelAnnotations3(0, 32864 + 2, True, True, True, True)
            'Note = myView.GetFirstNote
            'Annotation = Note.GetAnnotation()
            'Annotation.SetPosition2(0.15, 0.21 + 0.05, 0)
            'part.SaveAs3(dr("dz1") + dr("code") + dr("dz3"), 0, 2)
            ''swapp.ExitApp()


            read.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()

        End Sub



        '零件图模块
        Public Sub Round_table_new(Outer_diameter#, thickness#, Optional middle_hole_diameter_TolType% = 8, Optional middle_hole_diameter_TolMax# = 0, Optional middle_hole_diameter_TolMin# = 0, Optional middle_hole_diameter_TolMaxFit$ = "",
                                      Optional middle_hole_diameter_TolMinFit$ = "f8", Optional Slot_outer_diameter_Gtol$ = "<IGTOL-CONC>", Optional Slot_outer_diameter_Gtol_Value$ = "0.05", Optional Slot_outer_diameter_Gtol_datum$ = "A",
                                       Optional 图纸比例值# = 1) '外径#, 厚度#

            'Public Sub Round_table(Outer_diameter#, thickness#, middle_hole_diameter_TolType%, middle_hole_diameter_TolMax#, middle_hole_diameter_TolMin#, middle_hole_diameter_TolMaxFit$,
            '                 middle_hole_diameter_TolMinFit$, Slot_outer_diameter_Gtol$, Slot_outer_diameter_Gtol_Value$, Slot_outer_diameter_Gtol_datum$) '外径#, 厚度#
            Outer_diameter = Outer_diameter / 1000
            thickness = thickness / 1000
            middle_hole_diameter_TolMax = middle_hole_diameter_TolMax / 1000
            middle_hole_diameter_TolMin = middle_hole_diameter_TolMin / 1000

            初始设置_new（0）
            Dim ARC As SldWorks.SketchSegment
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            ARC = part.SketchManager.CreateCircleByRadius(0, 0, 0, Outer_diameter / 2)
            DisplayDimension = part.AddDimension2(-(Outer_diameter / 2), -(Outer_diameter / 2), 0)
            part.EditDimensionProperties2(middle_hole_diameter_TolType%, middle_hole_diameter_TolMax#, middle_hole_diameter_TolMin#, middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)



            'Dim myGtol As Object
            'Dim myAnno As SldWorks.Annotation
            'myGtol = part.InsertGtol()
            'myGtol.SetFrameSymbols2(1, Slot_outer_diameter_Gtol, True, "", False, "", "", "", "")
            'myGtol.SetFrameValues(1, Slot_outer_diameter_Gtol_Value$, "", Slot_outer_diameter_Gtol_datum, "", "")
            'myAnno = myGtol.GetAnnotation()
            'myAnno.SetPosition((Outer_diameter / 2), (Outer_diameter / 2), 0)
            'myAnno.SetLeader3(3, 0, True, False, False, False)



            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = middle_hole_diameter_TolType
            DimensionTolerance.SetFitValues(middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit)
            DisplayDimension.ShowTolParenthesis = True '显示括号
            'ARC.Select4(False, Nothing)

            If Not Slot_outer_diameter_Gtol = "" Then
                'P1 = part.SketchManager.CreatePoint((Outer_diameter / 2) * Cos(60 * PI / 180), (Outer_diameter / 2) * Sin(60 * PI / 180), 0)
                'P1.Select4(False, Nothing)

                ARC.Select4(False, Nothing)
                A1 = ARC
                A1.GetRadius()
                part.Extension.SelectByID2(ARC.GetName(), "SKETCHSEGMENT", A1.GetRadius * Cos(PI * 70 / 180), A1.GetRadius * Sin(PI * 70 / 180), 0, False, 0, Nothing, 0)
                Dim myGtol As SldWorks.Gtol
                'Dim myGtol As SldWorks.GtolClass
                Dim myAnno As SldWorks.Annotation
                myGtol = part.InsertGtol()
                myGtol.SetFrameSymbols2(1, Slot_outer_diameter_Gtol, True, "", False, "", "", "", "")
                myGtol.SetFrameValues(1, Slot_outer_diameter_Gtol_Value$, "", Slot_outer_diameter_Gtol_datum, "", "")
                myAnno = myGtol.GetAnnotation()
                myAnno.SetPosition(((Outer_diameter / 2) + 0.02 / 图纸比例值) * Cos(PI * 70 / 180), ((Outer_diameter / 2) + 0.02 / 图纸比例值) * Sin(PI * 70 / 180), 0)
                myAnno.SetLeader3(3, 0, True, False, False, False)
                'myAnno.SetLeaderAttachmentPointAtIndex(2, (Outer_diameter / 2) * Cos(10 * PI / 180), (Outer_diameter / 2) * Sin(10 * PI / 180), 0)
            End If
            sketch = part.SketchManager.ActiveSketch
            part.SketchManager.InsertSketch(True)
            part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, thickness, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸
        End Sub

        Public Sub 偏心圆凸台_new(直径#, 拉伸厚度#， Optional 相对X轴偏转角度# = 0, Optional 阵列数# = 1, Optional X偏心距# = 0， Optional 反向切除时的小圆直径# = 0, Optional 尺寸标注# = 1) '先画一个X偏心圆，然后以相对X轴偏转角度旋转该圆，再拉伸凸台，然后以原点为圆心阵列旋转该凸台实体
            直径 = 直径 / 1000
            拉伸厚度 = 拉伸厚度 / 1000
            X偏心距 = X偏心距 / 1000
            反向切除时的小圆直径 = 反向切除时的小圆直径 / 1000

            Dim arc1 As SldWorks.SketchArc
            Dim line01, arc1Segment As SldWorks.SketchSegment
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.02, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(X偏心距, 0, 0, 直径 / 2)
            arc1Segment = arc1

            If Not X偏心距 = 0 Then '标偏心距
                If 直径 = Max(X偏心距, 直径) Then
                    P1 = part.SketchManager.CreatePoint(X偏心距, 0, 0)
                    P2 = part.SketchManager.CreatePoint(0, 0, 0)
                    P1P2HD_new(P1, P2, P1, -0.02)
                End If

                Arcdimension_new(arc1, arc1.GetRadius * Sin(PI * 15 / 180), arc1.GetRadius * Cos(PI * 15 / 180), False) '标直径
            End If




            If 直径 = Max(X偏心距, 直径) Then '标中心距
                P1 = part.SketchManager.CreatePoint(直径 / 2 + X偏心距, 0, 0)
                If X偏心距 < 0 Then
                    P1YP2_P1P2_new(P1, -1.1 * 直径 / 2)
                Else
                    If 尺寸标注# = 1 Then
                        P1YP2_P1P2_new(P1, 1.3 * 直径 / 2)
                    End If

                End If

                旋转草图_new(line01, 相对X轴偏转角度)

            End If



            part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, 拉伸厚度, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴_new("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

            If X偏心距 < 0 Then '反向切除
                For i = 1 To 阵列数
                    line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.02, 0)
                    A1 = part.SketchManager.CreateCircleByRadius(X偏心距, 0, 0, 直径 / 2)
                    旋转草图_new(line01, 360 * (i - 1) / 阵列数)
                    part.FeatureCut(True, True, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
                Next
                A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 反向切除时的小圆直径 / 2)
                Arcdimension_new(A1, 0.01 * Cos(PI * 30 / 180), 0.01 * Sin(PI * 30 / 180))
                part.FeatureCut(True, True, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            End If

        End Sub

        Public Sub deflection_array_of_circular_holes_new(Array_number#, hole_number#, relative_Y_axis_deflection_angle#, hole_angle#， center_distance#, diameter#， Optional Phase_angle# = 0, Optional deflection_distance_Y# = 0， Optional 图纸比例值# = 1， Optional 尺寸方向% = 1)
            '阵列数#, 孔数#, 相对Y轴偏转角度#, 孔间角度#， 圆心距#, 直径#， 偏转距离Y#
            'Array number#, hole number#, relative Y axis deflection angle#, hole angle#, center distance#, diameter#, deflection distance Y#

            center_distance = center_distance / 1000
            diameter = diameter / 1000
            deflection_distance_Y = deflection_distance_Y / 1000





            Dim arc1 As SldWorks.SketchArc
            Dim line1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, arc2, line01, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置_new(1)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, center_distance, 0, diameter / 2)
            part.ViewZoomtofit2()
            arc1Segment = arc1




            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            arc1Segment.Select4(False, Nothing)
            line01.Select4(True, Nothing)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * relative_Y_axis_deflection_angle / 180)
            part.Extension.RotateOrCopy(True, hole_number - 1, False, 0, 0, 0, 0, 0, 1, PI * hole_angle / 180)
            part.ClearSelection2(True)
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i

            part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 0, deflection_distance_Y, 0)

            arc1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDiameterDimension2(arc1.GetCenterPoint2.x + arc1.GetRadius * Cos(60 * PI / 180) + 0.01 / 图纸比例值, arc1.GetCenterPoint2.y + arc1.GetRadius * Sin(60 * PI / 180) + 0.01 / 图纸比例值, 0)

            If Not hole_number = 1 Then
                part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, hole_number.ToString + "×" + "<MOD-DIAM>", "", True, "", "", "", False, 1, "")

            End If



            arc1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴_new("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(Array_number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


            'If deflection_distance_Y# = 0 Then
            '    arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, center_distance#)
            '    SketchSegment = arc1
            '    If SketchSegment Is Nothing Then
            '    Else
            '        SketchSegment.Select4(False, Nothing)
            '        DisplayDimension = part.AddDimension2((center_distance#) * 0.9 * Cos((140 + Phase_angle) * PI / 180), (center_distance#) * 0.9 * Sin((140 + Phase_angle) * PI / 180), 0)
            '        SketchSegment.Select4(False, Nothing)
            '        SketchManager.CreateConstructionGeometry() '设为构造线
            '    End If
            'End If
            If Not center_distance = 0 Then
                part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                P1 = part.SketchManager.CreatePoint(0, deflection_distance_Y, 0)
                P1.Select4(False, Nothing)
                辅助圆弧尺寸_new(P1, arc1.IGetCenterPoint2， 尺寸方向)
                part.SketchManager.InsertSketch(True)
                part.ViewZoomtofit2()
            End If


        End Sub


        Public Sub middle_hole2_new(相对Y轴偏转角度#, 直径#, 槽宽#, 左高#, 右高#， Optional slot_width_TolType% = 8, Optional slot_width_TolMax# = 0, Optional slot_width_TolMin# = 0, Optional slot_width_TolMaxFit$ = "H9", Optional slot_width_TolMinFit$ = "",
                                      Optional middle_hole_diameter_TolType% = 8, Optional middle_hole_diameter_TolMax# = 0, Optional middle_hole_diameter_TolMin# = 0, Optional middle_hole_diameter_TolMaxFit$ = "H8",
                                        Optional middle_hole_diameter_TolMinFit$ = "", Optional Datum$ = "A"， Optional 图纸比例值# = 1) '圆底到槽顶高

            直径 = 直径 / 1000
            槽宽 = 槽宽 / 1000
            左高 = 左高 / 1000
            右高 = 右高 / 1000
            slot_width_TolMax = slot_width_TolMax / 1000
            slot_width_TolMin = slot_width_TolMin / 1000
            middle_hole_diameter_TolMax = middle_hole_diameter_TolMax / 1000
            middle_hole_diameter_TolMin = middle_hole_diameter_TolMax / 1000






            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3 As SldWorks.SketchLine
            Dim point0 As SldWorks.SketchPoint
            Dim Dline1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, line2Segment, line3Segment, SketchSegment, Dline1Segment, Dline2Segment, Dline3Segment, line01 As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint
            Dim Dpoint1, Dpoint2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            line1 = part.SketchManager.CreateLine(0.001, 0.001, 0, 0.001, 0.002, 0)
            line2 = part.SketchManager.CreateLine(0.002, 0.002, 0, 0.003, 0.002, 0)
            line3 = part.SketchManager.CreateLine(0.003, 0.004, 0, 0.003, 0.003, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 直径 / 2)
            point0 = part.SketchManager.CreatePoint(0, -直径 / 2, 0)
            Dline1 = part.SketchManager.CreateCenterLine(0, -直径 / 2, 0, 0.001, -直径 / 2, 0)
            Dline1Segment = Dline1
            arc1Segment = arc1
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3


            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直
            line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1Segment.Select4(False, Nothing)
            part.AddDimension2(-直径 / 2 / 2, -直径 / 2 / 2, 0)
            line2Segment.Select4(False, Nothing)
            part.AddVerticalDimension2((line2.GetStartPoint2.X + line2.GetEndPoint2.X) / 2, (line2.GetStartPoint2.Y + line2.GetEndPoint2.Y) / 2, 0)
            point0.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            Dline1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = line1.GetEndPoint2()
            point2 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line2.GetEndPoint2()
            point2 = line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            '注意添加尺寸的顺序,要求添加尺寸后草图形状结构不发生变化
            point1 = line3.GetStartPoint2
            point1.Select4(False, Nothing)
            Dline1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X * 2, point1.Y - 直径 / 2, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 右高

            point1 = line1.GetEndPoint2
            point1.Select4(False, Nothing)
            Dline1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X * 2, point1.Y - 直径 / 2, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 左高

            point1 = line2.GetEndPoint2
            point1.Select4(False, Nothing)
            line1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X - 槽宽 / 2, point1.Y + 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽宽

            point2 = arc1.GetCenterPoint2
            line3Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽宽 / 2
            part.Extension.SelectByID2(DisplayDimension.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            part.EditDelete()

            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 直径 / 2, 0) '修剪到最近端
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 直径 / 2, 0)

            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch

            'Sketch.GetSketchContours()
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            part.SketchConstraintsDelAll()


            '添加尺寸注释
            'part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            point1 = line1.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(0, -直径 / 2, 0, 0.001, -直径 / 2, 0)
            Dline1Segment = Dline1
            Dline1Segment.Select4(False, Nothing)
            point1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(（槽宽 / 2） + 0.01 / 图纸比例值, 0, 0)



            If Not 左高 = 右高 Then
                point1 = line3.GetStartPoint2
                point2 = line1.GetEndPoint2
                P1P2VD_new(point1, point2, point1, 0.01 / 图纸比例值)
            End If

            'Dline1Segment.Select4(False, Nothing)
            'point1.Select4(True, Nothing)
            'DisplayDimension = part.AddDimension2(直径 / 3, 0, 0)



            point1 = line2.GetStartPoint2
            point2 = line2.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            Dline3Segment = Dline1
            Dline3Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2((point1.X + point2.X) / 2, (point1.Y + point2.Y) / 2 + 0.01 / 图纸比例值, 0)
            part.EditDimensionProperties2(slot_width_TolType, slot_width_TolMax#, slot_width_TolMin#, slot_width_TolMaxFit, slot_width_TolMinFit, True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            'DisplayDimension.ShowTolParenthesis = True '显示括号
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = slot_width_TolType
            DimensionTolerance.SetFitValues(slot_width_TolMaxFit, slot_width_TolMinFit)
            DisplayDimension.ShowTolParenthesis = True '显示括号


            arc1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-0.5 * 直径 / 2, 0.5 * 直径 / 2, 0)
            DisplayDimension.Diametric = True
            part.EditDimensionProperties2(middle_hole_diameter_TolType%, middle_hole_diameter_TolMax#, middle_hole_diameter_TolMin#, middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            'DisplayDimension.ShowTolParenthesis = True '显示括号
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = middle_hole_diameter_TolType%
            DimensionTolerance.SetFitValues(middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$)
            DisplayDimension.ShowTolParenthesis = True '显示括号

            'part.ClearSelection2(True)
            'MsgBox(arc1Segment.GetName)
            If Datum = "" Then
            Else
                part.Extension.SelectByID2(arc1Segment.GetName(), "SKETCHSEGMENT", arc1.GetRadius * Cos(PI * (110 - 相对Y轴偏转角度) / 180), arc1.GetRadius * Sin(PI * (110 - 相对Y轴偏转角度) / 180), 0, False, 0, Nothing, 0)
                Dim myDatumTag As SldWorks.DatumTag
                part.ShowNamedView2("*前视", 1)
                myDatumTag = part.InsertDatumTag2()
                myDatumTag.SetLabel(Datum) '插入基准
                myDatumTag.SetDisplayStyle(False, 2)
                myDatumTag.FilledTriangle = True
                myDatumTag.Shoulder = True
            End If



            旋转草图_new(line01, 相对Y轴偏转角度)


            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            part.SelectionManager.EnableContourSelection = False
        End Sub '高为孔底到槽顶的距离
        Public Sub 偏心阵列小圆底槽口_new(阵列数#, 相对Y轴偏转角度#, 槽间角度#, 偏转距离X#, 偏转距离Y#, 槽口数#, 槽口底圆直径#, 外径#, 槽圆心到外圆高#, 槽口宽#, Optional 尺寸标注# = 0)

            'Dim A1 As SldWorks.SketchArc
            'Dim L1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, arc2, line01, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置_new(1)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            A1 = part.SketchManager.CreateCircleByRadius(0, 外径 / 2 - 槽圆心到外圆高, 0, 槽口底圆直径 / 2)
            L1 = part.SketchManager.CreateLine(0.0001, 0.0001, 0, 0.0001, 0.0002, 0)
            part.ViewZoomtofit2()
            arc1Segment = A1
            line1Segment = L1
            line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc2.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = L1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc2.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = L1.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直


            line01.Select4(False, Nothing)
            line1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽口宽 / 2

            point1 = L1.GetEndPoint2()
            point2 = A1.GetCenterPoint2
            If point1.Y < point2.Y Then
                line1Segment.Select4(False, Nothing)
                SketchManager.SketchTrim(0, 槽口宽 / 2, 外径 / 2 - 槽圆心到外圆高, 0) '修剪到最近端
            End If

            line01.Select4(False, Nothing)
            line1Segment.SelectChain(True, Nothing)
            part.SketchMirror()

            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            'arc1Segment.Select4(False, Nothing)
            'SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            arc2.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i




            If 尺寸标注 = 1 Then
                part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
                P1YP2_P1P2_new(L1.GetStartPoint2, 0.01)
                Arcdimension_new(A1, -0.01)
                part.ViewZoomtofit2()
            End If



            旋转草图_new(line01, 相对Y轴偏转角度)
            part.Extension.RotateOrCopy(True, 槽口数 - 1, False, 0, 0, 0, 0, 0, 1, PI * 槽间角度 / 180)
            偏移草图_new(偏转距离X, 偏转距离Y)

            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴_new("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

        End Sub
        Public Sub array_small_round_bottomsolt_new(阵列数#, 相对Y轴偏转角度#, 槽间角度#, 偏转距离X#, 偏转距离Y#, 槽口数#, 槽口底圆直径#, 外径#, 槽圆心到外圆高#, 槽口宽#)

            'Dim A1 As SldWorks.SketchArc
            'Dim L1 As SldWorks.SketchLine
            'Dim A1Segment, L1Segment, L01Segment, SketchSegment As SldWorks.SketchSegment
            'Dim SketchSegments() As Object
            'Dim Sketch As SldWorks.Sketch
            'Dim [Boolean] As Boolean
            'Dim P1, P2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置_new(1)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            L01Segment = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            A1 = part.SketchManager.CreateCircleByRadius(0, 外径 / 2 - 槽圆心到外圆高, 0, 槽口底圆直径 / 2)
            L1 = part.SketchManager.CreateLine(0.0001, 0.0001, 0, 0.0001, 0.0002, 0)
            part.ViewZoomtofit2()
            A1Segment = A1
            L1Segment = L1
            L01Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            A1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            A2Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            A2Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            P1 = L1.GetStartPoint2()
            P1.Select4(False, Nothing)
            A2Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            P1 = L1.GetEndPoint2()
            P1.Select4(False, Nothing)
            A1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            L1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直


            L01Segment.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽口宽 / 2

            P1 = L1.GetEndPoint2()
            P2 = A1.GetCenterPoint2
            If P1.Y < P2.Y Then
                L1Segment.Select4(False, Nothing)
                SketchManager.SketchTrim(0, 槽口宽 / 2, 外径 / 2 - 槽圆心到外圆高, 0) '修剪到最近端
            End If

            L01Segment.Select4(False, Nothing)
            L1Segment.SelectChain(True, Nothing)
            part.SketchMirror()

            A1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            'arc1Segment.Select4(False, Nothing)
            'SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            A2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            '旋转槽口草图
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            'P1 = L1.GetStartPoint2
            'P1.Select4(False, Nothing)
            'MsgBox(666)
            P1YP2_P1P2_new(L1.GetStartPoint2, 0.01)
            Arcdimension_new(A1, -0.01)



            part.ViewZoomtofit2()

            SketchSegments = sketch.GetSketchSegments
            points = sketch.GetSketchPoints2
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            'MsgBox(666)
            L01Segment.Select2(True, 2)
            L01Segment.Select2(True, 2) '设定标记




            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)
            part.Extension.RotateOrCopy(True, 槽口数 - 1, False, 0, 0, 0, 0, 0, 1, PI * 槽间角度 / 180)

            part.ClearSelection2(True)
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 偏转距离X, 偏转距离Y, 0)

            L1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴_new("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径# / 2 - 槽圆心到外圆高#)
            SketchSegment = A2
            SketchSegment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2((外径# / 2 - 槽圆心到外圆高#) * 0.9 * Cos(150 * PI / 180), (外径# / 2 - 槽圆心到外圆高#) * 0.9 * Sin(150 * PI / 180), 0)
            SketchSegment.Select4(False, Nothing)
            SketchManager.CreateConstructionGeometry() '设为构造线
            SketchSegment.Select4(False, Nothing)
            part.UnblankSketch() '显示

        End Sub
        Public Sub 双矩形槽_new(阵列数#, 角度#, 两槽顶宽#, 两槽腰宽#, 腰顶高or腰顶长#, 槽腰长#, 底圆角R1#, 顶圆角R2#, 外径#, Optional 双层槽% = 0, Optional 双层槽腰差# = 0)
            'Array number#, angle#, two slot top width#, two slot waist width#, waist top height#, slot waist length#,
            'bottom Round corner R1#, top round corner R2#, outer diameter#,Double Floor groove, double groove waist Less#
            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3, line4, line00, line01 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, line3Segment, line4Segment, arc1Segment, SketchSegment, line00Segment, line01Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            If 腰顶高or腰顶长 < 槽腰长 Then
                腰顶高or腰顶长 = Sqrt(Pow(外径, 2) - Pow(两槽顶宽, 2)) / 2 - 腰顶高or腰顶长
            End If




            初始设置_new(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.5, 0)
            line00Segment = line00
            line00.Angle = PI * 角度 / 180
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            'line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.002, 0, 0)
            'line01Segment = line01
            'line01Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            初始设置_new(0)
            line1 = part.SketchManager.CreateLine(两槽顶宽 / 2, 腰顶高or腰顶长 - 槽腰长, 0, 两槽腰宽 / 2, 腰顶高or腰顶长 - 槽腰长, 0)
            初始设置_new(1)
            line2 = part.SketchManager.CreateLine(两槽腰宽 / 2, 腰顶高or腰顶长 - 槽腰长, 0, 两槽腰宽 / 2, 腰顶高or腰顶长, 0)
            line3 = part.SketchManager.CreateLine(两槽腰宽 / 2, 腰顶高or腰顶长, 0, 两槽顶宽 / 2, 腰顶高or腰顶长, 0)
            line4 = part.SketchManager.CreateLine(0.002, 0, 0, 0.002, 0.001, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            part.ViewZoomtofit2()
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3
            line4Segment = line4
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            line2Segment.Select4(True, Nothing)
            line3Segment.Select4(True, Nothing)
            草图方法_new("固定")
            point1 = line1.GetEndPoint2()
            point2 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            草图方法_new("固定")


            line1Segment.Select4(False, Nothing)
            草图方法_new("水平")

            point1 = line4.GetStartPoint2()
            point2 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            草图方法_new("合并")
            point1 = line4.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法_new("重合")
            line4Segment.Select4(False, Nothing)
            草图方法_new("垂直")

            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法_new("重合")

            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            A1 = part.SketchManager.CreateFillet(顶圆角R2, 1)

            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法_new("镜像")

            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            A2 = part.SketchManager.CreateFillet(底圆角R1, 1)



            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            If 双层槽 = 0 Then
                P1 = part.SketchManager.CreatePoint(0, 0, 0)
                删除约束_new()
                P1YP2_P1P2_new(line4.GetEndPoint2, 0.04, line4.GetEndPoint2)
                P1YP2_P1P2_new(line2.GetStartPoint2, 0.01, line2.GetStartPoint2)

                P1P2VD_new(line1.GetEndPoint2, line3.GetStartPoint2, line1.GetEndPoint2, 0.01)
                P1P2VD_new(line3.GetEndPoint2, P1, line1.GetEndPoint2, 0.1)

                Arcdimension_new(A1)
                Arcdimension_new(A2)
                'P1YP2_P1P2(line2.GetEndPoint2, -0.01, line2.GetEndPoint2)
                'P1YP2_P1P2(line2.GetEndPoint2, -0.01, line2.GetEndPoint2)
                'MsgBox(111)
            Else

                P1P2HD_new(line3.GetEndPoint2, line3.GetStartPoint2, line3.GetStartPoint2, -0.01)
                part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
                P1 = part.SketchManager.CreatePoint(line2.GetEndPoint2.x, line2.GetEndPoint2.y - 双层槽腰差, 0)
                P1P2VD_new(line2.GetEndPoint2, P1, line2.GetEndPoint2, 0.02)
                part.ViewZoomtofit2()

            End If











            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴_new("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub
        Public Sub Square_hole_new(Centerdistance_or_verticalsidelength#, diameter#, horizontal_side_length#, Optional verticalsidelength% = 0, Optional 尺寸标注# = 1, Optional Array_number# = 1， Optional DimensionProperties% = 0) '中心距#, 直径#, 横向边长#

            Centerdistance_or_verticalsidelength = Centerdistance_or_verticalsidelength / 1000
            diameter = diameter / 1000
            horizontal_side_length = horizontal_side_length / 1000






            If verticalsidelength = 1 Then
                Centerdistance_or_verticalsidelength = Sqrt(Pow(Centerdistance_or_verticalsidelength / 2, 2) + Pow(horizontal_side_length / 2, 2))
            End If



            Dim arc1 As SldWorks.SketchArc
            Dim line1Segment, sketchsegment As SldWorks.SketchSegment
            Dim point1 As SldWorks.SketchPoint
            Dim Dpoint0, Dpoint1, Dpoint2, Dpoint3 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            SketchManager.CreateCenterRectangle(0, 0, 0, horizontal_side_length / 2, Centerdistance_or_verticalsidelength * Sin(Acos(horizontal_side_length / 2 / Centerdistance_or_verticalsidelength)), 0)
            part.ClearSelection2(True)
            part.Extension.SelectByID2("Point1", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            Dpoint0 = point1
            part.Extension.SelectByID2("Point5", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            Dpoint1 = point1
            arc1 = SketchManager.CreateCircleByRadius(point1.X, point1.Y, point1.Z, diameter / 2)
            sketchsegment = arc1
            part.Extension.SelectByID2("Point2", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            Dpoint2 = point1
            SketchManager.CreateCircleByRadius(point1.X, point1.Y, point1.Z, diameter / 2)
            part.Extension.SelectByID2("Point3", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            Dpoint3 = point1
            SketchManager.CreateCircleByRadius(point1.X, point1.Y, point1.Z, diameter / 2)
            part.Extension.SelectByID2("Point4", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            SketchManager.CreateCircleByRadius(point1.X, point1.Y, point1.Z, diameter / 2)

            If 尺寸标注 = 1 Then

                If verticalsidelength = 1 Then
                    Dpoint1.Select4(False, Nothing)
                    Dpoint2.Select4(True, Nothing)
                    part.AddDimension2((Dpoint1.X + Dpoint2.X) / 2 + 0.01, (Dpoint1.Y + Dpoint2.Y) / 2, 0)
                Else
                    '辅助圆弧尺寸(Dpoint0, Dpoint2)
                End If

                Dpoint1.Select4(False, Nothing)
                Dpoint3.Select4(True, Nothing)
                part.AddDimension2((Dpoint1.X + Dpoint3.X) / 2, (Dpoint1.Y + Dpoint3.Y) / 2 - 0.01, 0)
                part.Extension.EditDimensionProperties(DimensionProperties, 0, 0, "", "", True, 9, 2, True, 12, 12, "", "", True, "", "", "", False, 1, "")
                'MsgBox(666)
                sketchsegment.Select4(False, Nothing)
                part.AddDiameterDimension2(arc1.GetCenterPoint2.x + （arc1.GetRadius + 0.01） * Cos(60 * PI / 180), arc1.GetCenterPoint2.y + （arc1.GetRadius + 0.01） * Sin(60 * PI / 180), 0)
                part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, (4 * Array_number).ToString + "×" + "<MOD-DIAM>", "", True, "", "", "", False, 1, "")
            Else
            End If



            part.ClearSelection2(True)
            part.Extension.SelectByID2("Line1", "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
            line1Segment = SelectionMgr.GetSelectedObject6(1, -1)
            line1Segment.SelectChain(False, Nothing)
            part.EditDelete() '删除对角线

            'FeatureManager.FeatureCut4(True, False, True, 1, 0, 0.01, 0.01, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
            'part.Extension.SelectByID2("Arc1", "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
            'part.Extension.SelectByID2("Arc2", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            'part.Extension.SelectByID2("Arc3", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            'part.Extension.SelectByID2("Arc4", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            'MsgBox(666)
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴_new("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(Array_number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏



            If 尺寸标注 = 1 Then

                If verticalsidelength = 1 Then
                Else
                    辅助圆弧尺寸_new(Dpoint0, Dpoint2, -1)
                End If
            Else
            End If
        End Sub
        Public Sub Trapezoidal_hole_new(类型$, 相对Y轴偏转角度#, 槽口数#, 外径#, 内径#, 槽间距离#, 圆角R1#, 圆角R2#, 顶宽#, 底宽#, 腰角度#) '梯形孔
            'Type$, relative Y-axis deflection angle#, slot number#, outer diameter#, inner diameter#, distance between slots#, round corner R1#, round corner R2#, top width#, bottom width#, waist angle#
            Dim arc1, arc2 As SldWorks.SketchArc
            Dim Dline1, Dline2 As SldWorks.SketchLine
            Dim line1, line2, line01, line02 As SldWorks.SketchLine
            Dim arc1Segment, arc2Segment, line1Segment, line2Segment, SketchSegment, line01Segment, line02Segment, line00, Dline1Segment, Dline2Segment, Dline3Segment, Dline4Segment, rounded1, rounded2 As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line1 = part.SketchManager.CreateLine(0.001, 0.001, 0, 0.001, 0.002, 0) '竖直
            line2 = part.SketchManager.CreateLine(0.002, 0.002, 0, 0.003, 0.002, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 内径 / 2)
            arc1Segment = arc1
            arc2Segment = arc2
            line1Segment = line1
            line2Segment = line2
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc2Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定


            point1 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc2Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合

            point1 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc2Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合

            '画辅助线
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, -0.0002, 0)
            line00.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.0002, 0)
            line02 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.0002, 0, 0)
            line01Segment = line01
            line02Segment = line02

            point1 = line01.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line02.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定



            If 类型 = "平行" Then
                line01Segment.Select4(False, Nothing)
                part.SketchAddConstraints("sgFIXED") '固定
                line01Segment.Select4(False, Nothing)
                line02Segment.Select4(True, Nothing)
                DisplayDimension = part.AddHorizontalDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = (PI / 180) * (360 / 槽口数)

                line00.Select4(False, Nothing)
                line1Segment.Select4(True, Nothing)
                DisplayDimension = part.AddHorizontalDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = 槽间距离 / 2

                line02Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                part.SketchAddConstraints("sgPARALLEL") '平行
                line02Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                DisplayDimension = part.AddHorizontalDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = -槽间距离 / 2



            ElseIf 类型 = "上下底长" Then
                line1Segment.Select4(False, Nothing)
                part.SketchConstraintsDel(0, "sgVERTICAL2D") '删除竖直约束


                line1Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                line00.Select4(True, Nothing)
                part.SketchAddConstraints("sgSYMMETRIC") '对称

                point1 = line1.GetStartPoint2()
                point2 = line2.GetStartPoint2()
                point1.Select4(False, Nothing)
                point2.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = 底宽

                point1 = line1.GetEndPoint2()
                point2 = line2.GetEndPoint2()
                point1.Select4(False, Nothing)
                point2.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = 顶宽
            ElseIf 类型 = "腰角度" Then
                line1Segment.Select4(False, Nothing)
                part.SketchConstraintsDel(0, "sgVERTICAL2D") '删除竖直约束


                line1Segment.Select4(False, Nothing)
                line01Segment.Select4(True, Nothing)
                part.SketchAddConstraints("sgCOLINEAR") '共线
                line2Segment.Select4(False, Nothing)
                line02Segment.Select4(True, Nothing)
                part.SketchAddConstraints("sgCOLINEAR") '共线
                line1Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = PI * 腰角度 / 180
                line1Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                line00.Select4(True, Nothing)
                part.SketchAddConstraints("sgSYMMETRIC") '对称


            End If

            part.ClearSelection2(True)
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端
            arc2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -内径 / 2, 0)


            point1 = line1.GetEndPoint2()
            point2 = line2.GetEndPoint2()
            P1 = part.SketchManager.CreatePoint(point1.X, point1.Y, 0)
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            rounded1 = part.SketchManager.CreateFillet(圆角R1, 1)

            point1 = line1.GetStartPoint2()
            point2 = line2.GetStartPoint2()
            P2 = part.SketchManager.CreatePoint(point1.X, point1.Y, 0)
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            rounded2 = part.SketchManager.CreateFillet(圆角R2, 1)

            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i



            If 类型 = "平行" Then
                point1 = line1.GetStartPoint2
                point2 = line1.GetEndPoint2
                Dline1 = part.SketchManager.CreateCenterLine(-point1.X, -point1.Y, 0, -point1.X, -point1.Y + 0.001, 0)
                Dline2 = part.SketchManager.CreateCenterLine(point1.X, -point1.Y, 0, point1.X, -point1.Y + 0.001, 0)
                Dline1Segment = Dline1
                Dline2Segment = Dline2
                Dline1Segment.Select4(False, Nothing)
                Dline2Segment.Select4(True, Nothing)
                part.AddDimension2(0, (-point1.Y - point2.Y) / 2, 0)

                arc1Segment.Select4(False, Nothing)
                part.AddDimension2(-0.9 * arc1.GetRadius, 0.3 * arc1.GetRadius, 0)
                arc2Segment.Select4(False, Nothing)
                part.AddDimension2(-0.8 * arc2.GetRadius, 0.4 * arc2.GetRadius, 0)


                If Not rounded1 Is Nothing Then
                    arc1 = rounded1
                    rounded1.Select4(False, Nothing)
                    part.AddDimension2(arc1.GetCenterPoint2.X, arc1.GetCenterPoint2.Y, 0)

                End If

                If Not rounded2 Is Nothing Then

                    arc2 = rounded2
                    rounded2.Select4(False, Nothing)
                    part.AddDimension2(arc2.GetCenterPoint2.X, arc2.GetCenterPoint2.Y, 0)
                End If


            End If

            If 类型 = "上下底长" Then

                P1YP2_P1P2_new(P1, 0.005)
                P1YP2_P1P2_new(P2, -0.005)
                rounded1.Select4(False, Nothing)
                A1 = rounded1
                part.AddDimension2(A1.IGetCenterPoint2.X, A1.IGetCenterPoint2.Y, 0)
                rounded2.Select4(False, Nothing)
                A1 = rounded2
                part.AddDimension2(A1.IGetCenterPoint2.X, A1.IGetCenterPoint2.Y, 0)

                arc1Segment.Select4(False, Nothing)
                part.AddDimension2(-0.9 * arc1.GetRadius, 0.3 * arc1.GetRadius, 0)
                arc2Segment.Select4(False, Nothing)
                part.AddDimension2(-0.8 * arc2.GetRadius, 0.4 * arc2.GetRadius, 0)

            End If

            'If 类型 = "腰角度" Then
            '    point1 = line1.GetStartPoint2
            '    point2 = line1.GetEndPoint2
            '    Dline1 = part.SketchManager.CreateCenterLine(-point1.X, -point1.Y, 0, -point1.X, -point1.Y + 0.001, 0)
            '    Dline2 = part.SketchManager.CreateCenterLine(point1.X, -point1.Y, 0, point1.X, -point1.Y + 0.001, 0)
            '    Dline1Segment = Dline1
            '    Dline2Segment = Dline2
            '    Dline1Segment.Select4(False, Nothing)
            '    Dline2Segment.Select4(True, Nothing)
            '    part.AddDimension2(0, (-point1.Y - point2.Y) / 2, 0)

            '    arc1Segment.Select4(False, Nothing)
            '    part.AddDimension2(-0.9 * arc1.GetRadius, 0.3 * arc1.GetRadius, 0)
            '    arc2Segment.Select4(False, Nothing)
            '    part.AddDimension2(-0.8 * arc2.GetRadius, 0.4 * arc2.GetRadius, 0)

            '    arc1 = rounded1
            '    rounded1.Select4(False, Nothing)
            '    part.AddDimension2(arc1.GetCenterPoint2.X, arc1.GetCenterPoint2.Y, 0)

            '    arc2 = rounded2
            '    rounded2.Select4(False, Nothing)
            '    part.AddDimension2(arc2.GetCenterPoint2.X, arc2.GetCenterPoint2.Y, 0)

            'End If














            line1Segment.SelectChain(False, Nothing)
            If 类型 = "上下底长" Then
                P1.Select4(True, Nothing)
                P2.Select4(True, Nothing)
            End If
            line00.Select4(True, Nothing)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)

            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)


            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴_new("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

            'part.Extension.SelectByID2("Line2", "SKETCHSEGMENT", 0.0680535689107398, 0.0671366716345467, 0.0249999999999204, False, 0, Nothing, 0)
            'part.Extension.MoveOrCopy False, 1, False, 0, 0, 0, -0.003, 0.003, 0

        End Sub
        Public Sub 圆弧矩形凸台_new(直径#， 凸台高#, 凸台宽#， 倒角1#, 倒角2#, 相对Y轴偏转角度#， 阵列数#， 拉伸厚度#, Optional 尺寸标注% = 1)
            'Diameter#, Boss Height#, Boss Width#, Chamfering 1#, Chamfering 2#, Relative Y-axis Deflection Angle#,
            'Array Number#, Stretching Thickness#, Optional Secondary Use% = 0
            Dim X1#, Y1#, X2#, Y2#
            X1# = 凸台宽# / 2
            X2 = -凸台宽# / 2
            Y1# = 凸台高#
            Y2# = 凸台高#

            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, line2Segment, line3Segment, SketchSegment, line01 As SldWorks.SketchSegment
            Dim point0, point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)

            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 直径 / 2)
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            草图方法_new("固定")
            line1 = part.SketchManager.CreateLine(X1#, Y1, 0, X2#, Y2#, 0)
            line1Segment = line1
            point0 = line1.GetStartPoint2
            point1 = line1.GetEndPoint2
            point1.Select4(False, Nothing)
            point0.Select4(True, Nothing)
            草图方法_new("固定")
            初始设置_new（1）
            line2 = part.SketchManager.CreateLine(X2#, Y2#, 0, X2#, Y2# + 0.001, 0)
            line2Segment = line2
            line2Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            point1 = line2.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法_new("重合")
            line3 = part.SketchManager.CreateLine(X1#, Y1, 0, X1#, Y1 + 0.001, 0)
            line3Segment = line3
            line3Segment.Select4(False, Nothing)
            草图方法_new("垂直")
            point1 = line3.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法_new("重合")

            point0 = line1.GetStartPoint2
            point1 = line1.GetEndPoint2
            point1.Select4(False, Nothing)
            SketchSegment = part.SketchManager.CreateChamfer(2, 倒角1, 倒角1)
            point0.Select4(False, Nothing)
            SketchSegment1 = part.SketchManager.CreateChamfer(2, 倒角2, 倒角2)


            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -直径 / 2, 0) '修剪到最近端

            删除约束_new()
            If 尺寸标注 = 1 Then
                P1XP2_P1P2_new(line1.GetStartPoint2, -0.01)
                P1YP2_P1P2_new(line1.GetStartPoint2, 0.01)
                If Not SketchSegment Is Nothing Then
                    SketchSegment.Select4(False, Nothing)
                    part.AddDimension2(line1.GetStartPoint2.x, line1.GetStartPoint2.y, 0)
                End If
                If Not SketchSegment1 Is Nothing Then
                    SketchSegment1.Select4(False, Nothing)
                    part.AddDimension2(line1.GetEndPoint2.x, line1.GetEndPoint2.y, 0)
                End If
            End If

            旋转草图_new(line01, 相对Y轴偏转角度)

            part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, 拉伸厚度, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴_new("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub












































        '辅助小模块
        Public Sub 编辑尺寸属性_new(slot_width_TolType#， slot_width_TolMaxFit$, slot_width_TolMinFit$, Optional slot_width_TolMax# = 0, Optional slot_width_TolMin# = 0, Optional 前缀$ = "", Optional 后缀$ = "", Optional 显示括号 As Boolean = True)
            'part.EditDimensionProperties2(slot_width_TolType, slot_width_TolMax#, slot_width_TolMin#, slot_width_TolMaxFit, slot_width_TolMinFit, True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            part.Extension.EditDimensionProperties(slot_width_TolType, slot_width_TolMax#, slot_width_TolMin#, slot_width_TolMaxFit, slot_width_TolMinFit, True, 9, 2, True, 12, 12, 前缀$, 后缀$, True, "", "", "", False, 1, "")
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = slot_width_TolType
            DimensionTolerance.SetFitValues(slot_width_TolMaxFit, slot_width_TolMinFit)
            DisplayDimension.ShowTolParenthesis = True '显示括号
        End Sub

        Public Sub 属性设置(材料$, Optional name$ = "", Optional Code$ = "", Optional material$ = "")
            part.SetUserPreferenceToggle(swUserPreferenceToggle_e.swViewDisplayHideAllTypes, True) '隐藏所有
            part.SetMaterialPropertyName2("默认", "C:/Program Files/SOLIDWORKS Corp/SOLIDWORKS/lang/chinese-simplified/sldmaterials/solidworks materials.sldmat", 材料)
            Dim swMass As MassProperty
            part.Extension.SelectByID2(part.GetTitle, "COMPONENT", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Component2 = SelectionMgr.GetSelectedObject5(1)
            swMass = part.Extension.CreateMassProperty

            '设置属性
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", name)
            cusproper.Set2("代号", Code)
            cusproper.Set2("材料", material)
        End Sub




        Public Sub End_new(dz$, Optional 材料$ = "")
            If 材料 = "" Then
            Else
                part.SetMaterialPropertyName2("默认", "C:/Program Files/SOLIDWORKS Corp/SOLIDWORKS/lang/chinese-simplified/sldmaterials/solidworks materials.sldmat", 材料$)
            End If
            part.SetUserPreferenceToggle(swUserPreferenceToggle_e.swViewDisplayHideAllTypes, True) '隐藏所有类型
            part.SaveAs3(dz, 0, 8)
        End Sub



        'Public Function 基准面(参考基准面$, 约束#, 距离或角度#, X#, Y#, Z#) As SldWorks.Feature
        '    Dim refplane As SldWorks.Feature
        '    If 参考基准面 = "前视" Then
        '        part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
        '        refplane = part.FeatureManager.InsertRefPlane(约束, 距离或角度#, 0， 0， 0， 0)
        '    ElseIf 参考基准面 = "上视" Then
        '        part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
        '        refplane = part.FeatureManager.InsertRefPlane(约束, 距离或角度#, 0， 0， 0， 0)
        '    ElseIf 参考基准面 = "右视" Then
        '        part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
        '        refplane = part.FeatureManager.InsertRefPlane(约束, 距离或角度#, 0， 0， 0， 0)
        '    ElseIf 参考基准面 = "" Then
        '        part.Extension.SelectByID2("", "FACE", X, Y, Z, False, 0, Nothing, 0)
        '        refplane = part.FeatureManager.InsertRefPlane(约束, 距离或角度#, 0， 0， 0， 0)
        '    End If

        '    基准面 = refplane
        ''End Function
        Public Function 基准轴_new(基准$) As SldWorks.Feature
            Dim AXIS As SldWorks.Feature
            Dim line1 As SldWorks.SketchLine
            Dim line1Segment As SldWorks.SketchSegment
            If 基准 = "Z" Then
                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, -0.01, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If
            If 基准 = "Y" Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.01, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If
            If 基准 = "X" Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.01, 0, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If
            AXIS = SelectionMgr.GetSelectedObject6(1, -1)
            基准轴_new = AXIS
        End Function
        Public Function 偏心基准轴_new(基准$, X#, Y#) As SldWorks.Feature
            Dim AXIS As SldWorks.Feature
            Dim line1 As SldWorks.SketchLine
            Dim line1Segment As SldWorks.SketchSegment
            If 基准 = "X偏心" Then
                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(X#, 0, 0, X#, -0.01, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If
            If 基准 = "Y偏心" Then
                part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(0, Y#, 0, -0.01, Y#, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If

            AXIS = SelectionMgr.GetSelectedObject6(1, -1)
            偏心基准轴_new = AXIS
        End Function
        Public Function 初始设置_new(类型#)
            If 类型 = 0 Then '关闭捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
                part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
                swapp.SetUserPreferenceIntegerValue(SwConst.swUserPreferenceIntegerValue_e.swEdgesTangentEdgeDisplay, 3) '切边不可见
                swapp.SetUserPreferenceIntegerValue(swUserPreferenceIntegerValue_e.swTangentEdgeDisplayDefault, swDisplayTangentEdges_e.swTangentEdgesHidden) '工程图切边不可见
            ElseIf 类型 = 1 Then '激活捕捉,打开端点和草图点
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, False) '靠近
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
                part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 2) '长度精度保留小数点后3位
                swapp.SetUserPreferenceIntegerValue(SwConst.swUserPreferenceIntegerValue_e.swEdgesTangentEdgeDisplay, 3) '切边不可见
                swapp.SetUserPreferenceIntegerValue(swUserPreferenceIntegerValue_e.swTangentEdgeDisplayDefault, swDisplayTangentEdges_e.swTangentEdgesHidden) '工程图切边不可见
            ElseIf 类型 = 2 Then '激活捕捉,打开所有
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, True) '靠近
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
                part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
                swapp.SetUserPreferenceIntegerValue(SwConst.swUserPreferenceIntegerValue_e.swEdgesTangentEdgeDisplay, 3) '切边不可见
                swapp.SetUserPreferenceIntegerValue(swUserPreferenceIntegerValue_e.swTangentEdgeDisplayDefault, swDisplayTangentEdges_e.swTangentEdgesHidden) '工程图切边不可见
            ElseIf 类型 = 3 Then '激活捕捉,打开前三个
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, False) '靠近
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
                part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
                swapp.SetUserPreferenceIntegerValue(SwConst.swUserPreferenceIntegerValue_e.swEdgesTangentEdgeDisplay, 3) '切边不可见
                swapp.SetUserPreferenceIntegerValue(swUserPreferenceIntegerValue_e.swTangentEdgeDisplayDefault, swDisplayTangentEdges_e.swTangentEdgesHidden) '工程图切边不可见
            End If

        End Function
        Public Function 草图方法_new(类型$)
            If 类型 = "固定" Then
                part.SketchAddConstraints("sgFIXED")
            ElseIf 类型 = "水平" Then
                part.SketchAddConstraints("sgHORIZONTAL2D")
            ElseIf 类型 = "点水平排布" Then
                part.SketchAddConstraints("sgHORIZONTALPOINTS2D")
            ElseIf 类型 = "点竖直排布" Then
                part.SketchAddConstraints("sgVERTICALPOINTS2D")
            ElseIf 类型 = "垂直" Then
                part.SketchAddConstraints("sgVERTICAL2D")
            ElseIf 类型 = "共线" Then
                part.SketchAddConstraints("sgCOLINEAR")
            ElseIf 类型 = "全等" Then
                part.SketchAddConstraints("sgCORADIAL")
            ElseIf 类型 = "相互垂直" Then
                part.SketchAddConstraints("sgPERPENDICULAR")
            ElseIf 类型 = "平行" Then
                part.SketchAddConstraints("sgPARALLEL")
            ElseIf 类型 = "相切" Then
                part.SketchAddConstraints("sgTANGENT")
            ElseIf 类型 = "同心" Then
                part.SketchAddConstraints("sgCONCENTRIC")
            ElseIf 类型 = "重合" Then
                part.SketchAddConstraints("sgCOINCIDENT")
            ElseIf 类型 = "对称" Then
                part.SketchAddConstraints("sgSYMMETRIC")
            ElseIf 类型 = "相等" Then
                part.SketchAddConstraints("sgSAMELENGTH")
            ElseIf 类型 = "合并" Then
                part.SketchAddConstraints("sgMERGEPOINTS")
            ElseIf 类型 = "相等曲率" Then
                part.SketchAddConstraints("sgEQUALCURV3DALIGN")
            ElseIf 类型 = "曲线长度相等" Then
                part.SketchAddConstraints("sgSAMECURVELENGTH")
            ElseIf 类型 = "中点" Then
                part.SketchAddConstraints("sgATMIDDLE")
            ElseIf 类型 = "镜像" Then
                part.SketchMirror()
            End If

        End Function
        Public Function index_String_new(str$, index%) As String
            Dim strResult As String
            Dim seed As Integer
            Dim i As Integer
            i = 0
            strResult = ""
            Do Until i = index
                If i = 0 Then
                    seed = 1
                Else
                    seed = InStr(seed, str, "\") + 1
                End If
                strResult = Microsoft.VisualBasic.Left(str, InStr(seed, str, "\") - 1)

                If i = 0 Then
                Else
                    strResult = Microsoft.VisualBasic.Right(strResult, Len(strResult) - InStrRev(strResult, "\", -1))
                End If
                i += 1
            Loop
            If index = 0 Then
                index_String_new = str
            Else
                index_String_new = strResult
            End If
        End Function
        Public Function Arcdimension_new(Arc As SldWorks.SketchArc, Optional Y向偏移# = 0, Optional X向偏移# = 0, Optional Diametric As Boolean = True) As SldWorks.DisplayDimension
            A1Segment = Arc
            If Not Arc Is Nothing Then
                A1Segment.Select4(False, Nothing)
                Arcdimension_new = part.AddDimension2(Arc.GetCenterPoint2.X + X向偏移#, Arc.GetCenterPoint2.Y + Y向偏移#, 0)

                If Diametric = True Then
                    Arcdimension_new.Diametric = False
                    Arcdimension_new.Diametric = Diametric
                Else
                    Arcdimension_new.Diametric = True
                    Arcdimension_new.Diametric = Diametric
                End If

                Arcdimension_new = Arcdimension_new
            End If

        End Function
        Public Function P1YP2_P1P2_new(point1 As SldWorks.SketchPoint, Y向偏移#, Optional 参考点 As SldWorks.SketchPoint = Nothing， Optional 右视% = 0) As SldWorks.DisplayDimension
            'part.ViewZoomTo2(0， 0， 0， 0.01， 0.01， 0)
            DP1 = part.SketchManager.CreatePoint(-point1.X, point1.Y, 0)
            'If DP1 Is Nothing Then
            '    part.Extension.SelectByID2("", "SKETCHPOINT", -point1.X, point1.Y, 0, False, 0, Nothing, 0)
            '    DP1 = SelectionMgr.GetSelectedObject6(1, -1)
            '    DP1.Select4(False, Nothing)
            'Else
            '    DP1.Select4(False, Nothing)
            'End If
            'MsgBox(666)
            DP1.Select4(False, Nothing)
            point1.Select4(True, Nothing)

            If 右视 = 1 Then

                If Not 参考点 Is Nothing Then
                    P1YP2_P1P2_new = part.AddDimension2(0, 参考点.Y + Y向偏移#, -（参考点.X）)
                Else
                    P1YP2_P1P2_new = part.AddDimension2(0, DP1.Y + Y向偏移#, -（DP1.X）)
                End If
            Else
                If Not 参考点 Is Nothing Then
                    P1YP2_P1P2_new = part.AddDimension2(参考点.X, 参考点.Y + Y向偏移#, 0)
                Else
                    P1YP2_P1P2_new = part.AddDimension2(DP1.X, DP1.Y + Y向偏移#, 0)
                End If
            End If



            P1YP2_P1P2_new.CenterText = True
            'part.ViewZoomtofit2()
        End Function
        Public Function P1XP2_P1P2_new(point1 As SldWorks.SketchPoint, X向偏移#, Optional 右视% = 0) As SldWorks.DisplayDimension
            DP1 = part.SketchManager.CreatePoint(point1.X, -point1.Y, 0)
            DP1.Select4(False, Nothing)
            point1.Select4(True, Nothing)
            If 右视 = 1 Then
                P1XP2_P1P2_new = part.AddDimension2(0, DP1.Y, -（DP1.X + X向偏移#）)
                P1XP2_P1P2_new.CenterText = True
            Else
                P1XP2_P1P2_new = part.AddDimension2(DP1.X + X向偏移#, DP1.Y, 0)
                P1XP2_P1P2_new.CenterText = True
            End If

        End Function
        Public Function P1OP2_P1XP3_P2P3_new(X#, Y#, Y向偏移#) As SldWorks.DisplayDimension '根据两线段的一顶点画出与X轴对称的一点和原点对称的一点并添加距离尺寸
            '初始设置（0）
            'P1 = L2_y.GetEndPoint2()
            'P2 = L1_x.GetStartPoint2()
            DP1 = part.SketchManager.CreatePoint(X, -Y, 0)
            DP2 = part.SketchManager.CreatePoint(-X, -Y, 0)
            DP1.Select4(False, Nothing)
            DP2.Select4(True, Nothing)
            P1OP2_P1XP3_P2P3_new = part.AddDimension2(X, -Y + Y向偏移#, 0)
            P1OP2_P1XP3_P2P3_new.CenterText = True
        End Function
        Public Function L1D_new(L1 As SldWorks.SketchLine, 偏移#, Optional 反向% = 0) As SldWorks.DisplayDimension
            '初始设置（0）
            'DL1Segment = part.SketchManager.CreateCenterLine(L1.GetStartPoint2.X, -L1.GetStartPoint2.Y, 0, L1.GetEndPoint2.X, -L1.GetEndPoint2.Y, 0)
            'DP1 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            'P1.Select4(False, Nothing)
            L1.Select2(False, Nothing)
            If 反向 = 0 Then

                L1D_new = part.AddDimension2(L1.GetStartPoint2.X + 偏移# * Cos(两点角度_new（L1.GetStartPoint2, L1.GetEndPoint2） + PI * 90 / 180), L1.GetStartPoint2.Y + 偏移# * Sin(两点角度_new（L1.GetStartPoint2, L1.GetEndPoint2） + PI * 90 / 180), 0)
            Else

                L1D_new = part.AddDimension2(L1.GetStartPoint2.X + 偏移# * Cos(两点角度_new（L1.GetStartPoint2, L1.GetEndPoint2） + PI * 3 / 2), L1.GetStartPoint2.Y + 偏移# * Sin(两点角度_new（L1.GetStartPoint2, L1.GetEndPoint2） + PI * 3 / 2), 0)
            End If
            L1D_new.CenterText = True
        End Function
        Public Function P1L1D_new(P1 As SldWorks.SketchPoint, L1 As SldWorks.SketchLine, 偏移#, Optional 反向% = 0) As SldWorks.DisplayDimension '根据一线段一顶点画出与X轴对称的一线段一顶点并添加距离尺寸
            '初始设置（0）
            'DL1Segment = part.SketchManager.CreateCenterLine(L1.GetStartPoint2.X, -L1.GetStartPoint2.Y, 0, L1.GetEndPoint2.X, -L1.GetEndPoint2.Y, 0)
            'DP1 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            P1.Select4(False, Nothing)
            L1.Select2(True, Nothing)
            If 反向 = 0 Then

                P1L1D_new = part.AddDimension2(P1.X + 偏移# * Cos(两点角度_new（L1.GetStartPoint2, L1.GetEndPoint2）), P1.Y + 偏移# * Sin(两点角度_new（L1.GetStartPoint2, L1.GetEndPoint2）), 0)
            Else

                P1L1D_new = part.AddDimension2(P1.X + 偏移# * Cos(两点角度_new（L1.GetStartPoint2, L1.GetEndPoint2） + PI), P1.Y + 偏移# * Sin(两点角度_new（L1.GetStartPoint2, L1.GetEndPoint2） + PI), 0)
            End If
            P1L1D_new.CenterText = True
        End Function
        Public Function P1L1XP2L2_P2L2_new(P1 As SldWorks.SketchPoint, L1 As SldWorks.SketchLine, Y向偏移#) As SldWorks.DisplayDimension '根据一线段一顶点画出与X轴对称的一线段一顶点并添加距离尺寸
            '初始设置（0）
            DL1Segment = part.SketchManager.CreateCenterLine(L1.GetStartPoint2.X, -L1.GetStartPoint2.Y, 0, L1.GetEndPoint2.X, -L1.GetEndPoint2.Y, 0)
            DP1 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            DP1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            P1L1XP2L2_P2L2_new = part.AddDimension2(DP1.X, DP1.Y + Y向偏移#, 0)
            P1L1XP2L2_P2L2_new.CenterText = True
        End Function
        Public Function P1XP2_P1OP3_P2P3_new(P1 As SldWorks.SketchPoint, X向偏移#) As SldWorks.DisplayDimension '根据一点画出与Y轴对称的一点和与原点对称的一点和，并添加距离尺寸
            '初始设置（0）
            DP1 = part.SketchManager.CreatePoint(-P1.X, P1.Y, 0)
            DP2 = part.SketchManager.CreatePoint(-P1.X, -P1.Y, 0)
            DP1.Select4(False, Nothing)
            DP2.Select4(True, Nothing)
            P1XP2_P1OP3_P2P3_new = part.AddDimension2(DP1.X + X向偏移#, DP1.Y, 0)
            P1XP2_P1OP3_P2P3_new.CenterText = True
        End Function
        Public Function P1YP2_P2_new(point1 As SldWorks.SketchPoint) As SldWorks.SketchPoint
            P1YP2_P2_new = part.SketchManager.CreatePoint(-point1.X, point1.Y, 0)
        End Function
        Public Function P1XP2_P2_new(point1 As SldWorks.SketchPoint) As SldWorks.SketchPoint
            P1XP2_P2_new = part.SketchManager.CreatePoint(point1.X, -point1.Y, 0)
        End Function
        Public Function P10P2_P2_new(point1 As SldWorks.SketchPoint) As SldWorks.SketchPoint
            P10P2_P2_new = part.SketchManager.CreatePoint(-point1.X, -point1.Y, 0)
        End Function
        Public Function P1P2VD_new(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint, Optional 参考点 As SldWorks.SketchPoint = Nothing, Optional 相对参考点X向偏移# = 0) As SldWorks.DisplayDimension
            'part.ViewZoomTo2(0， 0， 0， 0.01， 0.01， 0)
            DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            If DL1Segment Is Nothing Then
                DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X - 0.001, point1.Y, 0)
            End If
            DL1Segment.Select4(False, Nothing)
            草图方法_new（"固定"）
            DL1Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            If Not 参考点 Is Nothing Then
                P1P2VD_new = part.AddDimension2(参考点.X + 相对参考点X向偏移, point1.Y, 0)
            Else
                P1P2VD_new = part.AddDimension2(point1.X + 相对参考点X向偏移, point1.Y, 0)
            End If
            P1P2VD_new.CenterText = True
            'part.ViewZoomtofit2()
        End Function

        Public Function L1VD(LINE As SldWorks.SketchLine, Optional 参考点 As SldWorks.SketchPoint = Nothing, Optional 相对参考点X向偏移# = 0, Optional 相对参考点Y向偏移# = 0) As SldWorks.DisplayDimension
            'part.ViewZoomTo2(0， 0， 0， 0.01， 0.01， 0)
            'DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            'If DL1Segment Is Nothing Then
            '    DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X - 0.001, point1.Y, 0)
            'End If
            LINE.Select2(False, 0)
            If Not 参考点 Is Nothing Then
                L1VD = part.AddVerticalDimension2(参考点.X + 相对参考点X向偏移, 参考点.Y + 相对参考点Y向偏移, 0)
            Else
                L1VD = part.AddVerticalDimension2(参考点.X + 相对参考点X向偏移, 参考点.Y + 相对参考点Y向偏移, 0)
            End If
            L1VD.CenterText = True
            'part.ViewZoomtofit2()
        End Function
        Public Function P1P2HD_new(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint, Optional 参考点 As SldWorks.SketchPoint = Nothing, Optional 相对参考点Y向偏移# = 0) As SldWorks.DisplayDimension

            DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            If DL1Segment Is Nothing Then
                DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X - 0.001, point1.Y, 0)
            End If
            DL1Segment.Select4(False, Nothing)
            草图方法_new（"固定"）
            DL1Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)

            If Not 参考点 Is Nothing Then
                P1P2HD_new = part.AddDimension2(point1.X, 参考点.Y + 相对参考点Y向偏移, 0)
            Else
                P1P2HD_new = part.AddDimension2(point1.X, point1.Y + 相对参考点Y向偏移, 0)
            End If

            P1P2HD_new.CenterText = True
        End Function

        Public Function P1P2D_new(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint, Optional 参考点 As SldWorks.SketchPoint = Nothing, Optional 相对P1P2垂直向偏移# = 0， Optional 右视% = 0) As SldWorks.DisplayDimension

            'DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            'If DL1Segment Is Nothing Then
            '    DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X - 0.001, point1.Y, 0)
            'End If
            'DL1Segment.Select4(False, Nothing)
            '草图方法（"固定"）
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            'MsgBox(两点角度（point1， point2） * 180 / PI)

            If 右视 = 1 Then
                If Not 参考点 Is Nothing Then
                    P1P2D_new = part.AddDimension2(0, 参考点.Y + 相对P1P2垂直向偏移 * Sin(两点角度_new（point1， point2） + 90 * PI / 180), -（参考点.X + 相对P1P2垂直向偏移 * Cos(两点角度_new（point1， point2） + 90 * PI / 180)）)
                Else
                    P1P2D_new = part.AddDimension2(0, point1.Y + 相对P1P2垂直向偏移 * Sin(两点角度_new（point1， point2） + 90 * PI / 180), -（point1.X + 相对P1P2垂直向偏移 * Cos(两点角度_new（point1， point2） + 90 * PI / 180)）)
                End If
            Else
                If Not 参考点 Is Nothing Then
                    P1P2D_new = part.AddDimension2(参考点.X + 相对P1P2垂直向偏移 * Cos(两点角度_new（point1， point2） + 90 * PI / 180), 参考点.Y + 相对P1P2垂直向偏移 * Sin(两点角度_new（point1， point2） + 90 * PI / 180), 0)
                Else
                    P1P2D_new = part.AddDimension2(point1.X + 相对P1P2垂直向偏移 * Cos(两点角度_new（point1， point2） + 90 * PI / 180), point1.Y + 相对P1P2垂直向偏移 * Sin(两点角度_new（point1， point2） + 90 * PI / 180), 0)
                End If
            End If

            P1P2D_new.CenterText = True
        End Function

        Public Function L1L2D_new(line1 As SldWorks.SketchLine, line2 As SldWorks.SketchLine, Optional Y向偏移# = 0, Optional X向偏移# = 0, Optional 参考点 As SldWorks.SketchPoint = Nothing) As SldWorks.DisplayDimension '参考点line1.getstartpoint
            line1.Select2(False, 1)
            line2.Select2(True, 1)

            If 参考点 Is Nothing Then
                L1L2D_new = part.AddDimension2(line1.GetStartPoint2.X + X向偏移, line1.GetStartPoint2.Y + Y向偏移#, 0)
            Else
                L1L2D_new = part.AddDimension2(参考点.X + X向偏移, 参考点.Y + Y向偏移#, 0)
            End If

            L1L2D_new.CenterText = True
        End Function

        'Public Function L1L2ANGLE(line1 As SldWorks.SketchLine, line2 As SldWorks.SketchLine, Optional Y向偏移# = 0, Optional X向偏移# = 0) As SldWorks.DisplayDimension '参考点line1.getstartpoint
        '    line1.Select2(False, 1)
        '    line2.Select2(True, 1)
        '    L1YL2_L1L2 = part.AddDimension2(line1.GetStartPoint2.X + X向偏移, line1.GetStartPoint2.Y + Y向偏移#, 0)
        '    L1YL2_L1L2.CenterText = True
        'End Function

        Public Function L1YL2_L2_new(line1 As SldWorks.SketchLine) As SldWorks.SketchLine '获得对称线
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                If SketchSegment.GetType = 0 Then '0表示线段
                    If SketchSegment.GetStartPoint2.Y = line1.GetStartPoint2.Y And SketchSegment.GetStartPoint2.X = -line1.GetStartPoint2.X Then
                        L1YL2_L2_new = SketchSegment '获得Line1的对称线
                    End If
                End If
            Next i
        End Function

        Public Function A1YA2_A1A2_new(arc1 As SldWorks.SketchArc, arc2 As SldWorks.SketchArc, Optional Y向偏移# = 0, Optional X向偏移# = 0, Optional firstendall% = 0, Optional 引线状态% = 3, Optional 参考点 As SldWorks.SketchPoint = Nothing) As SldWorks.DisplayDimension '参考点line1.getstartpoint
            arc1.Select2(False, 1)
            arc2.Select2(True, 1)
            If Not 参考点 Is Nothing Then
                A1YA2_A1A2_new = part.AddDimension2(参考点.X + X向偏移, 参考点.Y + Y向偏移#, 0)
            Else
                A1YA2_A1A2_new = part.AddDimension2(arc1.GetCenterPoint2.X + X向偏移, arc1.GetCenterPoint2.Y + Y向偏移#, 0)
            End If

            A1YA2_A1A2_new.CenterText = True
            Dimension = A1YA2_A1A2_new.GetDimension2(0)
            If firstendall = 1 Then
                Dimension.SetArcEndCondition(firstendall, 引线状态)
            ElseIf firstendall = 2 Then
                Dimension.SetArcEndCondition(firstendall, 引线状态)
            ElseIf firstendall = 3 Then
                Dimension.SetArcEndCondition(1, 引线状态)
                Dimension.SetArcEndCondition(2, 引线状态)
            End If

        End Function

        Public Function A1YA2_A2_new(arc1 As SldWorks.SketchArc) As SldWorks.SketchArc
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                If SketchSegment.GetType = 1 Then '1表示圆弧
                    If SketchSegment.GetCenterPoint2.Y = arc1.GetCenterPoint2.Y And SketchSegment.GetCenterPoint2.X = -arc1.GetCenterPoint2.X Then
                        A1YA2_A2_new = SketchSegment
                    End If
                End If
            Next i
        End Function

        Public Function 辅助圆弧尺寸_new(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint， Optional 方向# = 1) As SldWorks.DisplayDimension
            'part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            'part.ClearSelection2(True)
            'part.SketchManager.InsertSketch(True)
            'MsgBox(两点距离(point1, point2))
            SketchSegment = part.SketchManager.CreateArc(point1.X, point1.Y, 0#,
                                                             point1.X + 两点距离_new(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) - PI * 20 / 180),
                                                             point1.Y + 两点距离_new(point1, point2) * Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) - PI * 20 / 180), 0#,
                                                             point1.X + 两点距离_new(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) + PI * 20 / 180),
                                                             point1.Y + 两点距离_new(point1, point2) * Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) + PI * 20 / 180), 0#, 1)
            'SketchSegment = part.SketchManager.CreateArc(point1.X, point1.Y, 0#, point1.X + 两点距离(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X) - PI * 10 / 180)), Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X) - PI * 10 / 180)), 0#, point1.X + 两点距离(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X) + PI * 10 / 180)), Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X) + PI * 10 / 180)), 0#, -1)

            SketchSegment.Select4(False, Nothing)
            SketchManager.CreateConstructionGeometry() '设为构造线
            SketchSegment.Select4(False, Nothing)
            If 方向 = 1 Then
                辅助圆弧尺寸_new = part.AddDimension2(
         point1.X + 0.8 * 两点距离_new(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) - PI * 10 / 180),
         point1.Y + 0.8 * 两点距离_new(point1, point2) * Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) - PI * 10 / 180), 0#)
            Else
                辅助圆弧尺寸_new = part.AddDimension2(
         point1.X + 0.8 * 两点距离_new(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) + PI * 10 / 180),
         point1.Y + 0.8 * 两点距离_new(point1, point2) * Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) + PI * 10 / 180), 0#)
            End If


            辅助圆弧尺寸_new.CenterText = True

            SketchSegment.Select4(False, Nothing)
            part.UnblankSketch() '显示
        End Function

        Public Function 两点距离_new(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint) As Double

            两点距离_new = Sqrt(Pow(point1.X - point2.X, 2) + Pow(point1.Y - point2.Y, 2))

        End Function

        Public Function 两点角度_new(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint) As Double

            两点角度_new = Atan2((point2.Y - point1.Y), (point2.X - point1.X)）

        End Function
        Public Function 取号_new(code$) As String
            '取号器
            Dim str As String
            Dim i As Integer
            i = 1
            str = "001.sldprt"
            Do Until Not (System.IO.File.Exists("E:\works\generator_parts_library\rotor_lamination\" + code + str))
                i += 1
                str = "00" + i.ToString() + ".sldprt"
                str = Right(str, 10)
            Loop
            str = code + str
            Len(code)
            str = Left(str, Len(code) + 3)
            取号_new = str
        End Function
        Public Sub 删除约束_new()
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
        End Sub
        Public Sub 固定点_new（point1 As SldWorks.SketchPoint）
            point1.Select2(False, Nothing)
            草图方法_new（"固定"）
        End Sub
        Public Sub 旋转草图默认_new(偏转角度#)
            part.ClearSelection2(True)
            'line01.Select4(False, Nothing)
            sketch = SketchManager.ActiveSketch
            points = sketch.GetSketchPoints2
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select2(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 偏转角度 / 180)
        End Sub
        Public Sub 旋转草图_new(中心线 As SldWorks.SketchLine, 偏转角度#)
            part.ClearSelection2(True)
            'line01.Select4(False, Nothing)
            sketch = SketchManager.ActiveSketch
            points = sketch.GetSketchPoints2
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select2(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            SketchSegment = 中心线
            SketchSegment.Select2(True, 2)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 偏转角度 / 180)
        End Sub
        Public Function 获得sketchsegment根据name_new(name$) As SldWorks.SketchSegment '画矩形时获得线段
            part.ClearSelection2(True)
            'line01.Select4(False, Nothing)
            sketch = SketchManager.ActiveSketch
            points = sketch.GetSketchPoints2
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                'MsgBox(SketchSegment.name)
                '[Boolean] = SketchSegment.Select2(True, Nothing) : Debug.Assert([Boolean])
                If SketchSegment.GetName = name Then

                    获得sketchsegment根据name_new = SketchSegment
                End If
            Next i
            '获得sketchsegment = SketchSegment

        End Function
        Public Sub 偏移草图_new(偏移距离X#, 偏移距离Y#)
            part.ClearSelection2(True)
            'line01.Select4(False, Nothing)
            sketch = SketchManager.ActiveSketch
            points = sketch.GetSketchPoints2
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select2(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            'SketchSegment = 中心线
            'SketchSegment.Select2(True, 2)
            part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 偏移距离X, 偏移距离Y, 0)
        End Sub
        Public Function 拉伸切除_new(方向一切除类型%， 方向一给定深度#， Optional 方向一切换成方向二 As Boolean = False， Optional 反向切除 As Boolean = False， Optional 方向二切除类型% = 0， Optional 方向二给定深度# = 0， Optional 单向 As Boolean = True
                         ) As SldWorks.Feature
            part.FeatureManager.FeatureCut4(单向, 反向切除, 方向一切换成方向二, 方向一切除类型%， 方向二切除类型%， 方向一给定深度#， 方向二给定深度#, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
            拉伸切除_new = SelectionMgr.GetSelectedObject6(1, -1)


        End Function

        Public Function 特征拉伸(方向一切除类型%， 方向一给定深度#， Optional 方向一切换成方向二 As Boolean = False， Optional 反向切除 As Boolean = False， Optional 方向二切除类型% = 0， Optional 方向二给定深度# = 0， Optional 单向 As Boolean = True
                         ) As SldWorks.Feature
            'part.FeatureManager.FeatureCut4(单向, 反向切除, 方向一切换成方向二, 方向一切除类型%， 方向二切除类型%， 方向一给定深度#， 方向二给定深度#, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
            特征拉伸 = part.FeatureManager.FeatureExtrusion3(单向, 反向切除, 方向一切换成方向二, 方向一切除类型%， 方向二切除类型%， 方向一给定深度#， 方向二给定深度#, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸
            'SelectionMgr.GetSelectedObject6(1, -1)


        End Function

        Public Function 拔模(angle#)

            拔模 = part.FeatureManager.InsertMultiFaceDraft(angle, False, False, 0, False, False)

        End Function

        Public Sub 添加选择并标记(对象 As Object， Optional 索引号% = 0， Optional 标记% = 0)
            SelectionMgr.AddSelectionListObject(对象, Nothing)
            SelectionMgr.SetSelectedObjectMark(索引号%， 标记%， Nothing)
        End Sub
        Public Function 基准面_new(line1 As SldWorks.SketchSegment, sketch As SldWorks.Feature, 视图面$) As SldWorks.Feature
            part.Extension.SelectByID2(视图面 + "基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2(line1.GetName + "@" + sketch.Name, "EXTSKETCHSEGMENT", 0, 0, 0, True, 1, Nothing, 0)
            基准面_new = part.FeatureManager.InsertRefPlane(1, 0, 4, 0, 0, 0)
        End Function
        Public Function 基准面P1L1_new(line1 As SldWorks.SketchSegment, point As SldWorks.SketchPoint) As SldWorks.Feature
            point.Select2(False, 0)
            line1.Select2(True, 1)
            基准面P1L1_new = part.FeatureManager.InsertRefPlane(4, 0, 2, 0, 0, 0)
        End Function
        Public Sub 构造线_new()
            part.SketchManager.CreateConstructionGeometry()
        End Sub

        Public Sub 合并点(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint)
            point1.Select2(False, 0)
            point2.Select2(True, 0)
            草图方法("合并")

        End Sub
        Public Sub 合并两点(p1 As SldWorks.SketchPoint, p2 As SldWorks.SketchPoint)
            p1.Select2(False, 0)
            p2.Select2(True, 0)
            草图方法("合并")

        End Sub

        Public Sub 放大视图(百分比%)
            For i = 1 To 百分比
                part.ViewZoomin()
            Next

        End Sub

        Public Function 圆心起点终点画弧(point1x#, point1y#, point1z#, point2x#, point2y#, point2z#, point3x#, point3y#, point3z#, Optional 方向% = -1) As SldWorks.SketchArc
            圆心起点终点画弧 = part.SketchManager.CreateArc(point1x#, point1y#, point1z#, point2x#, point2y#, point2z#, point3x#, point3y#, point3z#, 方向)

        End Function
        Public Function 扫描切除_new() As SldWorks.Feature

            'Dim FeatureManager As Object
            FeatureManager = part.FeatureManager
            Dim swFeatData As Object
            swFeatData = FeatureManager.CreateDefinition(SwConst.swFeatureNameID_e.swFmSweepCut)
            swFeatData.AdvancedSmoothing = False
            swFeatData.AlignWithEndFaces = 1
            swFeatData.AssemblyFeatureScope = True
            swFeatData.AutoSelect = True
            swFeatData.AutoSelectComponents = True
            swFeatData.D1ReverseTwistDir = False
            swFeatData.Direction = -1
            swFeatData.EndTangencyType = 0
            swFeatData.FeatureScope = True
            swFeatData.MaintainTangency = False
            swFeatData.MergeSmoothFaces = True
            swFeatData.PathAlignmentType = 0
            swFeatData.PropagateFeatureToParts = False
            swFeatData.StartTangencyType = 0
            swFeatData.ThinFeature = False
            swFeatData.ThinWallType = 0
            swFeatData.TwistControlType = 0
            swFeatData.SetTwistAngle(0)
            swFeatData.SetWallThickness(True, 0)
            扫描切除_new = FeatureManager.CreateFeature(swFeatData)
        End Function
        Public Function 扫描拉伸_new(Optional 方向# = 1) As SldWorks.Feature
            FeatureManager = part.FeatureManager
            Dim swFeatData As Object
            swFeatData = FeatureManager.CreateDefinition(SwConst.swFeatureNameID_e.swFmSweep)
            swFeatData.AdvancedSmoothing = False
            swFeatData.AlignWithEndFaces = 0
            swFeatData.AutoSelect = True
            swFeatData.D1ReverseTwistDir = False
            swFeatData.Direction = 方向#
            swFeatData.EndTangencyType = 0
            swFeatData.FeatureScope = True
            swFeatData.MaintainTangency = False
            swFeatData.Merge = True
            swFeatData.MergeSmoothFaces = True
            swFeatData.PathAlignmentType = 10
            swFeatData.StartTangencyType = 0
            swFeatData.ThinFeature = False
            swFeatData.ThinWallType = 0
            swFeatData.TwistControlType = 0
            swFeatData.SetTwistAngle(0)
            swFeatData.SetWallThickness(True, 0)
            扫描拉伸_new = FeatureManager.CreateFeature(swFeatData)
        End Function


        Public Function Ratio_of_two_numbers_new(fz#， fm#) As String   '两数之比
            Dim fz1, fm1 As Double
            Dim fs As String
            fz1 = fz ： fm1 = fm
            Do
                If fz1 < fm1 Then fm1 -= fz1
                If fz1 > fm1 Then fz1 -= fm1
            Loop Until fz1 = fm1 '约分bai
            fz /= fz1
            fm /= fm1
            fs = fz & ":" & fm '此处的FZ为约分后的分子,FM为分母
            Ratio_of_two_numbers_new = fs
        End Function

        Public Function 索引字符串_new(str$, Optional 分隔符$ = "\") As Object()
            Dim strs() As Object
            索引字符串_new = Split(str$, 分隔符$)
            '索引字符串 = 索引字符串
            '次序 = 次序 - 1
            '索引字符串 = strs(次序)
        End Function

        'Public Function 数组(索引号%) As Object()
        '    数组 = 数组(索引号% - 1)
        'End Function


        Public Sub 设置图纸比例_new(图纸比例$)
            Dim Sheet1 As SldWorks.Sheet '图纸对象
            swapp = CreateObject("Sldworks.application")
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            Dim SheetPr() As Double
            SheetPr = Sheet1.GetProperties2()

            Dim aaa As Object()
            aaa = 索引字符串_new(图纸比例$, ":")
            SheetPr(2) = aaa(0)
            SheetPr(3) = aaa(1) '分母
            SheetPr(4) = 1
            Sheet1.SetProperties2(SheetPr(0), SheetPr(1), SheetPr(2), SheetPr(3), SheetPr(4), SheetPr(5), SheetPr(6), SheetPr(7))
            Draw.EditRebuild()
        End Sub




        Public Sub A4P_new(material$, company$, name$, Code$)
            Draw = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4p.drwdot", 1, 0, 0)
            part = swapp.ActiveDoc
            myNote = part.InsertNote("公司名称")
            If Not myNote Is Nothing Then
                myNote.LockPosition = False
                myNote.Angle = 0
                myNote.SetBalloon(0, 0)
                Annotation = myNote.GetAnnotation()
                If Not Annotation Is Nothing Then
                    Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                    Annotation.SetPosition(0.164493037612998, 0.0537752937136617, 0)
                    Annotation.SetTextFormat(0, True, 0)
                End If
            End If
            part.ClearSelection2(True)
            part.WindowRedraw()

            View = Draw.GetFirstView 'A4P
            Do Until View Is Nothing
                Notes = View.GetNotes()
                Count = View.GetNoteCount()
                If Count > 0 Then
                    For Each N1 In Notes
                        Annotation = N1.GetAnnotation()
                        Annpos = Annotation.GetPosition()
                        If Annpos(0) > 104 / 1000 And Annpos(0) < 153 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                            N1.SetText(material)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                            N1.SetText(company)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                            N1.SetText(name)
                        End If
                        If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 12 / 1000 And Annpos(1) < 24 / 1000 Then
                            N1.SetText(Code)
                        End If
                        If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                            N1.SetText(Code)
                        End If

                    Next
                End If
                View = View.GetNextView() '获得下一个视图引用
            Loop
            Draw.EditRebuild3()
        End Sub


        Public Sub 技术要求_new(X#, Y#, 技术要求1$, 技术要求2$, 技术要求3$, Optional 技术要求4$ = "", Optional 技术要求5$ = "", Optional 技术要求6$ = "", Optional 技术要求7$ = "", Optional 技术要求8$ = "", Optional 技术要求9$ = "", Optional 技术要求10$ = "")
            part = swapp.ActiveDoc
            part.FontPoints(18)
            myNote = part.InsertNote(技术要求1 + Chr(13) + Chr(10) +
               技术要求2 + Chr(13) + Chr(10) +
               技术要求3 + Chr(13) + Chr(10) +
               技术要求4 + Chr(13) + Chr(10) +
               技术要求5 + Chr(13) + Chr(10) +
               技术要求6 + Chr(13) + Chr(10) +
                技术要求7 + Chr(13) + Chr(10) +
                技术要求8 + Chr(13) + Chr(10) +
                技术要求9 + Chr(13) + Chr(10) +
                技术要求10)
            Annotation = myNote.GetAnnotation()
            Annotation.SetPosition(X, Y, 0)
        End Sub

        Public Sub 位置点半径角度_new(point1 As SldWorks.SketchPoint, 半径R#, 角度angle#, Optional 右视% = 0)
            If Not 右视 = 1 Then
                Annotation = DisplayDimension.GetAnnotation()
                Annotation.SetPosition2(point1.X + 半径R * Cos(角度angle * PI / 180), point1.Y + 半径R * Sin(角度angle * PI / 180), 0) '前视

            Else
                Annotation = DisplayDimension.GetAnnotation()
                Annotation.SetPosition2(0, point1.Y + 半径R * Sin(角度angle * PI / 180), -point1.X + 半径R * Cos(角度angle * PI / 180)) '右视
            End If

        End Sub

        Public Sub 位置两点中心_new(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint, Optional 左上垂直偏移% = 1， Optional 垂直偏移# = 0, Optional 参考点 As SldWorks.SketchPoint = Nothing, Optional 图纸比例值# = 1, Optional 视图$ = "前")
            Annotation = DisplayDimension.GetAnnotation()
            'If 参考点 Is Nothing Then
            If 视图 = "前" Then
                'MsgBox("you")
                If 左上垂直偏移 = 1 Then
                    If 两点角度_new（point1， point2） >= -PI / 2 And 两点角度_new（point1， point2） <= PI / 2 Then
                        Annotation.SetPosition2((point1.X + point2.X) / 2 + 垂直偏移 * Cos(两点角度_new（point1， point2） + 90 * PI / 180), (point1.Y + point2.Y) / 2 + 垂直偏移 * Sin(两点角度_new（point1， point2） + 90 * PI / 180), 0)
                    Else
                        Annotation.SetPosition2((point1.X + point2.X) / 2 + 垂直偏移 * Cos(两点角度_new（point1， point2） + 270 * PI / 180), (point1.Y + point2.Y) / 2 + 垂直偏移 * Sin(两点角度_new（point1， point2） + 270 * PI / 180), 0)

                    End If
                Else
                    If 两点角度_new（point1， point2） >= -PI / 2 And 两点角度_new（point1， point2） <= PI / 2 Then
                        Annotation.SetPosition2((point1.X + point2.X) / 2 + 垂直偏移 * Cos(两点角度_new（point1， point2） + 270 * PI / 180), (point1.Y + point2.Y) / 2 + 垂直偏移 * Sin(两点角度_new（point1， point2） + 270 * PI / 180), 0)
                    Else
                        Annotation.SetPosition2((point1.X + point2.X) / 2 + 垂直偏移 * Cos(两点角度_new（point1， point2） + 90 * PI / 180), (point1.Y + point2.Y) / 2 + 垂直偏移 * Sin(两点角度_new（point1， point2） + 90 * PI / 180), 0)

                    End If
                End If

            ElseIf 视图 = "右" Then
                'MsgBox("you")
                'MsgBox(point1.X)
                'MsgBox(point1.Y)
                'MsgBox(point1.Z)
                If 左上垂直偏移 = 1 Then
                    If 两点角度_new（point1， point2） >= -PI / 2 And 两点角度_new（point1， point2） <= PI / 2 Then
                        Annotation.SetPosition2(0, (point1.Y + point2.Y) / 2 + 垂直偏移 * Sin(两点角度_new（point1， point2） + 90 * PI / 180), -（(point1.X + point2.X) / 2) + 垂直偏移 * Cos(两点角度_new（point1， point2） + 90 * PI / 180))
                    Else
                        Annotation.SetPosition2(0, (point1.Y + point2.Y) / 2 + 垂直偏移 * Sin(两点角度_new（point1， point2） + 270 * PI / 180), -（(point1.X + point2.X) / 2) + 垂直偏移 * Cos(两点角度_new（point1， point2） + 270 * PI / 180))

                    End If
                Else
                    If 两点角度_new（point1， point2） >= -PI / 2 And 两点角度_new（point1， point2） <= PI / 2 Then
                        Annotation.SetPosition2(0, (point1.Y + point2.Y) / 2 + 垂直偏移 * Sin(两点角度_new（point1， point2） + 270 * PI / 180), -（(point1.X + point2.X) / 2) + 垂直偏移 * Cos(两点角度_new（point1， point2） + 270 * PI / 180))
                    Else
                        Annotation.SetPosition2(0, (point1.Y + point2.Y) / 2 + 垂直偏移 * Sin(两点角度_new（point1， point2） + 90 * PI / 180), -（(point1.X + point2.X) / 2) + 垂直偏移 * Cos(两点角度_new（point1， point2） + 90 * PI / 180))

                    End If
                End If
            End If

            'Else
            '    'If 左上垂直偏移 = 0 Then
            '    If 两点角度（point1， point2） >= -PI / 2 And 两点角度（point1， point2） <= PI / 2 Then
            '            Annotation.SetPosition2(参考点.X + 垂直偏移 * Cos(两点角度（point1， point2） + 90 * PI / 180), 参考点.Y + 垂直偏移 * Sin(两点角度（point1， point2） + 90 * PI / 180), 参考点.Z)
            '        Else
            '            Annotation.SetPosition2(参考点.X + 垂直偏移 * Cos(两点角度（point1， point2） + 270 * PI / 180), 参考点.Y + 垂直偏移 * Sin(两点角度（point1， point2） + 270 * PI / 180), 参考点.Z)

            '        End If
            '    'Else
            '    If 两点角度（point1， point2） >= -PI / 2 And 两点角度（point1， point2） <= PI / 2 Then
            '            Annotation.SetPosition2(参考点.X + 垂直偏移 * Cos(两点角度（point1， point2） + 270 * PI / 180), 参考点.Y + 垂直偏移 * Sin(两点角度（point1， point2） + 270 * PI / 180), 参考点.Z)
            '        Else
            '            Annotation.SetPosition2(参考点.X + 垂直偏移 * Cos(两点角度（point1， point2） + 90 * PI / 180), 参考点.Y + 垂直偏移 * Sin(两点角度（point1， point2） + 90 * PI / 180), 参考点.Z)

            '        End If
            '    'End If
            'End If

        End Sub

        Public Sub 位置点到直线距离_new()

        End Sub

        Public Sub 线段交叉点_new()

        End Sub

        Public Sub 遍历(同时遍历多实体数%， 实体集合() As Object， Optional 初值% = 0)
            part.ClearSelection2(True)
            Dim vEdgeCount As Integer
            vEdgeCount = 初值
            Do Until vEdgeCount >= 实体集合.Count
                For i = vEdgeCount To vEdgeCount + 同时遍历多实体数 - 1
                    SelectionMgr.AddSelectionListObject(实体集合(i), Nothing)
                Next
                vEdgeCount = vEdgeCount + 同时遍历多实体数
                MsgBox(vEdgeCount - 1)
                part.ClearSelection2(True)
            Loop
        End Sub

        Public Sub 遍历_运行_无弹窗(同时遍历多实体数%， 实体集合() As Object， 上限#， Optional 初值% = 0)
            part.ClearSelection2(True)
            Dim vEdgeCount As Integer
            vEdgeCount = 初值
            Do Until vEdgeCount >= 上限
                For i = vEdgeCount To vEdgeCount + 同时遍历多实体数 - 1
                    SelectionMgr.AddSelectionListObject(实体集合(i), Nothing)
                Next
                vEdgeCount = vEdgeCount + 同时遍历多实体数
                'MsgBox(vEdgeCount - 1)
                part.ClearSelection2(True)
            Loop
        End Sub

        Public Sub 配合_new(类型$, Optional 反向% = 0， Optional 距离# = 0, Optional 距离翻转 As Boolean = False, Optional 距离上限# = 1， Optional 距离下限# = 0)
            If 类型 = "重合" Then
                AssemblyDoc.AddMate5(0, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '重合
            ElseIf 类型 = "同轴" Then
                AssemblyDoc.AddMate5(1, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '同轴
            ElseIf 类型 = "垂直" Then
                AssemblyDoc.AddMate5(2, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '垂直
            ElseIf 类型 = "平行" Then
                AssemblyDoc.AddMate5(3, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '平行
            ElseIf 类型 = "相切" Then
                AssemblyDoc.AddMate5(4, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '相切
            ElseIf 类型 = "距离" Then
                AssemblyDoc.AddMate5(5, 反向, 距离翻转, 距离, 距离上限, 距离下限, 0, 0, 0, 0, 0, False, False, 0, 0) '距离
            End If
            part.ClearSelection2(True)
            part.EditRebuild3()
        End Sub
        Public Sub SelectPlane(plane$) '选择基准面
            If plane = "front" Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            ElseIf plane = "up" Then
                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            ElseIf plane = "right" Then
                part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            ElseIf plane = "基准面1" Then
                part.Extension.SelectByID2("基准面1", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            End If
        End Sub
        Public Sub 配合(对象一 As Object, 对象二 As Object, 类型$, Optional 反向% = 0， Optional 距离# = 0, Optional 距离翻转 As Boolean = False, Optional 距离上限# = 1， Optional 距离下限# = 0)

            SelectionMgr.AddSelectionListObject(对象一, Nothing)
            SelectionMgr.AddSelectionListObject(对象二, Nothing)

            If 类型 = "重合" Then
                AssemblyDoc.AddMate5(0, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '重合
            ElseIf 类型 = "同轴" Then
                AssemblyDoc.AddMate5(1, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '同轴
            ElseIf 类型 = "垂直" Then
                AssemblyDoc.AddMate5(2, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '垂直
            ElseIf 类型 = "平行" Then
                AssemblyDoc.AddMate5(3, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '平行
            ElseIf 类型 = "相切" Then
                AssemblyDoc.AddMate5(4, 反向, True, 0, 0, 0, 0, 0, 0, 0, 0, False, False, 0, 0) '相切
            ElseIf 类型 = "距离" Then
                AssemblyDoc.AddMate5(5, 反向, 距离翻转, 距离, 距离上限, 距离下限, 0, 0, 0, 0, 0, False, False, 0, 0) '距离
            End If
            part.ClearSelection2(True)
            part.EditRebuild3()
        End Sub

        Public Sub 插入零件标号_new(view As SldWorks.View, Optional 位置% = 3)
            '插入零件标号
            part.Extension.SelectByID2(view.Name, "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            Dim vNotes（） As Object
            Dim autoballoonParams As SldWorks.AutoBalloonOptions
            autoballoonParams = part.CreateAutoBalloonOptions()
            autoballoonParams.Layout = 位置
            autoballoonParams.ReverseDirection = False
            autoballoonParams.IgnoreMultiple = True
            autoballoonParams.InsertMagneticLine = False
            autoballoonParams.LeaderAttachmentToFaces = False
            autoballoonParams.Style = 10
            autoballoonParams.Size = 2
            autoballoonParams.EditBalloonOption = 1
            autoballoonParams.EditBalloons = 1
            autoballoonParams.UpperTextContent = 1
            autoballoonParams.UpperText = """"
            autoballoonParams.Layername = "尺寸"
            vNotes = part.AutoBalloon5(autoballoonParams)
            part.ClearSelection2（True）
        End Sub


        Public Sub 偏移注释位置_new(Annotation As SldWorks.Annotation, X偏移#， Y偏移#， Optional Z偏移# = 0)
            Dim dou As Double()
            dou = Annotation.GetPosition()
            Annotation.SetPosition2(dou(0) + X偏移, dou(1) + Y偏移, dou(2) + Z偏移)
        End Sub

        Public Sub 设置属性_new(name$, Code$, material$)
            '设置属性
            Dim cusproper As SldWorks.CustomPropertyManager
            cusproper = part.Extension.CustomPropertyManager("")
            cusproper.Set2("名称", name)
            cusproper.Set2("代号", Code)
            cusproper.Set2("材料", material)
        End Sub

        Public Sub 插入BOM表_new(view As SldWorks.View, Optional 拆分% = 0, Optional 工程视图$ = "工程视图2")
            '插入BOM表
            'Dim swBOMTable As SldWorks.TableAnnotation
            'Dim width As Double
            'Dim height As Double
            'swBOMTable = view.InsertBomTable4(True, 0, 0, 1, 2, "默认", "C:\PROGRA~1\SOLIDW~1\SOLIDW~1\lang\chinese-simplified\bom-standard.sldbomtbt", False, 0, False) '插入失误
            'swBOMTable.SetHeader(2, 4)
            'swBOMTable.SetColumnType3(1, 204, False, "名称") '从0开始计算列数
            'swBOMTable.SetColumnType3(2, 204, False, "材料")
            'swBOMTable.AnchorType = 4
            'swBOMTable.InsertColumn2(3, 0, "代号", 0) '插入一列，名叫代号
            'swBOMTable.SetColumnType3(1, 204, False, "代号")
            'swBOMTable.InsertColumn2(3, 4, "单件", 2)
            'swBOMTable.InsertColumn2(3, 5, "总计", 0)
            'swBOMTable.InsertColumn2(3, 6, "备注", 0)
            'width = swBOMTable.GetColumnWidth(0)
            'swBOMTable.SetColumnWidth(0, width / 2, 0)
            'width = swBOMTable.GetColumnWidth(1)
            'swBOMTable.SetColumnWidth(1, width * 3 / 2, 1）
            'width = swBOMTable.GetColumnWidth(2)
            'swBOMTable.SetColumnWidth(2, width * 8 / 7, 0）
            'width = swBOMTable.GetColumnWidth(3)
            'swBOMTable.SetColumnWidth(3, width / 2, 0）
            'width = swBOMTable.GetColumnWidth(4)
            'swBOMTable.SetColumnWidth(4, width / 2, 0）
            'width = swBOMTable.GetColumnWidth(7)
            'swBOMTable.SetColumnWidth(7, width * 2, 0）
            'swBOMTable.Text2(7, 0, False) = "序号"
            'Dim i As Integer
            'i = 0
            'Do Until i > swBOMTable.RowCount
            '    height = swBOMTable.GetRowHeight(i)
            '    swBOMTable.SetRowHeight(i, height * 0.8, 0)
            '    i = i + 1
            'Loop
            'swBOMTable.Split(2, 7)




            part.ActivateSheet("图纸1")
            part.Extension.SelectByID2("工程图视图2", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
            part.ActivateView("工程图视图2")
            Dim swBOMTable As SldWorks.TableAnnotation
            Dim width As Double
            Dim height As Double
            Dim swBOMTable1 As SldWorks.TableAnnotation
            Dim swBOMTable2 As SldWorks.TableAnnotation
            swBOMTable = view.InsertBomTable4(True, 0, 0, 1, 2, "默认", "C:\PROGRA~1\SOLIDW~1\SOLIDW~1\lang\chinese-simplified\bom-standard.sldbomtbt", False, 0, False) '插入BOM表，第5参数1：所有基础零件；2：子装配体
            swBOMTable.Anchored = False
            swBOMTable.SetHeader(2, 4)
            swBOMTable.SetColumnType3(1, 204, False, "名称") '从0开始计算列数
            swBOMTable.SetColumnType3(2, 204, False, "材料")
            swBOMTable.AnchorType = 4
            swBOMTable.InsertColumn2(3, 0, "代号", 0) '插入一列，名叫代号
            swBOMTable.SetColumnType3(1, 204, False, "代号")
            swBOMTable.InsertColumn2(3, 4, "单件", 2)
            swBOMTable.InsertColumn2(3, 5, "总计", 0)
            swBOMTable.InsertColumn2(3, 6, "备注", 0)
            width = swBOMTable.GetColumnWidth(0)
            swBOMTable.SetColumnWidth(0, width / 2, 0)
            width = swBOMTable.GetColumnWidth(1)
            swBOMTable.SetColumnWidth(1, width * 3 / 2, 1）
            width = swBOMTable.GetColumnWidth(2)
            swBOMTable.SetColumnWidth(2, width * 8 / 7, 0）
            width = swBOMTable.GetColumnWidth(3)
            swBOMTable.SetColumnWidth(3, width / 2, 0）
            width = swBOMTable.GetColumnWidth(4)
            swBOMTable.SetColumnWidth(4, width / 2, 0）
            width = swBOMTable.GetColumnWidth(7)
            swBOMTable.SetColumnWidth(7, width * 2, 0）




            Dim i As Integer
            i = 0
            Do Until i > swBOMTable.RowCount '获取此表的行数
                height = swBOMTable.GetRowHeight(i) '获取指定行的高度
                swBOMTable.SetRowHeight(i, height * 0.8, 0) '设置此表中指定行的高度
                i = i + 1
            Loop
            swBOMTable.Text2(i - 2, 0, False) = "序号"


            Dim Sheet1 As SldWorks.Sheet '图纸对象
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            '拆分BOM表

            If 拆分% = 1 Then
                swBOMTable1 = swBOMTable.Split(1, 26)
                Dim oldTableAnchor As SldWorks.TableAnchor
                Dim BOMTableAnchor As SldWorks.TableAnchor
                part = Draw
                part.Extension.SelectByID2(Sheet1.GetName(), "SHEET", 0, 0, 0, False, 0, Nothing, 0)
                Draw.EditTemplate()
                part.EditSketch()
                Dim skPoint As SldWorks.SketchPoint
                skPoint = part.SketchManager.CreatePoint(1.212 / 3, 0.03 / 3, 0#)
                skPoint.Select4(False, Nothing)
                'oldTableAnchor = Sheet1.TableAnchor(2)
                BOMTableAnchor = Sheet1.SetAsTableAnchor(2)
                swBOMTable.AnchorType = 4
                swBOMTable.Anchored = True
                swBOMTable.Anchored = False

                swBOMTable2 = swBOMTable.Split(1, 10)
                skPoint = part.SketchManager.CreatePoint(0.669422 / 3, 0.03 / 3, 0#)
                skPoint.Select4(False, Nothing)
                'oldTableAnchor = Sheet1.TableAnchor(2)
                BOMTableAnchor = Sheet1.SetAsTableAnchor(2)
                swBOMTable.AnchorType = 4
                swBOMTable.Anchored = True
                swBOMTable.Anchored = False

                Draw.EditSheet()
                part.EditSketch()
                part.ForceRebuild3(True)
            End If







        End Sub
        '数据库操作
        Public Function 查询当前数据库所有表总行数(地址$, database$) As Integer
            连接数据库(地址, database$)
            新建查询("show tables")
            'Dim aa As Integer = 查询表行数()
            '新建查询("show tables")
            查询当前数据库所有表总行数 = 查询数据库总行数()
        End Function

        Public Function 取新号(地址$, database$, 总行%) As String
            Dim aa As String()
            连接数据库(地址, database$)
            新建查询("show tables")
            read.Read()
            read.GetString(0)
            aa = 提取最新数据(read.GetString(0), "code")
            aa(0) = Left(aa(0), aa(0).Length - 3) + Right(("000" + 总行.ToString), 3)
            取新号 = aa(0)
        End Function

        Public Sub 插入一行复制数据(table_name$) '更新id

            新建查询("select * from " + table_name)
            Dim a As Integer
            a = 查询表行数()
            新建查询("select * from " + table_name)
            Dim aa As String()
            aa = 复制一行数据()
            Dim aaa As String
            aaa = 字符串数组转换(aa, a)
            mysqlcom = New MySqlCommand("insert into " + table_name + " values(" + aaa + ")", mysqlcon)
            read.Close()
            mysqlcom.ExecuteNonQuery() ';//插入 删除 返回值是数据库中受影响的数据的行数
            mysqlcon.Clone()
            'MsgBox(6666)

        End Sub
        Public Function 提取最新数据(table_name$, Optional 字段1$ = "", Optional 字段2$ = "", Optional 字段3$ = "", Optional 字段4$ = "", Optional 字段5$ = "", Optional 字段6$ = "", Optional 字段7$ = "",
                        Optional 字段8$ = "", Optional 字段9$ = "", Optional 字段10$ = "", Optional 字段11$ = "", Optional 字段12$ = "", Optional 字段13$ = "", Optional 字段14$ = "", Optional 字段15$ = "", Optional 字段16$ = "", Optional 字段17$ = "", Optional 字段18$ = "", Optional 字段19$ = "", Optional 字段20$ = "") As String()
            新建查询("select * from " + table_name + " order by id desc limit 1")
            read.Read()
            'MsgBox(read(字段1))
            Dim aa As String()
            Dim i As Integer = 0
            'MsgBox(字段1)
            If Not 字段1 = "" Then
                aa = {(read(字段1))}
            End If
            If Not 字段2 = "" Then
                aa = aa.Concat({(read(字段2))}).ToArray
            End If
            If Not 字段3 = "" Then
                aa = aa.Concat({(read(字段3))}).ToArray
            End If
            If Not 字段4 = "" Then
                aa = aa.Concat({(read(字段4))}).ToArray
            End If
            If Not 字段5 = "" Then
                aa = aa.Concat({(read(字段5))}).ToArray
            End If
            If Not 字段6 = "" Then
                aa = aa.Concat({(read(字段6))}).ToArray
            End If
            If Not 字段7 = "" Then
                aa = aa.Concat({(read(字段7))}).ToArray
            End If
            If Not 字段8 = "" Then
                aa = aa.Concat({(read(字段8))}).ToArray
            End If
            If Not 字段9 = "" Then
                aa = aa.Concat({(read(字段9))}).ToArray
            End If
            If Not 字段10 = "" Then
                aa = aa.Concat({(read(字段10))}).ToArray
            End If
            If Not 字段11 = "" Then
                aa = aa.Concat({(read(字段11))}).ToArray
            End If
            If Not 字段12 = "" Then
                aa = aa.Concat({(read(字段12))}).ToArray
            End If
            If Not 字段13 = "" Then
                aa = aa.Concat({(read(字段13))}).ToArray
            End If

            If Not 字段14 = "" Then
                aa = aa.Concat({(read(字段14))}).ToArray
            End If
            If Not 字段15 = "" Then
                aa = aa.Concat({(read(字段15))}).ToArray
            End If
            If Not 字段16 = "" Then
                aa = aa.Concat({(read(字段16))}).ToArray
            End If
            If Not 字段17 = "" Then
                aa = aa.Concat({(read(字段17))}).ToArray
            End If
            If Not 字段18 = "" Then
                aa = aa.Concat({(read(字段18))}).ToArray
            End If
            If Not 字段19 = "" Then
                aa = aa.Concat({(read(字段19))}).ToArray
            End If
            If Not 字段20 = "" Then
                aa = aa.Concat({(read(字段20))}).ToArray
            End If
            'Next
            'MsgBox(aa(0))
            'MsgBox(aa(1))
            提取最新数据 = aa
            'MsgBox(read("id"))
        End Function

        Public Function 更新数据(table_name$, Optional 字段1$ = "", Optional 字段2$ = "", Optional 字段3$ = "", Optional 字段4$ = "", Optional 字段5$ = "", Optional 字段6$ = "", Optional 字段7$ = "",
                        Optional 字段8$ = "", Optional 字段9$ = "", Optional 字段10$ = "", Optional 字段11$ = "", Optional 字段12$ = "", Optional 字段13$ = "", Optional 字段14$ = "", Optional 字段15$ = "",
                             Optional 字段16$ = "", Optional 字段17$ = "", Optional 字段18$ = "", Optional 字段19$ = "", Optional 字段20$ = "", Optional 字段21$ = "", Optional 字段22$ = "", Optional 字段23$ = "", Optional value1$ = "", Optional value2$ = "",
                        Optional value3$ = "", Optional value4$ = "", Optional value5$ = "", Optional value6$ = "", Optional value7$ = "", Optional value8$ = "", Optional value9$ = "", Optional value10$ = "",
                        Optional value11$ = "", Optional value12$ = "", Optional value13$ = "", Optional value14$ = "", Optional value15$ = "", Optional value16$ = "", Optional value17$ = "", Optional value18$ = "",
                             Optional value19$ = "", Optional value20$ = "", Optional value21$ = "", Optional value22$ = "", Optional value23$ = "") As String()

            'If Not value0 = "" Then
            '    mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段0 + "='" + value0 + "' order by id desc limit 1", mysqlcon)
            '    read.Close()
            '    mysqlcom.ExecuteNonQuery()
            'End If

            Dim aa As String()

            If Not value1 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段1 + "='" + Replace(value1, "\", "\\") + "' order by id desc limit 1", mysqlcon)
                read.Close()
                mysqlcom.ExecuteNonQuery()
                'aa = {(value1)}
            End If
            If Not value2 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段2 + "='" + value2 + "' order by id desc limit 1", mysqlcon)
                'read.Close()
                mysqlcom.ExecuteNonQuery()
                aa = {(value2)}
            End If
            If Not value3 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段3 + "='" + value3 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value3)}).ToArray
            End If
            If Not value4 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段4 + "='" + value4 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value4)}).ToArray
            End If
            If Not value5 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段5 + "='" + Replace(value5, "\", "\\") + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value5)}).ToArray
            End If
            If Not value6 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段6 + "='" + value6 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value6)}).ToArray
            End If
            If Not value7 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段7 + "='" + value7 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value7)}).ToArray
            End If
            If Not value8 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段8 + "='" + value8 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value8)}).ToArray
            End If
            If Not value9 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段9 + "='" + value9 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value9)}).ToArray
            End If
            If Not value10 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段10 + "='" + value10 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value10)}).ToArray
            End If
            If Not value11 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段11 + "='" + value11 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value11)}).ToArray
            End If
            If Not value12 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段12 + "='" + value12 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value12)}).ToArray
            End If
            If Not value13 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段13 + "='" + value13 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value13)}).ToArray
            End If
            If Not value14 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段14 + "='" + value14 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value14)}).ToArray
            End If
            If Not value15 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段15 + "='" + value15 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value15)}).ToArray
            End If
            If Not value16 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段16 + "='" + value16 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value16)}).ToArray
            End If
            If Not value17 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段17 + "='" + value17 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value17)}).ToArray
            End If
            If Not value18 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段18 + "='" + value18 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value18)}).ToArray
            End If
            If Not value19 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段19 + "='" + value19 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value19)}).ToArray
            End If
            If Not value20 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段20 + "='" + value20 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value20)}).ToArray
            End If
            If Not value21 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段21 + "='" + value21 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value21)}).ToArray
            End If
            If Not value22 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段22 + "='" + value22 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value22)}).ToArray
            End If
            If Not value23 = "" Then
                mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段23 + "='" + value23 + "' order by id desc limit 1", mysqlcon)
                mysqlcom.ExecuteNonQuery()
                aa = aa.Concat({(value23)}).ToArray
            End If


            'mysqlcom = New MySqlCommand("update " + table_name + " set " + 字段1 + "='" + value1 + "' order by id desc limit 1", mysqlcon)
            'read.Close()
            mysqlcom.ExecuteNonQuery() ';//插入 删除 返回值是数据库中受影响的数据的行数

            更新数据 = aa

        End Function

        Public Sub test()

            连接数据库("localhost", "Damping_rod")
            插入一行复制数据("damping_rod_copy1")


            连接数据库("106.15.236.225", "baserequires")
            Dim aa As String()
            aa = 提取最新数据("optimize_rotor_parameter", "dy", "lt2")


            Dim bb%
            bb = 查询当前数据库所有表总行数("localhost", "Damping_rod")
            Dim newcode$
            newcode = 取新号("localhost", "Damping_rod", bb)


            连接数据库("localhost", "Damping_rod")
            更新数据("damping_rod_copy1", "code", "diameter", "thickness",
                 value1:=newcode,
                 value2:=aa(0),
                 value3:=aa(1))


            Dim cc As String()
            cc = 去重("damping_rod_copy1", aa, "diameter", "thickness")



        End Sub

        Public Function Read_house_number(设计组地址$, 设计组数据库$, 设计组表名$) As String
            'Dim PythonUtils As Object
            'PythonUtils = CreateObject("shaft_Read_house_number")
            'Dim house_number As String
            'house_number = PythonUtils.Read_house_number()
            'Read_house_number = house_number
            '连接数据库(结构组地址$, 结构组数据库$)
            '插入一行复制数据(结构组表名$)


            连接数据库(设计组地址$, 设计组数据库$)
            Dim aa As String()
            aa = 提取最新数据(设计组表名, "house_number")
            Read_house_number = aa(0)



        End Function

        Public Function 去重(table_name$, 查重数据 As String(), Optional 字段2$ = "", Optional 字段3$ = "", Optional 字段4$ = "", Optional 字段5$ = "", Optional 字段6$ = "", Optional 字段7$ = "",
                        Optional 字段8$ = "", Optional 字段9$ = "", Optional 字段10$ = "", Optional 字段11$ = "", Optional 字段12$ = "", Optional 字段13$ = "", Optional 字段14$ = "", Optional 字段15$ = "", Optional 字段16$ = "", Optional 字段17$ = "",
                        Optional 字段18$ = "", Optional 字段19$ = "", Optional 字段20$ = "", Optional 字段21$ = "", Optional 字段22$ = "", Optional 字段23$ = "") As String()

            Dim aa As String()
            Dim bb As String()
            Dim cc% = 0


            新建查询("select * from " + table_name)
            'MsgBox(read.Read())
            'MsgBox(read(字段1))
            Do While read.Read '当false时跳出循环
                If Not 字段2 = "" Then
                    aa = {(read(字段2))}
                    'MsgBox(read(字段1))
                End If
                If Not 字段3 = "" Then
                    aa = aa.Concat({(read(字段3))}).ToArray
                End If
                If Not 字段4 = "" Then
                    aa = aa.Concat({(read(字段4))}).ToArray
                End If
                If Not 字段5 = "" Then
                    aa = aa.Concat({(read(字段5))}).ToArray
                End If
                If Not 字段6 = "" Then
                    aa = aa.Concat({(read(字段6))}).ToArray
                End If
                If Not 字段7 = "" Then
                    aa = aa.Concat({(read(字段7))}).ToArray
                End If
                If Not 字段8 = "" Then
                    aa = aa.Concat({(read(字段8))}).ToArray
                End If
                If Not 字段9 = "" Then
                    aa = aa.Concat({(read(字段9))}).ToArray
                End If
                If Not 字段10 = "" Then
                    aa = aa.Concat({(read(字段10))}).ToArray
                End If
                If Not 字段11 = "" Then
                    aa = aa.Concat({(read(字段11))}).ToArray
                End If
                If Not 字段12 = "" Then
                    aa = aa.Concat({(read(字段12))}).ToArray
                End If
                If Not 字段13 = "" Then
                    aa = aa.Concat({(read(字段13))}).ToArray
                End If
                If Not 字段14 = "" Then
                    aa = aa.Concat({(read(字段14))}).ToArray
                End If
                If Not 字段15 = "" Then
                    aa = aa.Concat({(read(字段15))}).ToArray
                End If
                If Not 字段16 = "" Then
                    aa = aa.Concat({(read(字段16))}).ToArray
                End If
                If Not 字段17 = "" Then
                    aa = aa.Concat({(read(字段17))}).ToArray
                End If
                If Not 字段18 = "" Then
                    aa = aa.Concat({(read(字段18))}).ToArray
                End If
                If Not 字段19 = "" Then
                    aa = aa.Concat({(read(字段19))}).ToArray
                End If
                If Not 字段20 = "" Then
                    aa = aa.Concat({(read(字段20))}).ToArray
                End If
                If Not 字段21 = "" Then
                    aa = aa.Concat({(read(字段21))}).ToArray
                End If
                If Not 字段22 = "" Then
                    aa = aa.Concat({(read(字段22))}).ToArray
                End If
                If Not 字段23 = "" Then
                    aa = aa.Concat({(read(字段23))}).ToArray
                End If


                'If aa = 查重数据 Then
                '    MsgBox(555)
                'End If

                Dim dd As Boolean = True '默认重复
                For i = 0 To 查重数据.Count - 1
                    If Not aa(i) = 查重数据(i) Then '查重，如果不重复dd=false
                        dd = False
                    End If
                Next

                If Not dd Then
                    'MsgBox(88)
                Else '重复则执行下列语句
                    cc += 1
                    If cc = 1 Then
                        bb = {(read("code")), ("repeat")}
                    Else
                        bb = bb.Concat({(read("code"))}).ToArray
                    End If
                End If
            Loop
            If cc = 1 Then
                bb = {(read("code")), ("new")}
            Else

                For I = 2 To bb.Count - 1

                    mysqlcom = New MySqlCommand("Delete from " + table_name + " where code='" + bb(I) + "'", mysqlcon)
                    If I = 2 Then
                        read.Close()
                    End If
                    mysqlcom.ExecuteNonQuery()
                Next

                bb = {bb(0), bb(1)}

            End If



            去重 = bb
        End Function


        Public Function 复制一行数据() As String()
            Dim aa As String()
            Dim bb, cc As Integer
            bb = 0
            cc = 0
            read.Read()
            For i = 0 To read.FieldCount - 1
                If i = 0 Then
                    aa = {(read(i))}
                Else
                    'MsgBox(IsDBNull(read(i)))

                    If IsDBNull(read(i)) Then
                        'MsgBox(IsDBNull(read(i)))
                        aa = aa.Concat({("0")}).ToArray
                    Else
                        aa = aa.Concat({(read(i))}).ToArray
                    End If

                End If
            Next
            复制一行数据 = aa
        End Function

        Public Function 字符串数组转换(aa As String(), a%) As String
            Dim bb As String
            bb = (a + 1).ToString + ","
            For i = 1 To aa.Count - 1
                bb = bb + "'" + aa(i) + "',"
            Next
            bb = Replace(bb, "\", "\\")
            字符串数组转换 = Left(bb, bb.Length - 1)
        End Function

        Public Function 查询数据库总行数() As Integer
            Dim aa As String()
            Dim bb, cc As Integer
            bb = 0
            cc = 0

            Do While read.Read()
                If cc = 0 Then
                    aa = {read.GetString(0)}
                Else
                    aa = aa.Concat({(read.GetString(0))}).ToArray
                End If
                cc += 1
            Loop

            For i = 0 To aa.Count - 1
                新建查询("select * from " + aa(i))
                bb = bb + 查询表行数()
            Next
            查询数据库总行数 = bb






        End Function

        Public Function 连接数据库(地址$, database$, Optional Sql$ = "show tables") As Integer
            mysqlcon = New MySqlConnection("server=" + 地址 + ";userid=root" & ";password=123456" & ";database=" + database + ";Charset=utf8")
            '//打开数据库连接
            mysqlcon.Open()
            mysqlcom = New MySqlCommand(Sql, mysqlcon)
            read = mysqlcom.ExecuteReader()

            'mysqlcom = New MySqlCommand("set names gb2312", mysqlcon)
            'mysqlcom.ExecuteNonQuery()
            'mysqlcom.Dispose()


        End Function

        Public Sub 新建查询(sql$)
            mysqlcom = New MySqlCommand(sql, mysqlcon)
            read.Close()
            read = mysqlcom.ExecuteReader()
        End Sub
        Public Function 查询表行数() As Integer
            Dim count As Integer
            count = 0
            Do While read.Read()
                Count += 1
            Loop
            查询表行数 = count
        End Function


        Public Sub mysql_new(database$， table$, Optional Code$ = "")
            mysqlcon = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + database + ";pooling=false")
            '//打开数据库连接
            mysqlcon.Open()
            '//sql查询
            mysqlcom = New MySqlCommand("select * from " + table, mysqlcon)
            read = mysqlcom.ExecuteReader()
            'read.GetValues(values1)

            read.Read()
            If Code$ = "" Then
                Do Until read.GetString("id") = 1
                    read.Read()
                Loop
            Else
                Do Until read.GetString("Code") = Code
                    read.Read()
                Loop

            End If

        End Sub


        Public Sub mysql_close()
            read.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Sub

        Public Function 特征旋转_new() As Feature
            特征旋转_new = part.FeatureManager.FeatureRevolve2(True, True, False, False, False, False, 0, 0, 6.2831853071796, 0, False, False, 0.01, 0.01, 0, 0, 0, True, True, True)
        End Function

        Public Function 特征筋(厚度#) As SldWorks.Feature
            part.FeatureManager.InsertRib(True, False, 厚度, 0, True, False, True, 0.0174532925199433, False, False)
            特征筋 = SelectionMgr.GetSelectedObject6(1, -1)
        End Function

        Public Function 两点选一点(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint, Optional XorY% = 1, Optional 大% = 1) As SldWorks.SketchPoint
            If XorY% = 1 Then
                If 大% = 1 Then
                    If point1.X > point2.X Then
                        两点选一点 = point1
                    Else
                        两点选一点 = point2
                    End If
                Else
                    If point1.X < point2.X Then
                        两点选一点 = point1
                    Else
                        两点选一点 = point2
                    End If
                End If

            ElseIf XorY% = 2 Then
                If 大% = 1 Then
                    If point1.Y > point2.Y Then
                        两点选一点 = point1
                    Else
                        两点选一点 = point2
                    End If
                Else
                    If point1.Y < point2.Y Then
                        两点选一点 = point1
                    Else
                        两点选一点 = point2
                    End If
                End If


            End If

        End Function

        Public Function 草图圆角_new(圆角半径#)
            草图圆角_new = part.SketchManager.CreateFillet(圆角半径, 1)


        End Function
        Public Function 草图倒角_1_new(底倒角长#, 底倒角度数#)
            草图倒角_1_new = part.SketchManager.CreateChamfer(0, 底倒角长, 底倒角度数 * PI / 180)


        End Function
        Public Function 草图倒角_2_new(底倒角长1#, 底倒角长2#)
            草图倒角_2_new = part.SketchManager.CreateChamfer(1, 底倒角长1, 底倒角长2)


        End Function
        Public Function 特征圆角_new(圆角半径#) As SldWorks.Feature

            特征圆角_new = part.FeatureManager.FeatureFillet3(195, 圆角半径, 0.01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        End Function

        Public Sub 转换实体引用_new()
            part.SketchManager.SketchUseEdge3(False, False)

        End Sub
        Public Sub 尺寸数值_new(输入#)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection)
            Dimension.SystemValue = 输入
        End Sub

        Public Sub 特征阵列_等间距(阵列数%)

            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", True)
        End Sub

        Public Function 特征阵列_angle(阵列数%, 角度#) As SldWorks.Feature
            特征阵列_angle = part.FeatureManager.FeatureCircularPattern5(阵列数%, 角度# * PI / 180, False, "NULL", False, False, False, False, False, False, 1, 0, "NULL", False)
        End Function

        Public Function 特征线性阵列(阵列数%, 间距#, Optional 反向 As Boolean = False)
            间距 = 间距 / 1000
            part.FeatureManager.FeatureLinearPattern5(阵列数, 间距, 0, 0, 反向, False, "NULL", "NULL", False, False, False, False, False, False, True, True, False, False, 0, 0, False, False)

        End Function

        Public Sub 渲染_new(entity As Object, 外观路径$)

            Dim displayStateNames As Object

            Dim status As Boolean

            Dim modelName As String

            Dim materialName As String

            Dim errors As Integer

            Dim warnings As Integer

            Dim nbrDisplayStates As Integer

            Dim i As Integer

            Dim k As Integer

            Dim nbrMaterials As Integer

            Dim materialID1 As Integer

            Dim materialID2 As Integer

            Dim materialID1_ToDelete(0) As Integer

            Dim materialID2_ToDelete(0) As Integer



            ' Get active configuration and create a new display

            ' state for this configuration

            swConfig = part.GetActiveConfiguration

            status = swConfig.CreateDisplayState("Display State 2")

            part.ForceRebuild3(True)

            ' Get active configuration and create another new

            ' display state for this configuration

            swConfig = part.GetActiveConfiguration

            status = swConfig.CreateDisplayState("Display State 3")

            part.ForceRebuild3(True)

            ' Create appearance

            materialName = 外观路径

            RenderMaterial = part.Extension.CreateRenderMaterial(materialName)


            status = entity.Select2(False, 1)
            status = RenderMaterial.AddEntity(entity)

            ' Get the names of display states

            displayStateNames = swConfig.GetDisplayStates

            nbrDisplayStates = swConfig.GetDisplayStatesCount

            Debug.Print("This configuration's display states =")

            For i = 0 To (nbrDisplayStates - 1)

                Debug.Print(" Display state name = " & displayStateNames(i))

            Next i

            ' Add appearance to all of the display states

            status = part.Extension.AddDisplayStateSpecificRenderMaterial(RenderMaterial, SwConst.swDisplayStateOpts_e.swAllDisplayState, displayStateNames, materialID1, materialID2)




        End Sub

        Public Sub 自定义颜色_new(Component2 As SldWorks.Component2, R%, G%, B%)
            Dim matpro() As Double
            matpro = part.MaterialPropertyValues '[ R, G, B, Ambient, Diffuse, Specular, Shininess, Transparency, Emission ]
            matpro(0) = R / 255
            matpro(1) = G / 255
            matpro(2) = B / 255
            Component2.MaterialPropertyValues = matpro
        End Sub

        Public Sub 隐藏所有草图_new(component1 As SldWorks.Component2, component2 As SldWorks.Component2, component3 As SldWorks.Component2, component4 As SldWorks.Component2, component5 As SldWorks.Component2, component6 As SldWorks.Component2)
            part.ClearSelection2(True) '隐藏所有草图
            For i = 1 To 4
                Select Case i > 0
                    Case i = 1
                        component2 = component1
                    Case i = 2
                        component2 = component2
                    Case i = 3
                        component2 = component3
                    Case i = 4
                        component2 = component4
                    Case i = 3
                        component2 = component5
                    Case i = 4
                        component2 = component6
                End Select
                For j = 1 To 30
                    part.Extension.SelectByID2("草图" + j.ToString + "@" + component2.Name2() + "@" + AssemblyTitle, "SKETCH", 0, 0, 0, True, 0, Nothing, 0)
                Next
            Next
            'MsgBox(999)
            part.BlankSketch()
        End Sub

        '装配图切边不可见无效
        '辩证思维，利他思维，整合思维，迭代更新思维，目标导向思维








































        Public Sub Round_table(Outer_diameter#, thickness#, Optional middle_hole_diameter_TolType% = 8, Optional middle_hole_diameter_TolMax# = 0, Optional middle_hole_diameter_TolMin# = 0, Optional middle_hole_diameter_TolMaxFit$ = "",
                                      Optional middle_hole_diameter_TolMinFit$ = "f8", Optional Slot_outer_diameter_Gtol$ = "<IGTOL-CONC>", Optional Slot_outer_diameter_Gtol_Value$ = "0.05", Optional Slot_outer_diameter_Gtol_datum$ = "A",
                                       Optional 图纸比例值# = 1) '外径#, 厚度#

            'Public Sub Round_table(Outer_diameter#, thickness#, middle_hole_diameter_TolType%, middle_hole_diameter_TolMax#, middle_hole_diameter_TolMin#, middle_hole_diameter_TolMaxFit$,
            '                 middle_hole_diameter_TolMinFit$, Slot_outer_diameter_Gtol$, Slot_outer_diameter_Gtol_Value$, Slot_outer_diameter_Gtol_datum$) '外径#, 厚度#
            Outer_diameter = Outer_diameter / 1000
            thickness = thickness / 1000
            middle_hole_diameter_TolMax = middle_hole_diameter_TolMax / 1000
            middle_hole_diameter_TolMin = middle_hole_diameter_TolMin / 1000

            初始设置（0）
            Dim ARC As SldWorks.SketchSegment
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            ARC = part.SketchManager.CreateCircleByRadius(0, 0, 0, Outer_diameter / 2)
            DisplayDimension = part.AddDimension2(-(Outer_diameter / 2), -(Outer_diameter / 2), 0)
            part.EditDimensionProperties2(middle_hole_diameter_TolType%, middle_hole_diameter_TolMax#, middle_hole_diameter_TolMin#, middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)



            'Dim myGtol As Object
            'Dim myAnno As SldWorks.Annotation
            'myGtol = part.InsertGtol()
            'myGtol.SetFrameSymbols2(1, Slot_outer_diameter_Gtol, True, "", False, "", "", "", "")
            'myGtol.SetFrameValues(1, Slot_outer_diameter_Gtol_Value$, "", Slot_outer_diameter_Gtol_datum, "", "")
            'myAnno = myGtol.GetAnnotation()
            'myAnno.SetPosition((Outer_diameter / 2), (Outer_diameter / 2), 0)
            'myAnno.SetLeader3(3, 0, True, False, False, False)



            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = middle_hole_diameter_TolType
            DimensionTolerance.SetFitValues(middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit)
            DisplayDimension.ShowTolParenthesis = True '显示括号
            'ARC.Select4(False, Nothing)

            If Not Slot_outer_diameter_Gtol = "" Then
                'P1 = part.SketchManager.CreatePoint((Outer_diameter / 2) * Cos(60 * PI / 180), (Outer_diameter / 2) * Sin(60 * PI / 180), 0)
                'P1.Select4(False, Nothing)

                ARC.Select4(False, Nothing)
                A1 = ARC
                A1.GetRadius()
                part.Extension.SelectByID2(ARC.GetName(), "SKETCHSEGMENT", A1.GetRadius * Cos(PI * 70 / 180), A1.GetRadius * Sin(PI * 70 / 180), 0, False, 0, Nothing, 0)
                Dim myGtol As SldWorks.Gtol
                'Dim myGtol As SldWorks.GtolClass
                Dim myAnno As SldWorks.Annotation
                myGtol = part.InsertGtol()
                myGtol.SetFrameSymbols2(1, Slot_outer_diameter_Gtol, True, "", False, "", "", "", "")
                myGtol.SetFrameValues(1, Slot_outer_diameter_Gtol_Value$, "", Slot_outer_diameter_Gtol_datum, "", "")
                myAnno = myGtol.GetAnnotation()
                myAnno.SetPosition(((Outer_diameter / 2) + 0.02 / 图纸比例值) * Cos(PI * 70 / 180), ((Outer_diameter / 2) + 0.02 / 图纸比例值) * Sin(PI * 70 / 180), 0)
                myAnno.SetLeader3(3, 0, True, False, False, False)
                'myAnno.SetLeaderAttachmentPointAtIndex(2, (Outer_diameter / 2) * Cos(10 * PI / 180), (Outer_diameter / 2) * Sin(10 * PI / 180), 0)
            End If
            sketch = part.SketchManager.ActiveSketch
            part.SketchManager.InsertSketch(True)
            part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, thickness, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸
        End Sub

        Public Sub 偏心圆凸台(直径#, 拉伸厚度#， Optional 相对X轴偏转角度# = 0, Optional 阵列数# = 1, Optional X偏心距# = 0， Optional 小圆直径# = 0, Optional 尺寸标注# = 1) '先画一个X偏心圆，然后以相对X轴偏转角度旋转该圆，再拉伸凸台，然后以原点为圆心阵列旋转该凸台实体
            直径 = 直径 / 1000
            拉伸厚度 = 拉伸厚度 / 1000
            X偏心距 = X偏心距 / 1000
            小圆直径 = 小圆直径 / 1000

            Dim arc1 As SldWorks.SketchArc
            Dim line01, arc1Segment As SldWorks.SketchSegment
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.02, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(X偏心距, 0, 0, 直径 / 2)
            arc1Segment = arc1

            If Not X偏心距 = 0 Then '标偏心距
                If 直径 = Max(X偏心距, 直径) Then
                    P1 = part.SketchManager.CreatePoint(X偏心距, 0, 0)
                    P2 = part.SketchManager.CreatePoint(0, 0, 0)
                    P1P2HD(P1, P2, P1, -0.01)
                End If

                Arcdimension(arc1, arc1.GetRadius * Sin(PI * 15 / 180), arc1.GetRadius * Cos(PI * 15 / 180), False, True) '标直径
            End If




            If 直径 = Max(X偏心距, 直径) Then '标中心距
                P1 = part.SketchManager.CreatePoint(直径 / 2 + X偏心距, 0, 0)
                If X偏心距 < 0 Then
                    P1YP2_P1P2(P1, -1.1 * 直径 / 2)
                Else
                    If 尺寸标注# = 1 Then
                        P1YP2_P1P2(P1, 1.3 * 直径 / 2)
                    End If

                End If

                旋转草图(line01, 相对X轴偏转角度)

            End If



            part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, 拉伸厚度, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

            If X偏心距 < 0 Then '反向切除
                For i = 1 To 阵列数
                    line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.02, 0)
                    A1 = part.SketchManager.CreateCircleByRadius(X偏心距, 0, 0, 直径 / 2)
                    旋转草图(line01, 360 * (i - 1) / 阵列数)
                    part.FeatureCut(True, True, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
                Next
                A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 小圆直径 / 2)
                Arcdimension(A1, 0.01 * Cos(PI * 30 / 180), 0.01 * Sin(PI * 30 / 180))
                part.FeatureCut(True, True, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            End If

        End Sub


        Public Sub 偏心阵列小圆底槽口(阵列数#, 相对Y轴偏转角度#, 槽间角度#, 偏转距离X#, 偏转距离Y#, 槽口数#, 槽口底圆直径#, 外径#, 槽圆心到外圆高#, 槽口宽#, Optional 尺寸标注# = 0)

            'Dim A1 As SldWorks.SketchArc
            'Dim L1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, arc2, line01, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置(1)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            A1 = part.SketchManager.CreateCircleByRadius(0, 外径 / 2 - 槽圆心到外圆高, 0, 槽口底圆直径 / 2)
            L1 = part.SketchManager.CreateLine(0.0001, 0.0001, 0, 0.0001, 0.0002, 0)
            part.ViewZoomtofit2()
            arc1Segment = A1
            line1Segment = L1
            line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc2.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = L1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc2.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = L1.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直


            line01.Select4(False, Nothing)
            line1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽口宽 / 2

            point1 = L1.GetEndPoint2()
            point2 = A1.GetCenterPoint2
            If point1.Y < point2.Y Then
                line1Segment.Select4(False, Nothing)
                SketchManager.SketchTrim(0, 槽口宽 / 2, 外径 / 2 - 槽圆心到外圆高, 0) '修剪到最近端
            End If

            line01.Select4(False, Nothing)
            line1Segment.SelectChain(True, Nothing)
            part.SketchMirror()

            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            'arc1Segment.Select4(False, Nothing)
            'SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            arc2.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i




            If 尺寸标注 = 1 Then
                part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
                P1YP2_P1P2(L1.GetStartPoint2, 0.01)
                Arcdimension(A1, -0.01)
                part.ViewZoomtofit2()
            End If



            旋转草图(line01, 相对Y轴偏转角度)
            part.Extension.RotateOrCopy(True, 槽口数 - 1, False, 0, 0, 0, 0, 0, 1, PI * 槽间角度 / 180)
            偏移草图(偏转距离X, 偏转距离Y)

            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

        End Sub
        Public Sub 偏心阵列小圆底槽口_阻尼槽口高(阵列数#, 相对Y轴偏转角度#, 槽间角度#, 偏转距离X#, 偏转距离Y#, 槽口数#, 槽口底圆直径#, 外径#, 阻尼槽口高#, 槽口宽#, Optional 尺寸标注# = 0)

            'Dim A1 As SldWorks.SketchArc
            'Dim L1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, arc2, line01, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置(1)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            A1 = part.SketchManager.CreateCircleByRadius(0, 外径 / 2 - 阻尼槽口高 - 槽口底圆直径 / 2, 0, 槽口底圆直径 / 2)
            L1 = part.SketchManager.CreateLine(0.0001, 0.0001, 0, 0.0001, 0.0002, 0)
            part.ViewZoomtofit2()
            arc1Segment = A1
            line1Segment = L1
            line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc2.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = L1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc2.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = L1.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直




            line01.Select4(False, Nothing)
            line1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽口宽 / 2

            point1 = L1.GetEndPoint2()
            point2 = A1.GetCenterPoint2
            If point1.Y < point2.Y Then
                line1Segment.Select4(False, Nothing)
                SketchManager.SketchTrim(0, 槽口宽 / 2, 外径 / 2 - 阻尼槽口高 - 槽口底圆直径 / 2, 0) '修剪到最近端
            End If




            '重新约束
            删除约束()
            arc2.Select2(False, 0)
            草图方法("固定")
            L1.Select2(False, 0)
            草图方法("垂直")
            P1 = 两点选一点(L1.GetStartPoint2, L1.GetEndPoint2, 2, 1)
            P1.Select2(False, 0)
            arc2.Select2(True, 0)
            草图方法("重合")
            P1 = 两点选一点(L1.GetStartPoint2, L1.GetEndPoint2, 2, 0)
            P1.Select2(False, 0)
            arc1Segment.Select2(True, 0)
            草图方法("重合")


            DisplayDimension = L1D_new(line1Segment, 0.01)
            尺寸数值_new(阻尼槽口高)

            line01.Select4(False, Nothing)
            line1Segment.SelectChain(True, Nothing)
            part.SketchMirror()


            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, arc1Segment.getcenterpoint2.y + 槽口底圆直径 / 2, 0) '修剪到最近端
            'arc1Segment.Select4(False, Nothing)
            'SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            arc2.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端



            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i




            If 尺寸标注 = 1 Then
                part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
                P1YP2_P1P2(L1.GetStartPoint2, 0.01)
                Arcdimension(A1, -0.01)
                L1D_new(line1Segment, 0.01)
                part.ViewZoomtofit2()
            End If



            旋转草图(line01, 相对Y轴偏转角度)
            part.Extension.RotateOrCopy(True, 槽口数 - 1, False, 0, 0, 0, 0, 0, 1, PI * 槽间角度 / 180)
            偏移草图(偏转距离X, 偏转距离Y)

            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

        End Sub


        Public Sub array_small_round_bottomsolt(阵列数#, 相对Y轴偏转角度#, 槽间角度#, 偏转距离X#, 偏转距离Y#, 槽口数#, 槽口底圆直径#, 外径#, 槽圆心到外圆高#, 槽口宽#)

            'Dim A1 As SldWorks.SketchArc
            'Dim L1 As SldWorks.SketchLine
            'Dim A1Segment, L1Segment, L01Segment, SketchSegment As SldWorks.SketchSegment
            'Dim SketchSegments() As Object
            'Dim Sketch As SldWorks.Sketch
            'Dim [Boolean] As Boolean
            'Dim P1, P2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置(1)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            L01Segment = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            A1 = part.SketchManager.CreateCircleByRadius(0, 外径 / 2 - 槽圆心到外圆高, 0, 槽口底圆直径 / 2)
            L1 = part.SketchManager.CreateLine(0.0001, 0.0001, 0, 0.0001, 0.0002, 0)
            part.ViewZoomtofit2()
            A1Segment = A1
            L1Segment = L1
            L01Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            A1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            A2Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            A2Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            P1 = L1.GetStartPoint2()
            P1.Select4(False, Nothing)
            A2Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            P1 = L1.GetEndPoint2()
            P1.Select4(False, Nothing)
            A1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            L1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直


            L01Segment.Select4(False, Nothing)
            L1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽口宽 / 2

            P1 = L1.GetEndPoint2()
            P2 = A1.GetCenterPoint2
            If P1.Y < P2.Y Then
                L1Segment.Select4(False, Nothing)
                SketchManager.SketchTrim(0, 槽口宽 / 2, 外径 / 2 - 槽圆心到外圆高, 0) '修剪到最近端
            End If

            L01Segment.Select4(False, Nothing)
            L1Segment.SelectChain(True, Nothing)
            part.SketchMirror()

            A1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            'arc1Segment.Select4(False, Nothing)
            'SketchManager.SketchTrim(0, 0, 外径 / 2 - 槽圆心到外圆高 + 槽口底圆直径 / 2, 0) '修剪到最近端
            A2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            '旋转槽口草图
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            'P1 = L1.GetStartPoint2
            'P1.Select4(False, Nothing)
            'MsgBox(666)
            P1YP2_P1P2(L1.GetStartPoint2, 0.01)
            Arcdimension(A1, -0.01)



            part.ViewZoomtofit2()

            SketchSegments = sketch.GetSketchSegments
            points = sketch.GetSketchPoints2
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            'MsgBox(666)
            L01Segment.Select2(True, 2)
            L01Segment.Select2(True, 2) '设定标记




            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)
            part.Extension.RotateOrCopy(True, 槽口数 - 1, False, 0, 0, 0, 0, 0, 1, PI * 槽间角度 / 180)

            part.ClearSelection2(True)
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 偏转距离X, 偏转距离Y, 0)

            L1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

            A2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径# / 2 - 槽圆心到外圆高#)
            SketchSegment = A2
            SketchSegment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2((外径# / 2 - 槽圆心到外圆高#) * 0.9 * Cos(150 * PI / 180), (外径# / 2 - 槽圆心到外圆高#) * 0.9 * Sin(150 * PI / 180), 0)
            SketchSegment.Select4(False, Nothing)
            SketchManager.CreateConstructionGeometry() '设为构造线
            SketchSegment.Select4(False, Nothing)
            part.UnblankSketch() '显示

        End Sub

        Public Sub Round_bottom_slot(Relative_Y_axis_deflection_angle#, number#, bottom_radius#, outer_diameter#,
                                             inside_diameter#, shoulder_width#, top_width#, one_Step_height#, two_steps_height#, Optional Slot_Gtol$ = "<IGTOL-POSI>", Optional Slot_Gtol_Value$ = "0.08", Optional Slot_Gtol_datum$ = "A",
                                             Optional DatumMC1$ = "<MOD-MMC>", Optional 图纸比例值# = 1) '相对Y轴偏转角度#, 槽口数#, 槽口底圆半径#, 外径#, 内径#, 肩宽#, 顶宽#, 一阶高#, 二阶高

            bottom_radius = bottom_radius / 1000
            outer_diameter = outer_diameter / 1000
            inside_diameter = inside_diameter / 1000
            shoulder_width = shoulder_width / 1000
            top_width = top_width / 1000
            one_Step_height = one_Step_height / 1000
            two_steps_height = two_steps_height / 1000





            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3 As SldWorks.SketchLine
            Dim Dline1, Dline2, Dline3 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, line2Segment, line3Segment, arc2, arc3, line01, Dline1Segment, Dline2Segment, Dline3Segment, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2, Dpoint1, Dpoint2 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            line1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            line2 = part.SketchManager.CreateLine(0.02, 0.02, 0, 0.02, 0.03, 0)
            line3 = part.SketchManager.CreateLine(0.03, 0.03, 0, 0.03, 0.04, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, inside_diameter / 2 + bottom_radius, 0, bottom_radius)
            arc1Segment = arc1
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3
            line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2)
            arc2.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc3 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
            arc3.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            line1Segment.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgTANGENT") '相切

            point1 = line1.GetEndPoint2()
            point2 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line2.GetEndPoint2()
            point2 = line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc3.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直

            point1 = arc1.GetCenterPoint2
            point2 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = one_Step_height

            point1 = arc1.GetCenterPoint2
            point2 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = one_Step_height + two_steps_height

            point1 = arc1.GetCenterPoint2
            point2 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.04, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = shoulder_width / 2
            point1 = arc1.GetCenterPoint2
            point2 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = top_width / 2



            line01.Select4(False, Nothing)
            line1Segment.SelectChain(True, Nothing)
            part.SketchMirror()
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, inside_diameter / 2 + 2 * bottom_radius, 0) '修剪到最近端
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, inside_diameter / 2 + 2 * bottom_radius, 0) '修剪到最近端
            arc2.Select4(False, Nothing)
            part.AddHorizontalDimension2(-0.6 * inside_diameter, -0.6 * inside_diameter, 0)
            arc2.Select4(False, Nothing)
            part.SketchManager.CreateConstructionGeometry()
            'SketchManager.SketchTrim(0, 0, -内径 / 2, 0) '修剪到最近端
            arc3.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -outer_diameter / 2 + 2 * bottom_radius, 0) '修剪到最近端



            'Sketch.N


            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            part.ClearSelection2(True)

            '添加尺寸注释
            'part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            point1 = line1.GetEndPoint2
            point2 = arc1.GetCenterPoint2
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            Dline1Segment = Dline1
            Dline1Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X + 0.01, point1.Y - one_Step_height / 2, 0)
            point1 = line2.GetEndPoint2
            Dline1Segment.Select4(False, Nothing)
            point1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X + 0.02, point1.Y - two_steps_height / 2, 0)
            Dpoint1 = part.SketchManager.CreatePoint(-point1.X, point1.Y, 0)
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            Dline2Segment = Dline1
            Dline2Segment.Select4(False, Nothing)
            Dpoint1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(Dpoint1.X + top_width / 2, Dpoint1.Y + 0.005, 0)
            point1 = line2.GetStartPoint2
            Dpoint2 = part.SketchManager.CreatePoint(-point1.X, point1.Y, 0)
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            Dline3Segment = Dline1
            Dline3Segment.Select4(False, Nothing)
            Dpoint2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(Dpoint2.X + shoulder_width / 2, Dpoint2.Y + 0.01, 0)
            arc1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(arc1.GetCenterPoint2.X + bottom_radius * 2, arc1.GetCenterPoint2.Y - bottom_radius * 2, 0)

            line01.Select4(False, Nothing)
            line1Segment.SelectChain(True, Nothing)
            Dline1Segment.Select4(True, Nothing)
            Dline2Segment.Select4(True, Nothing)
            Dline3Segment.Select4(True, Nothing)
            Dpoint2.Select4(True, Nothing)
            Dpoint1.Select4(True, Nothing)
            SelectionMgr.SetSelectedObjectMark(1, 2, 0)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * Relative_Y_axis_deflection_angle / 180)


            '插入注释
            point1 = line3.IGetEndPoint2
            point1.Select4(False, Nothing)
            Dim myNote As Object
            myNote = part.InsertNote(number.ToString + "槽")
            myNote.GetAnnotation.SetLeader3(3, 0, True, True, True, False)
            myNote.GetAnnotation.SetPosition(point1.X + 0.01 / 图纸比例值, point1.Y + 0.02 / 图纸比例值, 0)
            part.ClearSelection2(True)


            If Slot_Gtol = "" Then
            Else
                '插入形位公差
                line01.Select4(False, Nothing)
                part.EditDelete()
                point1 = line3.IGetStartPoint2
                line1 = part.SketchManager.CreateCenterLine((point1.X + Dpoint1.X) / 2, (point1.Y + Dpoint1.Y) / 2, 0, arc1.IGetCenterPoint2.X, arc1.IGetCenterPoint2.Y, 0)
                point1 = line1.GetStartPoint2
                SketchSegment = line1
                SketchSegment.Select4(False, Nothing)
                part.Extension.SelectByID2(SketchSegment.GetName(), "SKETCHSEGMENT", point1.X, point1.Y, 0, False, 0, Nothing, 0)
                Dim myGtol As Object
                Dim myAnno As Object
                myGtol = part.InsertGtol()
                myGtol.SetFrameSymbols2(1, Slot_Gtol, False, "", False, "", DatumMC1, "", "") '数量，类型，直径
                myGtol.SetFrameValues(1, Slot_Gtol_Value, "", Slot_Gtol_datum, "", "")
                myAnno = myGtol.GetAnnotation()
                myAnno.SetPosition(point1.X - 0.03 / 图纸比例值, (point1.Y + Dpoint1.Y) / 2 + 0.02 / 图纸比例值, 0)
                myGtol.GetAnnotation.SetLeader3(3, 0, True, False, False, False)
            End If



            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)




            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter# / 2)
            SketchSegment = arc1
            SketchSegment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2((inside_diameter# / 2) * 0.8 * Cos(150 * PI / 180), (inside_diameter# / 2) * 0.8 * Sin(150 * PI / 180), 0)
            SketchSegment.Select4(False, Nothing)
            SketchManager.CreateConstructionGeometry() '设为构造线
            SketchSegment.Select4(False, Nothing)
            part.UnblankSketch() '显示
        End Sub

        Public Sub Round_bottom_slot_定制铁芯(Relative_Y_axis_deflection_angle#, number#, bottom_radius#, outer_diameter#,
                                             inside_diameter#, shoulder_width#, top_width#, one_Step_height#, two_steps_height#, Optional Slot_Gtol$ = "<IGTOL-POSI>", Optional Slot_Gtol_Value$ = "0.08", Optional Slot_Gtol_datum$ = "A",
                                             Optional DatumMC1$ = "<MOD-MMC>", Optional 图纸比例值# = 1) '相对Y轴偏转角度#, 槽口数#, 槽口底圆半径#, 外径#, 内径#, 肩宽#, 顶宽#, 一阶高#, 二阶高

            bottom_radius = bottom_radius / 1000
            outer_diameter = outer_diameter / 1000
            inside_diameter = inside_diameter / 1000
            shoulder_width = shoulder_width / 1000
            top_width = top_width / 1000
            one_Step_height = one_Step_height / 1000
            two_steps_height = two_steps_height / 1000





            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3 As SldWorks.SketchLine
            Dim Dline1, Dline2, Dline3 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, line2Segment, line3Segment, arc2, arc3, line01, Dline1Segment, Dline2Segment, Dline3Segment, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2, Dpoint1, Dpoint2 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            line1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            line2 = part.SketchManager.CreateLine(0.02, 0.02, 0, 0.02, 0.03, 0)
            line3 = part.SketchManager.CreateLine(0.03, 0.03, 0, 0.03, 0.04, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, inside_diameter / 2 + bottom_radius, 0, bottom_radius)
            arc1Segment = arc1
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3
            line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter / 2)
            arc2.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc3 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
            arc3.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            line1Segment.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgTANGENT") '相切

            point1 = line1.GetEndPoint2()
            point2 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line2.GetEndPoint2()
            point2 = line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc3.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直

            point1 = arc1.GetCenterPoint2
            point2 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = one_Step_height

            point1 = arc1.GetCenterPoint2
            point2 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = one_Step_height + two_steps_height

            point1 = arc1.GetCenterPoint2
            point2 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.04, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = shoulder_width / 2
            point1 = arc1.GetCenterPoint2
            point2 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = top_width / 2



            line01.Select4(False, Nothing)
            line1Segment.SelectChain(True, Nothing)
            part.SketchMirror()
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, inside_diameter / 2 + 2 * bottom_radius, 0) '修剪到最近端
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, inside_diameter / 2 + 2 * bottom_radius, 0) '修剪到最近端
            arc2.Select4(False, Nothing)
            part.AddHorizontalDimension2(-0.6 * inside_diameter, -0.6 * inside_diameter, 0)
            arc2.Select4(False, Nothing)
            part.SketchManager.CreateConstructionGeometry()
            'SketchManager.SketchTrim(0, 0, -内径 / 2, 0) '修剪到最近端
            arc3.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -outer_diameter / 2 + 2 * bottom_radius, 0) '修剪到最近端



            'Sketch.N


            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            part.ClearSelection2(True)

            '添加尺寸注释
            'part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            point1 = line1.GetEndPoint2
            point2 = arc1.GetCenterPoint2
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            Dline1Segment = Dline1
            Dline1Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X + 0.01, point1.Y - one_Step_height / 2, 0)
            point1 = line2.GetEndPoint2
            Dline1Segment.Select4(False, Nothing)
            point1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X + 0.02, point1.Y - two_steps_height / 2, 0)
            Dpoint1 = part.SketchManager.CreatePoint(-point1.X, point1.Y, 0)
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            Dline2Segment = Dline1
            Dline2Segment.Select4(False, Nothing)
            Dpoint1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(Dpoint1.X + top_width / 2, Dpoint1.Y + 0.005, 0)
            point1 = line2.GetStartPoint2
            Dpoint2 = part.SketchManager.CreatePoint(-point1.X, point1.Y, 0)
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            Dline3Segment = Dline1
            Dline3Segment.Select4(False, Nothing)
            Dpoint2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(Dpoint2.X + shoulder_width / 2, Dpoint2.Y + 0.01, 0)
            arc1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(arc1.GetCenterPoint2.X + bottom_radius * 2, arc1.GetCenterPoint2.Y - bottom_radius * 2, 0)

            line01.Select4(False, Nothing)
            line1Segment.SelectChain(True, Nothing)
            Dline1Segment.Select4(True, Nothing)
            Dline2Segment.Select4(True, Nothing)
            Dline3Segment.Select4(True, Nothing)
            Dpoint2.Select4(True, Nothing)
            Dpoint1.Select4(True, Nothing)
            SelectionMgr.SetSelectedObjectMark(1, 2, 0)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * Relative_Y_axis_deflection_angle / 180)


            '插入注释
            point1 = line3.IGetEndPoint2
            point1.Select4(False, Nothing)
            Dim myNote As Object
            myNote = part.InsertNote(number.ToString + "槽")
            myNote.GetAnnotation.SetLeader3(3, 0, True, True, True, False)
            myNote.GetAnnotation.SetPosition(point1.X + 0.01 / 图纸比例值, point1.Y + 0.02 / 图纸比例值, 0)
            part.ClearSelection2(True)


            If Slot_Gtol = "" Then
            Else
                '插入形位公差
                line01.Select4(False, Nothing)
                part.EditDelete()
                point1 = line3.IGetStartPoint2
                line1 = part.SketchManager.CreateCenterLine((point1.X + Dpoint1.X) / 2, (point1.Y + Dpoint1.Y) / 2, 0, arc1.IGetCenterPoint2.X, arc1.IGetCenterPoint2.Y, 0)
                point1 = line1.GetStartPoint2
                SketchSegment = line1
                SketchSegment.Select4(False, Nothing)
                part.Extension.SelectByID2(SketchSegment.GetName(), "SKETCHSEGMENT", point1.X, point1.Y, 0, False, 0, Nothing, 0)
                Dim myGtol As Object
                Dim myAnno As Object
                myGtol = part.InsertGtol()
                myGtol.SetFrameSymbols2(1, Slot_Gtol, False, "", False, "", DatumMC1, "", "") '数量，类型，直径
                myGtol.SetFrameValues(1, Slot_Gtol_Value, "", Slot_Gtol_datum, "", "")
                myAnno = myGtol.GetAnnotation()
                myAnno.SetPosition(point1.X - 0.03 / 图纸比例值, (point1.Y + Dpoint1.Y) / 2 + 0.02 / 图纸比例值, 0)
                myGtol.GetAnnotation.SetLeader3(3, 0, True, False, False, False)
            End If



            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)




            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            Feature1 = 特征阵列_angle(6, Relative_Y_axis_deflection_angle)

            Feature1.Select2(False, 4)
            'Feature.Select2(True, 1)
            基准轴Z.Select2(True, 1)
            特征阵列_等间距(4)

            'part.FeatureManager.FeatureCircularPattern5(number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            '基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, inside_diameter# / 2)
            SketchSegment = arc1
            SketchSegment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2((inside_diameter# / 2) * 0.8 * Cos(150 * PI / 180), (inside_diameter# / 2) * 0.8 * Sin(150 * PI / 180), 0)
            SketchSegment.Select4(False, Nothing)
            SketchManager.CreateConstructionGeometry() '设为构造线
            SketchSegment.Select4(False, Nothing)
            part.UnblankSketch() '显示
        End Sub

        Public Sub Trapezoid_slot_定制铁芯(Relative_Y_axis_deflection_angle#, number#, bottom_width#, outer_diameter#, top_width#, height#, Optional Slot_Gtol$ = "<IGTOL-POSI>", Optional Slot_Gtol_Value$ = "0.08", Optional Slot_Gtol_datum$ = "A",
                                             Optional DatumMC1$ = "<MOD-MMC>", Optional 图纸比例值# = 1) '相对Y轴偏转角度#, 槽口数#, 槽口底圆半径#, 外径#, 内径#, 肩宽#, 顶宽#, 一阶高#, 二阶高

            bottom_width = bottom_width / 1000
            outer_diameter = outer_diameter / 1000
            top_width = top_width / 1000
            height = height / 1000






            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3 As SldWorks.SketchLine
            Dim Dline1, Dline2, Dline3 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, line2Segment, line3Segment, arc2, arc3, line01, Dline1Segment, Dline2Segment, Dline3Segment, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2, Dpoint1, Dpoint2 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            line1 = part.SketchManager.CreateLine(0.01, 0.02, 0, 0.01, 0.01, 0)
            line2 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.02, 0.01, 0)
            line3 = part.SketchManager.CreateLine(0.02, 0.01, 0, 0.02, 0.02, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
            arc1Segment = arc1
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3
            line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            line2Segment.Select2(False, Nothing)
            草图方法_new("水平")


            point1 = line1.GetStartPoint2()
            point2 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            line01.Select4(True, Nothing)
            草图方法_new("对称")

            point1 = line1.GetEndPoint2()
            point2 = line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            line01.Select4(True, Nothing)
            草图方法_new("对称")


            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            DisplayDimension = P1L1D_new(line1.GetStartPoint2, line01, 0.01)
            尺寸数值_new(top_width / 2)
            尺寸属性(8, "", "h8")


            DisplayDimension = L1D_new(line2Segment, 0.01)
            尺寸数值_new(bottom_width)
            尺寸属性(8, "", "h8")

            DisplayDimension = L1VD(line1, line1.GetStartPoint2, 0.01)
            尺寸数值_new(height)
            尺寸属性(8, "", "h8")

            arc1.Select2(False, 0)
            SketchManager.SketchTrim(0, 0, -outer_diameter / 2, 0) '修剪到最近端


            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)




            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            Feature.Select2(True, 4)
            特征阵列_等间距(4)
            'MsgBox(666)

        End Sub


        Public Sub middle_hole1(Relative_Y_axis_deflection_angle#, diameter#, slot_width#, Left_high#, Right_high#, Optional slot_width_TolType% = 8, Optional slot_width_TolMax# = 0,
                                        Optional slot_width_TolMin# = 0, Optional slot_width_TolMaxFit$ = "H9", Optional slot_width_TolMinFit$ = ""， Optional middle_hole_diameter_TolType% = 8,
                                        Optional middle_hole_diameter_TolMax# = 0, Optional middle_hole_diameter_TolMin# = 0, Optional middle_hole_diameter_TolMaxFit$ = "H8",
                                        Optional middle_hole_diameter_TolMinFit$ = "", Optional Datum$ = "A"， Optional 图纸比例值# = 1) '标注槽边长的高‘（相对Y轴偏转角度#, 直径#, 槽宽#, 左高#, 右高#）

            diameter = diameter / 1000
            slot_width = slot_width / 1000
            Left_high = Left_high / 1000
            Right_high = Right_high / 1000
            slot_width_TolMax = slot_width_TolMax / 1000
            slot_width_TolMin = slot_width_TolMin / 1000
            middle_hole_diameter_TolMax = middle_hole_diameter_TolMax / 1000
            middle_hole_diameter_TolMin = middle_hole_diameter_TolMax / 1000



            Dim Dline1, Dline2, Dline3 As SldWorks.SketchLine
            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, line2Segment, line3Segment, SketchSegment, Dline1Segment, Dline2Segment, Dline3Segment, line01 As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            line1 = part.SketchManager.CreateLine(0.001, 0.001, 0, 0.001, 0.002, 0)
            line2 = part.SketchManager.CreateLine(0.002, 0.002, 0, 0.003, 0.002, 0)
            line3 = part.SketchManager.CreateLine(0.003, 0.004, 0, 0.003, 0.003, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, diameter / 2)
            arc1Segment = arc1
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直
            line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = line1.GetEndPoint2()
            point2 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line2.GetEndPoint2()
            point2 = line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            '注意添加尺寸的顺序,要求添加尺寸后草图形状结构不发生变化
            line3Segment.Select4(False, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = Right_high

            line1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddVerticalDimension2(-0.1, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = Left_high

            line2Segment.Select4(False, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = slot_width

            point2 = arc1.GetCenterPoint2
            line3Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.03, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = slot_width / 2

            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, diameter / 2, 0) '修剪到最近端
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, diameter / 2, 0)


            删除约束()


            '添加尺寸注释
            'part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            point1 = line1.GetStartPoint2
            point2 = line1.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            Dline1Segment = Dline1
            Dline1Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X - 0.015 / 图纸比例值, (point1.Y + point2.Y) / 2, 0)
            point1 = line3.GetStartPoint2
            point2 = line3.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            Dline2Segment = Dline1
            Dline2Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X + 0.015 / 图纸比例值, (point1.Y + point2.Y) / 2, 0)
            point1 = line2.GetStartPoint2
            point2 = line2.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            Dline3Segment = Dline1
            Dline3Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2((point1.X + point2.X) / 2, (point1.Y + point2.Y) / 2 + 0.015 / 图纸比例值, 0)
            part.EditDimensionProperties2(slot_width_TolType, slot_width_TolMax#, slot_width_TolMin#, slot_width_TolMaxFit, slot_width_TolMinFit, True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = slot_width_TolType%
            DimensionTolerance.SetFitValues(slot_width_TolMaxFit, slot_width_TolMinFit)
            DisplayDimension.ShowTolParenthesis = True '显示括号


            arc1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-0.5 * diameter / 2, 0.5 * diameter / 2, 0)
            DisplayDimension.Diametric = True
            part.EditDimensionProperties2(middle_hole_diameter_TolType%, middle_hole_diameter_TolMax#, middle_hole_diameter_TolMin#, middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = middle_hole_diameter_TolType%
            DimensionTolerance.SetFitValues(middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$)
            DisplayDimension.ShowTolParenthesis = True '显示括号



            part.ClearSelection2(True)
            'MsgBox(arc1Segment.GetName)
            If Datum = "" Then
            Else
                part.Extension.SelectByID2(arc1Segment.GetName(), "SKETCHSEGMENT", arc1.GetRadius * Cos(PI * (110 - Relative_Y_axis_deflection_angle) / 180), arc1.GetRadius * Sin(PI * (110 - Relative_Y_axis_deflection_angle) / 180), 0, False, 0, Nothing, 0)
                Dim myDatumTag As SldWorks.DatumTag
                part.ShowNamedView2("*前视", 1)
                myDatumTag = part.InsertDatumTag2()
                myDatumTag.SetLabel(Datum) '插入基准
                myDatumTag.SetDisplayStyle(False, 2)
                myDatumTag.FilledTriangle = True
                myDatumTag.Shoulder = True
            End If

            旋转草图(line01, Relative_Y_axis_deflection_angle)

            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
        End Sub '高为槽底到槽顶的距离
        Public Sub middle_hole2(相对Y轴偏转角度#, 直径#, 槽宽#, 左高#, 右高#， Optional slot_width_TolType% = 8, Optional slot_width_TolMax# = 0, Optional slot_width_TolMin# = 0, Optional slot_width_TolMaxFit$ = "H9", Optional slot_width_TolMinFit$ = "",
                                      Optional middle_hole_diameter_TolType% = 8, Optional middle_hole_diameter_TolMax# = 0, Optional middle_hole_diameter_TolMin# = 0, Optional middle_hole_diameter_TolMaxFit$ = "H8",
                                        Optional middle_hole_diameter_TolMinFit$ = "", Optional Datum$ = "A"， Optional 图纸比例值# = 1) '圆底到槽顶高

            直径 = 直径 / 1000
            槽宽 = 槽宽 / 1000
            左高 = 左高 / 1000
            右高 = 右高 / 1000
            slot_width_TolMax = slot_width_TolMax / 1000
            slot_width_TolMin = slot_width_TolMin / 1000
            middle_hole_diameter_TolMax = middle_hole_diameter_TolMax / 1000
            middle_hole_diameter_TolMin = middle_hole_diameter_TolMax / 1000






            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3 As SldWorks.SketchLine
            Dim point0 As SldWorks.SketchPoint
            Dim Dline1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, line2Segment, line3Segment, SketchSegment, Dline1Segment, Dline2Segment, Dline3Segment, line01 As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint
            Dim Dpoint1, Dpoint2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            line1 = part.SketchManager.CreateLine(0.001, 0.001, 0, 0.001, 0.002, 0)
            line2 = part.SketchManager.CreateLine(0.002, 0.002, 0, 0.003, 0.002, 0)
            line3 = part.SketchManager.CreateLine(0.003, 0.004, 0, 0.003, 0.003, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 直径 / 2)
            point0 = part.SketchManager.CreatePoint(0, -直径 / 2, 0)
            Dline1 = part.SketchManager.CreateCenterLine(0, -直径 / 2, 0, 0.001, -直径 / 2, 0)
            Dline1Segment = Dline1
            arc1Segment = arc1
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3


            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直
            line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1Segment.Select4(False, Nothing)
            part.AddDimension2(-直径 / 2 / 2, -直径 / 2 / 2, 0)
            line2Segment.Select4(False, Nothing)
            part.AddVerticalDimension2((line2.GetStartPoint2.X + line2.GetEndPoint2.X) / 2, (line2.GetStartPoint2.Y + line2.GetEndPoint2.Y) / 2, 0)
            point0.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            Dline1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = line1.GetEndPoint2()
            point2 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line2.GetEndPoint2()
            point2 = line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合


            '注意添加尺寸的顺序,要求添加尺寸后草图形状结构不发生变化
            point1 = line3.GetStartPoint2
            point1.Select4(False, Nothing)
            Dline1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X * 2, point1.Y - 直径 / 2, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 右高

            point1 = line1.GetEndPoint2
            point1.Select4(False, Nothing)
            Dline1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X * 2, point1.Y - 直径 / 2, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 左高

            point1 = line2.GetEndPoint2
            point1.Select4(False, Nothing)
            line1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(point1.X - 槽宽 / 2, point1.Y + 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽宽

            point2 = arc1.GetCenterPoint2
            line3Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(0.01, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 槽宽 / 2
            part.Extension.SelectByID2(DisplayDimension.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            part.EditDelete()

            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 直径 / 2, 0) '修剪到最近端
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 直径 / 2, 0)

            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch

            'Sketch.GetSketchContours()
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            part.SketchConstraintsDelAll()


            '添加尺寸注释
            'part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            point1 = line1.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(0, -直径 / 2, 0, 0.001, -直径 / 2, 0)
            Dline1Segment = Dline1
            Dline1Segment.Select4(False, Nothing)
            point1.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(（槽宽 / 2） + 0.01 / 图纸比例值, 0, 0)



            If Not 左高 = 右高 Then
                point1 = line3.GetStartPoint2
                point2 = line1.GetEndPoint2
                P1P2VD(point1, point2, point1, 0.01 / 图纸比例值)
            End If

            'Dline1Segment.Select4(False, Nothing)
            'point1.Select4(True, Nothing)
            'DisplayDimension = part.AddDimension2(直径 / 3, 0, 0)



            point1 = line2.GetStartPoint2
            point2 = line2.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            Dline3Segment = Dline1
            Dline3Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2((point1.X + point2.X) / 2, (point1.Y + point2.Y) / 2 + 0.01 / 图纸比例值, 0)
            尺寸属性(slot_width_TolType, slot_width_TolMaxFit, slot_width_TolMinFit)


            arc1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDimension2(-0.5 * 直径 / 2, 0.5 * 直径 / 2, 0)
            DisplayDimension.Diametric = True
            尺寸属性(middle_hole_diameter_TolType%, middle_hole_diameter_TolMaxFit$, middle_hole_diameter_TolMinFit$, 前缀:="<MOD-DIAM>")


            'part.ClearSelection2(True)
            'MsgBox(arc1Segment.GetName)
            If Datum = "" Then
            Else
                part.Extension.SelectByID2(arc1Segment.GetName(), "SKETCHSEGMENT", arc1.GetRadius * Cos(PI * (110 - 相对Y轴偏转角度) / 180), arc1.GetRadius * Sin(PI * (110 - 相对Y轴偏转角度) / 180), 0, False, 0, Nothing, 0)
                Dim myDatumTag As SldWorks.DatumTag
                part.ShowNamedView2("*前视", 1)
                myDatumTag = part.InsertDatumTag2()
                myDatumTag.SetLabel(Datum) '插入基准
                myDatumTag.SetDisplayStyle(False, 2)
                myDatumTag.FilledTriangle = True
                myDatumTag.Shoulder = True
            End If



            旋转草图(line01, 相对Y轴偏转角度)


            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            part.SelectionManager.EnableContourSelection = False
        End Sub '高为孔底到槽顶的距离
        Public Sub Square_hole(Centerdistance_or_verticalsidelength#, diameter#, horizontal_side_length#, Optional verticalsidelength% = 0, Optional 尺寸标注# = 1, Optional Array_number# = 1， Optional DimensionProperties% = 0) '中心距#, 直径#, 横向边长#

            Centerdistance_or_verticalsidelength = Centerdistance_or_verticalsidelength / 1000
            diameter = diameter / 1000
            horizontal_side_length = horizontal_side_length / 1000






            If verticalsidelength = 1 Then
                Centerdistance_or_verticalsidelength = Sqrt(Pow(Centerdistance_or_verticalsidelength / 2, 2) + Pow(horizontal_side_length / 2, 2))
            End If



            Dim arc1 As SldWorks.SketchArc
            Dim line1Segment, sketchsegment As SldWorks.SketchSegment
            Dim point1 As SldWorks.SketchPoint
            Dim Dpoint0, Dpoint1, Dpoint2, Dpoint3 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            SketchManager.CreateCenterRectangle(0, 0, 0, horizontal_side_length / 2, Centerdistance_or_verticalsidelength * Sin(Acos(horizontal_side_length / 2 / Centerdistance_or_verticalsidelength)), 0)
            MsgBox(0)
            part.ClearSelection2(True)
            part.Extension.SelectByID2("Point1", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            MsgBox(1)
            Dpoint0 = point1
            MsgBox(2)
            part.Extension.SelectByID2("Point5", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            MsgBox(3)
            Dpoint1 = point1
            MsgBox(4)
            arc1 = SketchManager.CreateCircleByRadius(point1.X, point1.Y, point1.Z, diameter / 2)
            sketchsegment = arc1
            part.Extension.SelectByID2("Point2", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            Dpoint2 = point1
            MsgBox(5)
            SketchManager.CreateCircleByRadius(point1.X, point1.Y, point1.Z, diameter / 2)
            part.Extension.SelectByID2("Point3", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            Dpoint3 = point1
            MsgBox(6)
            SketchManager.CreateCircleByRadius(point1.X, point1.Y, point1.Z, diameter / 2)
            part.Extension.SelectByID2("Point4", "SKETCHPOINT", 0, 0, 0, False, 0, Nothing, 0)
            point1 = SelectionMgr.GetSelectedObject6(1, -1)
            MsgBox(7)
            SketchManager.CreateCircleByRadius(point1.X, point1.Y, point1.Z, diameter / 2)

            If 尺寸标注 = 1 Then

                If verticalsidelength = 1 Then
                    Dpoint1.Select4(False, Nothing)
                    Dpoint2.Select4(True, Nothing)
                    part.AddDimension2((Dpoint1.X + Dpoint2.X) / 2 + 0.01, (Dpoint1.Y + Dpoint2.Y) / 2, 0)
                Else
                    '辅助圆弧尺寸(Dpoint0, Dpoint2)
                End If

                Dpoint1.Select4(False, Nothing)
                Dpoint3.Select4(True, Nothing)
                part.AddDimension2((Dpoint1.X + Dpoint3.X) / 2, (Dpoint1.Y + Dpoint3.Y) / 2 - 0.01, 0)
                part.Extension.EditDimensionProperties(DimensionProperties, 0, 0, "", "", True, 9, 2, True, 12, 12, "", "", True, "", "", "", False, 1, "")
                'MsgBox(666)
                sketchsegment.Select4(False, Nothing)
                part.AddDiameterDimension2(arc1.GetCenterPoint2.x + （arc1.GetRadius + 0.01） * Cos(60 * PI / 180), arc1.GetCenterPoint2.y + （arc1.GetRadius + 0.01） * Sin(60 * PI / 180), 0)
                part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, (4 * Array_number).ToString + "×" + "<MOD-DIAM>", "", True, "", "", "", False, 1, "")
            Else
            End If



            part.ClearSelection2(True)
            part.Extension.SelectByID2("Line1", "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
            line1Segment = SelectionMgr.GetSelectedObject6(1, -1)
            line1Segment.SelectChain(False, Nothing)
            part.EditDelete() '删除对角线

            'FeatureManager.FeatureCut4(True, False, True, 1, 0, 0.01, 0.01, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
            'part.Extension.SelectByID2("Arc1", "SKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
            'part.Extension.SelectByID2("Arc2", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            'part.Extension.SelectByID2("Arc3", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            'part.Extension.SelectByID2("Arc4", "SKETCHSEGMENT", 0, 0, 0, True, 0, Nothing, 0)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            'MsgBox(666)
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(Array_number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏



            If 尺寸标注 = 1 Then

                If verticalsidelength = 1 Then
                Else
                    辅助圆弧尺寸(Dpoint0, Dpoint2, -1)
                End If
            Else
            End If
        End Sub
        Public Function round_hole(Number#, center_distance#, diameter#, relative_X_axis_deflection_angle#, Optional Phase_angle# = 0, Optional 后缀$ = "") As Double 'Phase_angle#两模块尺寸间距
            'Number of holes#, center distance#, aperture#, relative X axis deflection angle#，两模块尺寸相间角度
            center_distance = center_distance / 1000
            diameter = diameter / 1000


            Dim arc1, arc2 As SldWorks.SketchArc
            Dim line1, line2 As SldWorks.SketchLine
            Dim arc1Segment, arc2Segment, line1Segment, line2Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint
            Dim Dpoint1, Dpoint2 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)

            line1 = part.SketchManager.CreateLine(0, 0, 0, 0.01, 0, 0)
            line2 = part.SketchManager.CreateLine(0, 0, 0, 0.01, 0.01, 0)
            arc1 = SketchManager.CreateCircleByRadius(0, 0, 0, center_distance)
            arc2 = SketchManager.CreateCircleByRadius(0, 0, 0, diameter / 2)
            arc1Segment = arc1
            arc2Segment = arc2
            line1Segment = line1
            line2Segment = line2
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            If Not arc1Segment Is Nothing Then
                arc1Segment.Select4(False, Nothing)
                part.SketchAddConstraints("sgFIXED") '固定
                arc1Segment.Select4(False, Nothing)
                DisplayDimension = part.AddDimension2(-center_distance * Cos(Phase_angle * PI / 180) * 0.7, -center_distance * Sin(Phase_angle * PI / 180) * 0.7, 0)
                DisplayDimension.Diametric = False
            Else
            End If
            'arc1Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            point1 = line2.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            line1Segment.Select4(False, Nothing)
            If Not arc1Segment Is Nothing Then
                arc1Segment.Select4(True, Nothing)
            Else
            End If
            'line1Segment.Select4(True, Nothing)
            line2Segment.Select4(True, Nothing)
            SketchManager.CreateConstructionGeometry() '设为构造线

            line1Segment.Select4(False, Nothing)
            line2Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(center_distance * Cos(PI * relative_X_axis_deflection_angle / 2 / 180), center_distance * Sin(PI * relative_X_axis_deflection_angle / 2 / 180), 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = PI * relative_X_axis_deflection_angle / 180
            '


            point1 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            If Not arc1Segment Is Nothing Then
                arc1Segment.Select4(True, Nothing)
            Else
            End If
            part.SketchAddConstraints("sgCOINCIDENT") '重合

            point1 = line2.GetEndPoint2()
            point2 = arc2.GetCenterPoint2
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并

            arc2Segment.Select4(False, Nothing)
            arc2 = arc2Segment
            Dpoint1 = arc2.GetCenterPoint2
            DisplayDimension = part.AddDimension2(Dpoint1.X + diameter * 0.5 * Cos(PI * 45 / 180) + 0.01, Dpoint1.Y + diameter * 0.5 * Sin(PI * 45 / 180) + 0.01, 0)
            'part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
            part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, Number.ToString + "×" + "<MOD-DIAM>", 后缀, True, "", "", "", False, 1, "")

            arc2Segment.Select4(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(Number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


        End Function '阵列圆孔
        Public Function round_hole_negative(Number#, center_distance#, diameter#, relative_X_axis_deflection_angle#, Optional Phase_angle# = 0， Optional 尺寸标注% = 1) As Double 'Phase_angle#两模块尺寸间距
            'Number of holes#, center distance#, aperture#, relative X axis deflection angle#，两模块尺寸相间角度
            round_hole_negative = 0
            center_distance = center_distance / 1000
            diameter = diameter / 1000

            Dim arc1, arc2 As SldWorks.SketchArc
            Dim line1, line2 As SldWorks.SketchLine
            Dim arc1Segment, arc2Segment, line1Segment, line2Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint
            Dim Dpoint1, Dpoint2 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)


            line2 = part.SketchManager.CreateLine(0, 0, 0, 0.001, -0.001, 0)
            line1 = part.SketchManager.CreateLine(0, 0, 0, 0.001, 0, 0)
            arc1 = SketchManager.CreateCircleByRadius(0, 0, 0, center_distance)
            arc2 = SketchManager.CreateCircleByRadius(0, 0, 0, diameter / 2)
            arc1Segment = arc1
            arc2Segment = arc2
            line1Segment = line1
            line2Segment = line2
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            If Not arc1Segment Is Nothing Then

                arc1Segment.Select4(False, Nothing)
                part.SketchAddConstraints("sgFIXED") '固定
                If 尺寸标注 = 1 Then
                    arc1Segment.Select4(False, Nothing)
                    DisplayDimension = part.AddDimension2(-center_distance * Cos(Phase_angle * PI / 180) / 2, -center_distance * Sin(Phase_angle * PI / 180) / 2, 0)
                    DisplayDimension.Diametric = False
                End If

            Else
            End If
            'arc1Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            point1 = line2.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            line1Segment.Select4(False, Nothing)
            If Not arc1Segment Is Nothing Then
                arc1Segment.Select4(True, Nothing)
            Else
            End If
            'line1Segment.Select4(True, Nothing)
            line2Segment.Select4(True, Nothing)
            SketchManager.CreateConstructionGeometry() '设为构造线


            line2Segment.Select4(False, Nothing)
            line1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddDimension2(center_distance * Cos(PI * relative_X_axis_deflection_angle / 2 / 180), -center_distance * Sin(PI * relative_X_axis_deflection_angle / 2 / 180), 0) '尺寸的放置位置和标注的尺寸方向有关联
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = PI * relative_X_axis_deflection_angle / 180

            point1 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            If Not arc1Segment Is Nothing Then
                arc1Segment.Select4(True, Nothing)
            Else
            End If
            part.SketchAddConstraints("sgCOINCIDENT") '重合

            point1 = line2.GetEndPoint2()
            point2 = arc2.GetCenterPoint2
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并

            arc2Segment.Select4(False, Nothing)
            arc2 = arc2Segment
            Dpoint1 = arc2.GetCenterPoint2
            part.AddDimension2(Dpoint1.X + diameter * 0.8, Dpoint1.Y + diameter * 0.8, 0)
            arc2Segment.Select4(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(Number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


            round_hole_negative += 1

        End Function '反向阵列圆孔
        Public Sub deflection_array_of_circular_holes(Array_number#, hole_number#, relative_Y_axis_deflection_angle#, hole_angle#， center_distance#, diameter#， Optional Phase_angle# = 0, Optional deflection_distance_Y# = 0， Optional 图纸比例值# = 1， Optional 尺寸方向% = 1)
            '阵列数#, 孔数#, 相对Y轴偏转角度#, 孔间角度#， 圆心距#, 直径#， 偏转距离Y#
            'Array number#, hole number#, relative Y axis deflection angle#, hole angle#, center distance#, diameter#, deflection distance Y#

            center_distance = center_distance / 1000
            diameter = diameter / 1000
            deflection_distance_Y = deflection_distance_Y / 1000





            Dim arc1 As SldWorks.SketchArc
            Dim line1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, arc2, line01, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置(0)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, center_distance, 0, diameter / 2)

            part.ViewZoomtofit2()
            arc1Segment = arc1




            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            arc1Segment.Select4(False, Nothing)
            line01.Select4(True, Nothing)

            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * relative_Y_axis_deflection_angle / 180)
            part.Extension.RotateOrCopy(True, hole_number - 1, False, 0, 0, 0, 0, 0, 1, PI * hole_angle / 180)

            part.ClearSelection2(True)
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 0, deflection_distance_Y, 0)


            arc1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddDiameterDimension2(arc1.GetCenterPoint2.x + arc1.GetRadius * Cos(60 * PI / 180) + 0.01 / 图纸比例值, arc1.GetCenterPoint2.y + arc1.GetRadius * Sin(60 * PI / 180) + 0.01 / 图纸比例值, 0)
            part.Extension.EditDimensionProperties(0, 0, 0, "", "", True, 9, 2, True, 12, 12, hole_number.ToString + "×" + "<MOD-DIAM>", "", True, "", "", "两组对称", False, 1, "")



            arc1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(Array_number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


            'If deflection_distance_Y# = 0 Then
            '    arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, center_distance#)
            '    SketchSegment = arc1
            '    If SketchSegment Is Nothing Then
            '    Else
            '        SketchSegment.Select4(False, Nothing)
            '        DisplayDimension = part.AddDimension2((center_distance#) * 0.9 * Cos((140 + Phase_angle) * PI / 180), (center_distance#) * 0.9 * Sin((140 + Phase_angle) * PI / 180), 0)
            '        SketchSegment.Select4(False, Nothing)
            '        SketchManager.CreateConstructionGeometry() '设为构造线
            '    End If
            'End If
            If Not center_distance = 0 Then
                part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                P1 = part.SketchManager.CreatePoint(0, deflection_distance_Y, 0)
                P1.Select4(False, Nothing)
                辅助圆弧尺寸(P1, arc1.IGetCenterPoint2， 尺寸方向)
                part.SketchManager.InsertSketch(True)
                part.ViewZoomtofit2()
            End If


        End Sub

        Public Sub 偏心阵列圆孔(阵列数#, 孔数#, 相对Y轴偏转角度#, 孔间角度#， 圆心距#, 直径#， 偏转距离Y#)

            Dim arc1 As SldWorks.SketchArc
            Dim line1 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, arc2, line01, SketchSegment As SldWorks.SketchSegment
            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point1, point2 As SldWorks.SketchPoint
            'swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            初始设置(1)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.002, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 圆心距, 0, 直径 / 2)
            part.ViewZoomtofit2()
            arc1Segment = arc1




            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
            arc1Segment.Select4(False, Nothing)
            line01.Select4(True, Nothing)

            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)
            part.Extension.RotateOrCopy(True, 孔数 - 1, False, 0, 0, 0, 0, 0, 1, PI * 孔间角度 / 180)

            part.ClearSelection2(True)
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 0, 偏转距离Y, 0)

            arc1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

        End Sub

        Public Sub Three_rectangular_slots(槽口数#, 相对Y轴偏转角度#, 边槽最大距#,
                                                   边槽最小距#, 边槽槽口最小距#, 边槽槽口宽#,
                                                   中槽宽#, 边槽底高#, 边槽肩高#, 中槽底高#,
                                                   中槽顶高#, 边槽顶高#, 外径#, 圆角R1#, 圆角R2#,
                                                   圆角R3#, 圆角R4#, 圆角R5#, 圆角R6#)
            'Slot Number, relative Y axis deflection angle#, side slot max distance#,
            'Side slot min distance#, side slot slot min distance#, side slot slot width#,
            'Middle slot width#, side slot bottom height#, side slot shoulder height#, middle slot bottom height#,
            'Middle slot top height#, side slot top height#, outer diameter#, Fillet R1#, Fillet R2#,
            'Fillet R3#, Fillet R4#, Fillet R5#, Fillet R6#
            'Dim A1， A2, A3, A4, A5, A6, A7, As SldWorks.SketchArc
            'Dim L1, L2, L3, L4, L5, L6, L7, L8, L9, L10, L11, L01 As SldWorks.SketchLine
            'Dim L1Segment, L2Segment, L3Segment, L4Segment, L5Segment, L6Segment, L7Segment, L8Segment, L9Segment, L10Segment, L11Segment, A1Segment, SketchSegment, L01Segment, L02Segment As SldWorks.SketchSegment
            'Dim P1, P2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            L01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.001, 0)
            L01Segment = L01
            L01Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            初始设置(0)
            L1 = part.SketchManager.CreateLine(0, 中槽底高, 0, 中槽宽 / 2, 中槽底高, 0)
            L1Segment = L1
            L1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            初始设置(1)
            L2 = part.SketchManager.CreateLine(中槽宽 / 2, 中槽底高, 0, 中槽宽 / 2, 中槽顶高#, 0)
            L2Segment = L2
            L2Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L3 = part.SketchManager.CreateLine(中槽宽 / 2, 中槽顶高#, 0, 边槽槽口最小距# / 2, 中槽顶高#, 0)
            L3Segment = L3
            L3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L4 = part.SketchManager.CreateLine(边槽槽口最小距# / 2, 中槽顶高#, 0, 边槽槽口最小距 / 2, 边槽肩高, 0)
            L4Segment = L4
            L4Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L5 = part.SketchManager.CreateLine(边槽槽口最小距 / 2, 边槽肩高, 0, 边槽最小距 / 2, 边槽肩高, 0)
            L5Segment = L5
            L5Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L6 = part.SketchManager.CreateLine(边槽最小距 / 2, 边槽肩高, 0, 边槽最小距 / 2, 边槽底高, 0)
            L6Segment = L6
            L6Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L7 = part.SketchManager.CreateLine(边槽最小距 / 2, 边槽底高, 0, 边槽最大距 / 2, 边槽底高, 0)
            L7Segment = L7
            L7Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L8 = part.SketchManager.CreateLine(边槽最大距 / 2, 边槽底高, 0, 边槽最大距 / 2, 边槽肩高, 0)
            L8Segment = L8
            L8Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L9 = part.SketchManager.CreateLine(边槽最大距 / 2, 边槽肩高, 0, 边槽槽口最小距 / 2 + 边槽槽口宽, 边槽肩高, 0)
            L9Segment = L9
            L9Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L10 = part.SketchManager.CreateLine(边槽槽口最小距 / 2 + 边槽槽口宽, 边槽肩高, 0, 边槽槽口最小距 / 2 + 边槽槽口宽, 边槽顶高, 0)
            P1 = L10.GetEndPoint2
            P1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            L11 = part.SketchManager.CreateLine(边槽槽口最小距 / 2 + 边槽槽口宽, 边槽顶高, 0, 边槽槽口最小距 / 2 + 边槽槽口宽 + 0.001, 边槽顶高, 0)
            L11Segment = L11
            L11Segment.Select4(False, Nothing)
            草图方法("水平")
            A1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            A1Segment = A1
            A1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            P1 = L11.GetEndPoint2
            P1.Select4(False, Nothing)
            A1Segment.Select4(True, Nothing)
            草图方法("重合")

            part.ViewZoomtofit2()

            '圆角
            P1 = L1.GetEndPoint2()
            P1.Select4(False, Nothing)
            A2 = part.SketchManager.CreateFillet(圆角R1, 1)
            P1 = L2.GetEndPoint2()
            P1.Select4(False, Nothing)
            A3 = part.SketchManager.CreateFillet(圆角R2, 1)
            P1 = L5.GetEndPoint2()
            P1.Select4(False, Nothing)
            A4 = part.SketchManager.CreateFillet(圆角R3, 1)
            P1 = L6.GetEndPoint2()
            P1.Select4(False, Nothing)
            A5 = part.SketchManager.CreateFillet(圆角R4, 1)
            P1 = L7.GetEndPoint2()
            P1.Select4(False, Nothing)
            A6 = part.SketchManager.CreateFillet(圆角R5, 1)
            P1 = L8.GetEndPoint2()
            P1.Select4(False, Nothing)
            A7 = part.SketchManager.CreateFillet(圆角R6, 1)


            L1Segment.SelectChain(False, Nothing)
            L01Segment.Select4(True, Nothing)
            草图方法("镜像")
            A1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i




            '添加尺寸
            P1OP2_P1XP3_P2P3(L2.GetStartPoint2.X, L3.IGetEndPoint2.Y, -0.01)
            P1OP2_P1XP3_P2P3(L6.GetStartPoint2.X, L5.IGetEndPoint2.Y, -0.02)
            P1OP2_P1XP3_P2P3(L4.GetStartPoint2.X, L3.IGetEndPoint2.Y, -0.03)
            DisplayDimension = P1OP2_P1XP3_P2P3(L8.GetStartPoint2.X, L9.IGetEndPoint2.Y, -0.045)
            尺寸属性(8, "H10", "")


            P1L1XP2L2_P2L2(L3.GetEndPoint2, L10, -0.02)
            P1XP2_P1OP3_P2P3(L3.GetEndPoint2, -0.065)


            DisplayDimension = P1XP2_P1OP3_P2P3(L11.GetEndPoint2, -0.07)
            尺寸属性(8, "H8", "")

            DisplayDimension = P1XP2_P1OP3_P2P3(L7.GetEndPoint2, -0.03)
            尺寸属性(8, "", "h7")

            'MsgBox(555)
            P1XP2_P1OP3_P2P3(L9.GetStartPoint2, -0.04)
            part.ClearSelection2(True)







            'Selectallsegment_markcenterline(L01Segment, 相对Y轴偏转角度)’该模块无效




            SketchSegments = Sketch.GetSketchSegments
            points = Sketch.GetSketchPoints2
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            'MsgBox(666)
            L01Segment.Select2(True, 2)
            L01Segment.Select2(True, 2) '设定标记


            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)


            L1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub


        Public Sub Flat_bottom_slots(Relative_Y_axis_deflection_angle#, slot_number#, outer_diameter#, shoulder_width#, bottom_width#, top_width#, one_Step_height#, two_steps_height#, three_steps_height#, rounded_R1#, rounded_R2#) '相对Y轴偏转角度#, 槽口数#, 外径#, 肩宽#, 底宽#, 顶宽#, 一阶梯高#, 二阶梯高#, 三阶梯高#, 圆角R1#, 圆角R2#
            'rounded_R1#肩部圆角, rounded_R2#底部圆角

            Dim arc As SldWorks.SketchArc
            Dim line1, line2, line3, line4 As SldWorks.SketchLine
            Dim Dline1, Dline2, Dline3 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, line3Segment, line4Segment, arc1, line01, rounded1, rounded2, SketchSegment, Dline1Segment, Dline2Segment, Dline3Segment, Dline4Segment, Dline5Segment, Dline6Segment As SldWorks.SketchSegment

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point0, point1, point2 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            line1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            line2 = part.SketchManager.CreateLine(0.02, 0.02, 0, 0.02, 0.03, 0)
            line3 = part.SketchManager.CreateLine(0.03, 0.03, 0, 0.03, 0.04, 0)
            line4 = part.SketchManager.CreateLine(-0.001, 0, 0, 0.01, 0, 0)
            point0 = part.SketchManager.CreatePoint(0, outer_diameter / 2, 0)
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3
            line4Segment = line4
            line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, outer_diameter / 2)
            arc1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point0.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            point1 = line4.GetEndPoint2()
            point2 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            line4Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgHORIZONTAL2D") '水平
            point1 = line1.GetEndPoint2()
            point2 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line2.GetEndPoint2()
            point2 = line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直

            point1 = line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point0.Select4(True, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = three_steps_height

            line2Segment.Select4(False, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = two_steps_height

            line1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = one_Step_height

            point1 = line4.GetStartPoint2()
            point1.Select4(False, Nothing)
            line01.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合

            point1 = line4.GetEndPoint2()
            point1.Select4(False, Nothing)
            line01.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = bottom_width / 2

            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            line01.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = top_width / 2

            point1 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            line01.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = shoulder_width / 2

            point1 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            Dline2 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            Dline2Segment = Dline2
            Dline2Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            point1 = line4.GetEndPoint2
            Dline3 = part.SketchManager.CreateCenterLine(-point1.X, point1.Y, 0, -point1.X, point1.Y + 0.001, 0)
            Dline5Segment = Dline3

            point1 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            rounded1 = part.SketchManager.CreateFillet(rounded_R1, 1)
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            rounded2 = part.SketchManager.CreateFillet(rounded_R2, 1)

            line1Segment.Select4(False, Nothing)
            line2Segment.Select4(True, Nothing)
            line3Segment.Select4(True, Nothing)
            line4Segment.Select4(True, Nothing)
            If Not rounded1 Is Nothing Then
                rounded1.Select4(True, Nothing)
            Else
            End If
            If Not rounded2 Is Nothing Then
                rounded2.Select4(True, Nothing)
            Else
            End If
            line01.Select4(True, Nothing)
            part.SketchMirror()

            arc1.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -outer_diameter / 2, 0) '修剪到最近端

            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i



            point1 = line4.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            Dline1Segment = Dline1
            Dline2Segment.Select4(False, Nothing)
            Dline1Segment.Select4(True, Nothing)
            part.AddDimension2(point1.X + 0.02, (point1.Y + Dline2.IGetEndPoint2.Y) / 2, 0)

            point2 = line2.GetEndPoint2
            point2.Select4(False, Nothing)
            Dline2Segment.Select4(True, Nothing)
            part.AddDimension2(point2.X + 0.02, (point2.Y + Dline2.IGetEndPoint2.Y) / 2, 0)


            point1 = line3.GetEndPoint2
            Dline1 = part.SketchManager.CreateCenterLine(-point1.X, point1.Y, 0, -point1.X, point1.Y + 0.001, 0)
            Dline3Segment = Dline1
            point1.Select4(False, Nothing)
            Dline3Segment.Select4(True, Nothing)
            part.AddDimension2(0, point1.Y + 0.01, 0)

            point1 = Dline2.GetStartPoint2
            Dline1 = part.SketchManager.CreateCenterLine(-point1.X, point1.Y, 0, -point1.X, point1.Y - 0.001, 0)
            Dline4Segment = Dline1
            point1.Select4(False, Nothing)
            Dline4Segment.Select4(True, Nothing)
            part.AddDimension2(0, point1.Y - 0.005, 0)

            point1 = Dline3.GetStartPoint2
            Dline1 = part.SketchManager.CreateCenterLine(-point1.X, point1.Y, 0, -point1.X, point1.Y + 0.001, 0)
            Dline6Segment = Dline1
            Dline6Segment.Select4(False, Nothing)
            Dline5Segment.Select4(True, Nothing)
            part.AddDimension2(0, point1.Y - 0.01, 0)

            If Not rounded2 Is Nothing Then
                arc = rounded2
                point1 = arc.IGetCenterPoint2
                rounded2.Select4(True, Nothing)
                part.AddDimension2(point1.X, point1.Y, 0)
            Else
            End If
            If Not rounded1 Is Nothing Then
                arc = rounded1
                point1 = arc.IGetCenterPoint2
                rounded1.Select4(True, Nothing)
                part.AddDimension2(point1.X, point1.Y, 0)
            Else
            End If



            part.ClearSelection2(True)
            'line01.Select4(False, Nothing)
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select2(True, Nothing) : Debug.Assert([Boolean])
            Next i
            line01.Select2(True, 2)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * Relative_Y_axis_deflection_angle / 180)

            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(slot_number, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        Public Sub Trapezoidal_hole(类型$, 相对Y轴偏转角度#, 槽口数#, 外径#, 内径#, 槽间距离#, 圆角R1#, 圆角R2#, 顶宽#, 底宽#, 腰角度#) '梯形孔
            'Type$, relative Y-axis deflection angle#, slot number#, outer diameter#, inner diameter#, distance between slots#, round corner R1#, round corner R2#, top width#, bottom width#, waist angle#
            Dim arc1, arc2 As SldWorks.SketchArc
            Dim Dline1, Dline2 As SldWorks.SketchLine
            Dim line1, line2, line01, line02 As SldWorks.SketchLine
            Dim arc1Segment, arc2Segment, line1Segment, line2Segment, SketchSegment, line01Segment, line02Segment, line00, Dline1Segment, Dline2Segment, Dline3Segment, Dline4Segment, rounded1, rounded2 As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line1 = part.SketchManager.CreateLine(0.001, 0.001, 0, 0.001, 0.002, 0)
            line2 = part.SketchManager.CreateLine(0.002, 0.002, 0, 0.003, 0.002, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 内径 / 2)
            arc1Segment = arc1
            arc2Segment = arc2
            line1Segment = line1
            line2Segment = line2
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc2Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定


            point1 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc2Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合

            point1 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            arc2Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合

            '画辅助线
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, -0.0002, 0)
            line00.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.0002, 0)
            line02 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.0002, 0, 0)
            line01Segment = line01
            line02Segment = line02

            point1 = line01.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line02.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定



            If 类型 = "平行" Then
                line01Segment.Select4(False, Nothing)
                part.SketchAddConstraints("sgFIXED") '固定
                line01Segment.Select4(False, Nothing)
                line02Segment.Select4(True, Nothing)
                DisplayDimension = part.AddHorizontalDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = (PI / 180) * (360 / 槽口数)

                line00.Select4(False, Nothing)
                line1Segment.Select4(True, Nothing)
                DisplayDimension = part.AddHorizontalDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = 槽间距离 / 2

                line02Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                part.SketchAddConstraints("sgPARALLEL") '平行
                line02Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                DisplayDimension = part.AddHorizontalDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = -槽间距离 / 2



            ElseIf 类型 = "上下底长" Then
                line1Segment.Select4(False, Nothing)
                part.SketchConstraintsDel(0, "sgVERTICAL2D") '删除竖直约束


                line1Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                line00.Select4(True, Nothing)
                part.SketchAddConstraints("sgSYMMETRIC") '对称

                point1 = line1.GetStartPoint2()
                point2 = line2.GetStartPoint2()
                point1.Select4(False, Nothing)
                point2.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = 底宽

                point1 = line1.GetEndPoint2()
                point2 = line2.GetEndPoint2()
                point1.Select4(False, Nothing)
                point2.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = 顶宽
            ElseIf 类型 = "腰角度" Then
                line1Segment.Select4(False, Nothing)
                part.SketchConstraintsDel(0, "sgVERTICAL2D") '删除竖直约束


                line1Segment.Select4(False, Nothing)
                line01Segment.Select4(True, Nothing)
                part.SketchAddConstraints("sgCOLINEAR") '共线
                line2Segment.Select4(False, Nothing)
                line02Segment.Select4(True, Nothing)
                part.SketchAddConstraints("sgCOLINEAR") '共线
                line1Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(0, 0, 0)
                Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
                Dimension.SystemValue = PI * 腰角度 / 180
                line1Segment.Select4(False, Nothing)
                line2Segment.Select4(True, Nothing)
                line00.Select4(True, Nothing)
                part.SketchAddConstraints("sgSYMMETRIC") '对称


            End If

            part.ClearSelection2(True)
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端
            arc2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -内径 / 2, 0)


            point1 = line1.GetEndPoint2()
            point2 = line2.GetEndPoint2()
            P1 = part.SketchManager.CreatePoint(point1.X, point1.Y, 0)
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            rounded1 = part.SketchManager.CreateFillet(圆角R1, 1)

            point1 = line1.GetStartPoint2()
            point2 = line2.GetStartPoint2()
            P2 = part.SketchManager.CreatePoint(point1.X, point1.Y, 0)
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            rounded2 = part.SketchManager.CreateFillet(圆角R2, 1)

            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i



            If 类型 = "平行" Then
                point1 = line1.GetStartPoint2
                point2 = line1.GetEndPoint2
                Dline1 = part.SketchManager.CreateCenterLine(-point1.X, -point1.Y, 0, -point1.X, -point1.Y + 0.001, 0)
                Dline2 = part.SketchManager.CreateCenterLine(point1.X, -point1.Y, 0, point1.X, -point1.Y + 0.001, 0)
                Dline1Segment = Dline1
                Dline2Segment = Dline2
                Dline1Segment.Select4(False, Nothing)
                Dline2Segment.Select4(True, Nothing)
                part.AddDimension2(0, (-point1.Y - point2.Y) / 2, 0)

                arc1Segment.Select4(False, Nothing)
                part.AddDimension2(-0.9 * arc1.GetRadius, 0.3 * arc1.GetRadius, 0)
                arc2Segment.Select4(False, Nothing)
                part.AddDimension2(-0.8 * arc2.GetRadius, 0.4 * arc2.GetRadius, 0)


                If Not rounded1 Is Nothing Then
                    arc1 = rounded1
                    rounded1.Select4(False, Nothing)
                    part.AddDimension2(arc1.GetCenterPoint2.X, arc1.GetCenterPoint2.Y, 0)

                End If

                If Not rounded2 Is Nothing Then

                    arc2 = rounded2
                    rounded2.Select4(False, Nothing)
                    part.AddDimension2(arc2.GetCenterPoint2.X, arc2.GetCenterPoint2.Y, 0)
                End If


            End If

            If 类型 = "上下底长" Then

                P1YP2_P1P2(P1, 0.005)
                P1YP2_P1P2(P2, -0.005)
                rounded1.Select4(False, Nothing)
                A1 = rounded1
                part.AddDimension2(A1.IGetCenterPoint2.X, A1.IGetCenterPoint2.Y, 0)
                rounded2.Select4(False, Nothing)
                A1 = rounded2
                part.AddDimension2(A1.IGetCenterPoint2.X, A1.IGetCenterPoint2.Y, 0)

                arc1Segment.Select4(False, Nothing)
                part.AddDimension2(-0.9 * arc1.GetRadius, 0.3 * arc1.GetRadius, 0)
                arc2Segment.Select4(False, Nothing)
                part.AddDimension2(-0.8 * arc2.GetRadius, 0.4 * arc2.GetRadius, 0)

            End If

            'If 类型 = "腰角度" Then
            '    point1 = line1.GetStartPoint2
            '    point2 = line1.GetEndPoint2
            '    Dline1 = part.SketchManager.CreateCenterLine(-point1.X, -point1.Y, 0, -point1.X, -point1.Y + 0.001, 0)
            '    Dline2 = part.SketchManager.CreateCenterLine(point1.X, -point1.Y, 0, point1.X, -point1.Y + 0.001, 0)
            '    Dline1Segment = Dline1
            '    Dline2Segment = Dline2
            '    Dline1Segment.Select4(False, Nothing)
            '    Dline2Segment.Select4(True, Nothing)
            '    part.AddDimension2(0, (-point1.Y - point2.Y) / 2, 0)

            '    arc1Segment.Select4(False, Nothing)
            '    part.AddDimension2(-0.9 * arc1.GetRadius, 0.3 * arc1.GetRadius, 0)
            '    arc2Segment.Select4(False, Nothing)
            '    part.AddDimension2(-0.8 * arc2.GetRadius, 0.4 * arc2.GetRadius, 0)

            '    arc1 = rounded1
            '    rounded1.Select4(False, Nothing)
            '    part.AddDimension2(arc1.GetCenterPoint2.X, arc1.GetCenterPoint2.Y, 0)

            '    arc2 = rounded2
            '    rounded2.Select4(False, Nothing)
            '    part.AddDimension2(arc2.GetCenterPoint2.X, arc2.GetCenterPoint2.Y, 0)

            'End If














            line1Segment.SelectChain(False, Nothing)
            If 类型 = "上下底长" Then
                P1.Select4(True, Nothing)
                P2.Select4(True, Nothing)
            End If
            line00.Select4(True, Nothing)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)

            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)


            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏

            'part.Extension.SelectByID2("Line2", "SKETCHSEGMENT", 0.0680535689107398, 0.0671366716345467, 0.0249999999999204, False, 0, Nothing, 0)
            'part.Extension.MoveOrCopy False, 1, False, 0, 0, 0, -0.003, 0.003, 0

        End Sub

        'Public Sub 半环孔(相对Y轴偏转角度#, 槽口数#, 外径#, 内径#, 顶圆角R1#, 底圆角R2#, x1#, y1#, x2#, y2#, x3#, y3#, x4#, y4#)Hole margin
        Public Sub 半环孔(相对Y轴偏转角度#, 数量#, 外径#, 内径#, 顶圆角R1#, 底圆角R2#, Hole_margin#)
            'Relative Y-axis deflection angle#, number#, outer diameter#, inner diameter#, top round corner R1#, bottom round corner R2#, Hole_margin#

            Dim x1#, y1#, x2#, y2#, x3#, y3#, x4#, y4#
            x1# = -Sqrt(Pow(内径 / 2, 2) - Pow(Hole_margin / 2, 2))
            y1# = Hole_margin / 2
            x2# = -Sqrt(Pow(外径 / 2, 2) - Pow(Hole_margin / 2, 2))
            y2 = Hole_margin / 2
            x3 = Sqrt(Pow(内径 / 2, 2) - Pow(Hole_margin / 2, 2))
            y3 = Hole_margin / 2
            x4 = Sqrt(Pow(外径 / 2, 2) - Pow(Hole_margin / 2, 2))
            y4 = Hole_margin / 2



            Dim arc1, arc2 As SldWorks.SketchArc
            Dim line1, line2, line01, line02 As SldWorks.SketchLine
            Dim arc1Segment, arc2Segment, line1Segment, line2Segment, SketchSegment, line01Segment, line02Segment, line00 As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.001, 0)
            line1 = part.SketchManager.CreateLine(x1#, y1#, 0, x2#, y2#, 0)
            line2 = part.SketchManager.CreateLine(x3#, y3#, 0, x4#, y4#, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc2 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 内径 / 2)
            arc1Segment = arc1
            arc2Segment = arc2
            line1Segment = line1
            part.ClearSelection2(True)
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端
            arc2Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -内径 / 2, 0)

            point1 = line1.GetEndPoint2()
            point2 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            A1 = part.SketchManager.CreateFillet(顶圆角R1, 1)

            point1 = line1.GetStartPoint2()
            point2 = line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchManager.CreateFillet(底圆角R2, 1)



            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i


            P1XP2_P1P2(line2.IGetEndPoint2, 0.03)

            Arcdimension(A1)





            旋转草图(line00, 相对Y轴偏转角度)
            'line1Segment.SelectChain(False, Nothing)
            'line00.Select4(True, Nothing)
            'part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)

            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(数量, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


        End Sub

        Public Sub 平底加小圆底槽口(相对Y轴偏转角度#, 槽口数#, 外径#, 肩宽#, 底宽#, 顶宽#, 一阶梯高#, 二阶梯高#, 三阶梯高#, 肩圆角R1#, 底圆角R2#, 交接圆角R3#, 小圆底槽口底圆直径#, 小圆底外径#, 小圆底高1#, 小圆底宽1#)
            'Relative Y-axis deflection angle#, slot number#, outer diameter#, shoulder width#, bottom width#, top width#, one step height#, two step height#, three step height#, shoulder fillet R1#, bottom circle Angle R2#, 
            'transfer fillet R3#, small round bottom notch bottom circle diameter#, small round bottom outer diameter#, small round bottom height 1#, small round bottom width 1
            Dim 平底line1, 平底line2, 平底line3, 平底line4 As SldWorks.SketchLine
            Dim 平底line1Segment, 平底line2Segment, 平底line3Segment, 平底line4Segment, 平底arc1, 平底line01, 平底圆角1, 平底圆角2, 圆角3, SketchSegment As SldWorks.SketchSegment

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            Dim point0, point00, point1, point2 As SldWorks.SketchPoint
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            平底line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            平底line1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            平底line2 = part.SketchManager.CreateLine(0.02, 0.02, 0, 0.02, 0.03, 0)
            平底line3 = part.SketchManager.CreateLine(0.03, 0.03, 0, 0.03, 0.04, 0)
            平底line4 = part.SketchManager.CreateLine(-0.001, 0, 0, 0.01, 0, 0)
            point0 = part.SketchManager.CreatePoint(0, 外径 / 2, 0)
            point00 = part.SketchManager.CreatePoint(0, 小圆底外径 / 2, 0)
            平底line1Segment = 平底line1
            平底line2Segment = 平底line2
            平底line3Segment = 平底line3
            平底line4Segment = 平底line4
            平底line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            平底arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            平底arc1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point0.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            point1 = 平底line4.GetEndPoint2()
            point2 = 平底line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            平底line4Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgHORIZONTAL2D") '水平
            point1 = 平底line1.GetEndPoint2()
            point2 = 平底line2.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = 平底line2.GetEndPoint2()
            point2 = 平底line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            part.SketchAddConstraints("sgMERGEPOINTS") '合并
            point1 = 平底line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            平底arc1.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            平底line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直

            point1 = 平底line3.GetStartPoint2()
            point1.Select4(False, Nothing)
            point0.Select4(True, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 三阶梯高

            平底line2Segment.Select4(False, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 二阶梯高

            平底line1Segment.Select4(False, Nothing)
            DisplayDimension = part.AddVerticalDimension2(0.1, 0.02, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 一阶梯高

            point1 = 平底line4.GetStartPoint2()
            point1.Select4(False, Nothing)
            平底line01.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合

            point1 = 平底line4.GetEndPoint2()
            point1.Select4(False, Nothing)
            平底line01.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 底宽 / 2

            point1 = 平底line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            平底line01.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 顶宽 / 2

            point1 = 平底line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            平底line01.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.01, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 肩宽 / 2

            point1 = 平底line1.GetEndPoint2()
            DP1 = part.SketchManager.CreatePoint(point1.X, point1.Y, 0)
            point1.Select4(False, Nothing)
            平底圆角1 = part.SketchManager.CreateFillet(肩圆角R1, 1)
            point1 = 平底line1.GetStartPoint2()
            DP2 = part.SketchManager.CreatePoint(point1.X, point1.Y, 0)
            point1.Select4(False, Nothing)
            平底圆角2 = part.SketchManager.CreateFillet(底圆角R2, 1)





            Dim 小圆底arc1 As SldWorks.SketchArc
            Dim 小圆底line1 As SldWorks.SketchLine
            Dim 小圆底arc1Segment, 小圆底line1Segment, 小圆底arc2, 小圆底line01 As SldWorks.SketchSegment
            小圆底line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)
            小圆底line1 = part.SketchManager.CreateLine(0.01, 0.01, 0, 0.01, 0.02, 0)
            小圆底arc1 = part.SketchManager.CreateCircleByRadius(0, 小圆底外径 / 2 - 小圆底高1, 0, 小圆底槽口底圆直径 / 2)
            小圆底arc1Segment = 小圆底arc1
            小圆底line1Segment = 小圆底line1
            小圆底line01.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            小圆底arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = 小圆底line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            平底line4Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            point1 = 小圆底line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            小圆底arc1Segment.Select4(True, Nothing)
            part.SketchAddConstraints("sgCOINCIDENT") '重合
            小圆底line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgVERTICAL2D") '竖直

            小圆底line01.Select4(False, Nothing)
            小圆底line1Segment.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 小圆底宽1 / 2

            小圆底line1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 小圆底槽口底圆直径 / 2, 小圆底外径 / 2 - 小圆底高1, 0) '修剪到最近端

            平底line4Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 小圆底外径 / 2, 0) '修剪到最近端

            point1 = 小圆底line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            圆角3 = part.SketchManager.CreateFillet(交接圆角R3, 1)


            小圆底line01.Select4(False, Nothing)
            小圆底line1Segment.SelectChain(True, Nothing)
            part.SketchMirror()

            小圆底arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 小圆底外径 / 2 - 小圆底高1 + 小圆底槽口底圆直径 / 2, 0) '修剪到最近端
            小圆底arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 小圆底外径 / 2 - 小圆底高1 + 小圆底槽口底圆直径 / 2, 0) '修剪到最近端
            平底arc1.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            '旋转槽口草图
            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i


            P1P2VD(DP1, DP2, DP1, 0.01) 'DP1肩部顶点，DP2底部顶点
            P1P2VD(DP1, 平底line2.IGetEndPoint2, DP1, 0.01)
            P1P2VD(平底line3.IGetStartPoint2, point0, DP1, 0.015)
            P1P2VD(point00, 小圆底arc1.GetCenterPoint2, DP1, 0.01)


            P1YP2_P1P2(DP1, 0.02)
            P1YP2_P1P2(平底line3.IGetEndPoint2, 0.01)

            P1YP2_P1P2(DP2, 0.01)
            P1YP2_P1P2(小圆底line1.IGetStartPoint2, 0.005)
            '小圆底line1
            'MsgBox(666)
            'point1 = line4.GetEndPoint2
            'Dline1 = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            'Dline1Segment = Dline1
            'Dline2Segment.Select4(False, Nothing)
            'Dline1Segment.Select4(True, Nothing)
            'part.AddDimension2(point1.X + 0.02, (point1.Y + Dline2.IGetEndPoint2.Y) / 2, 0)

            'point2 = line2.GetEndPoint2
            'point2.Select4(False, Nothing)
            'Dline2Segment.Select4(True, Nothing)
            'part.AddDimension2(point2.X + 0.02, (point2.Y + Dline2.IGetEndPoint2.Y) / 2, 0)


            'point1 = line3.GetEndPoint2
            'Dline1 = part.SketchManager.CreateCenterLine(-point1.X, point1.Y, 0, -point1.X, point1.Y + 0.001, 0)
            'Dline3Segment = Dline1
            'point1.Select4(False, Nothing)
            'Dline3Segment.Select4(True, Nothing)
            'part.AddDimension2(0, point1.Y + 0.01, 0)

            'point1 = Dline2.GetStartPoint2
            'Dline1 = part.SketchManager.CreateCenterLine(-point1.X, point1.Y, 0, -point1.X, point1.Y - 0.001, 0)
            'Dline4Segment = Dline1
            'point1.Select4(False, Nothing)
            'Dline4Segment.Select4(True, Nothing)
            'part.AddDimension2(0, point1.Y - 0.005, 0)

            'point1 = Dline3.GetStartPoint2
            'Dline1 = part.SketchManager.CreateCenterLine(-point1.X, point1.Y, 0, -point1.X, point1.Y + 0.001, 0)
            'Dline6Segment = Dline1
            'Dline6Segment.Select4(False, Nothing)
            'Dline5Segment.Select4(True, Nothing)
            'part.AddDimension2(0, point1.Y - 0.01, 0)

            'If Not rounded2 Is Nothing Then
            '    arc = rounded2
            '    point1 = arc.IGetCenterPoint2
            '    rounded2.Select4(True, Nothing)
            '    part.AddDimension2(point1.X, point1.Y, 0)
            'Else
            'End If
            'If Not rounded1 Is Nothing Then
            '    arc = rounded1
            '    point1 = arc.IGetCenterPoint2
            '    rounded1.Select4(True, Nothing)
            '    part.AddDimension2(point1.X, point1.Y, 0)
            'Else
            'End If



            part.ClearSelection2(True)
            'line01.Select4(False, Nothing)
            Sketch = SketchManager.ActiveSketch
            points = Sketch.GetSketchPoints2
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select2(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            小圆底line01.Select2(True, 2)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)














            '小圆底line1Segment.SelectChain(False, Nothing)
            '小圆底line01.Select4(True, Nothing)
            'part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)



            小圆底line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏


        End Sub

        Public Sub 圆弧槽孔(相对Y轴偏转角度#, 槽口数#, 槽宽#, 槽体角度#, 半径#)
            'Relative Y-axis deflection angle#, slot number#, slot width#, slot body angle#, radius#
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.SketchManager.CreateSketchSlot(2, 0, 槽宽, 0, 0, 0, -半径 * Sin(PI * (相对Y轴偏转角度 + 槽体角度) / 180), 半径 * Cos(PI * (相对Y轴偏转角度 + 槽体角度) / 180), 0, -半径 * Sin(PI * 相对Y轴偏转角度 / 180), 半径 * Cos(PI * 相对Y轴偏转角度 / 180), 0, 65535, True)

            part.Extension.SelectByID2("D3@草图8@*", "DIMENSION", 0， 0， 0, False, 0, Nothing, 0)
            part.EditDelete()
            part.Extension.SelectByID2("Arc3", "SKETCHSEGMENT", 0， 0， 0, False, 0, Nothing, 0)
            DisplayDimension = part.AddDimension2((半径 - 槽宽) * Cos(PI * (270 - 槽体角度 / 4) / 180), (半径 - 槽宽) * Sin(PI * (270 - 槽体角度 / 4) / 180), 0)
            DisplayDimension.CenterText = True
            part.Extension.SelectByID2("Arc2", "SKETCHSEGMENT", 0， 0， 0, False, 0, Nothing, 0)
            DisplayDimension = part.AddDimension2((半径 - 槽宽) * Cos(PI * (270 + 槽体角度 / 4) / 180), (半径 - 槽宽) * Sin(PI * (270 + 槽体角度 / 4) / 180), 0)
            DisplayDimension.CenterText = True

            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)

            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        Public Sub 阵列单矩形槽(槽口数#, 相对Y轴偏转角度#, 槽口宽#, 槽底高#, 槽顶高#, 外径#, 圆角R1#, 圆角R2#)
            'Slot number#, relative Y-axis deflection angle#, slot width#, slot bottom height#, slot top height#, outer diameter#, rounded corner R1#, rounded corner R2#
            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3, line00 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, line3Segment, arc1Segment, SketchSegment, line00Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.001, 0)
            line00Segment = line00
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            初始设置(0)
            line1 = part.SketchManager.CreateLine(0, 槽底高, 0, 槽口宽 / 2, 槽底高, 0)
            line1Segment = line1
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            初始设置(1)
            line2 = part.SketchManager.CreateLine(槽口宽 / 2, 槽底高, 0, 槽口宽 / 2, 槽顶高, 0)
            point1 = line2.GetEndPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line3 = part.SketchManager.CreateLine(槽口宽 / 2, 槽顶高, 0, 槽口宽 / 2 + 0.001, 槽顶高, 0)
            line3Segment = line3
            line3Segment.Select4(False, Nothing)
            草图方法("水平")
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line3.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")


            part.ViewZoomtofit2()

            '圆角
            point1 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            A1 = part.SketchManager.CreateFillet(圆角R1, 1)
            point1 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            A2 = part.SketchManager.CreateFillet(圆角R2, 1)


            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("镜像")
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i


            '添加尺寸
            P1YP2_P1P2(line2.GetEndPoint2, 0.01)
            P1XP2_P1P2(line1.GetEndPoint2, 0.06)
            P1XP2_P1P2(line3.GetStartPoint2, 0.07)
            If Not A1 Is Nothing Then
                Arcdimension(A1)
            End If
            If Not A2 Is Nothing Then
                Arcdimension(A2)
            End If

            旋转草图(line00Segment, 相对Y轴偏转角度)


            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        Public Sub 阵列V形孔(阵列数#, 相对Y轴偏转角度#, 肩宽#， 底宽#， 顶角#， 顶高#, 平行边距#, 肩圆角#)
            'Array number#, relative Y-axis deflection angle#, shoulder width#, bottom width#, top angle#, top height#, parallel margin#, Shoulder fillet



            Dim 顶点X1#, 顶点Y1#, X2#, Y2#, X3#, Y3#, X4#, Y4#

            顶点X1# = 0
            顶点Y1# = 顶高
            X2# = 肩宽# / 2
            Y2# = 顶高 - 肩宽 / 2 / Tan(PI * 125 / 2 / 180)
            X3# = 底宽 / 2
            Y3 = 顶高 - 平行边距 / Sin(PI * 顶角 / 2 / 180) - 底宽 * Tan(PI * (90 - 125 / 2) / 180) / 2
            X4 = 0
            Y4 = 顶高 - 平行边距 / Sin(PI * 顶角 / 2 / 180)



            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3, line00, line01 As SldWorks.SketchLine
            Dim line1Segment, SketchSegment, line00Segment, line01Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.001, 0)
            line00Segment = line00
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            初始设置(0)
            line1 = part.SketchManager.CreateLine(顶点X1#, 顶点Y1#, 0, X2#, Y2#, 0)
            line1Segment = line1
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            初始设置(1)
            line2 = part.SketchManager.CreateLine(X2#, Y2#, 0, X3#, Y3#, 0)
            point1 = line2.GetEndPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line3 = part.SketchManager.CreateLine(X3#, Y3#, 0, X4#, Y4#, 0)
            point1 = line3.GetEndPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定


            part.ViewZoomtofit2()

            '圆角
            point1 = line1.GetEndPoint2()
            P1 = part.SketchManager.CreatePoint(point1.X, point1.Y, 0)
            point1.Select4(False, Nothing)
            A1 = part.SketchManager.CreateFillet(肩圆角, 1)


            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("镜像")


            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
                If SketchSegment.GetStartPoint2.Y = line1.GetStartPoint2.Y Then
                    L1 = SketchSegment '获得Line1的对称线
                End If
            Next i

            part.ClearSelection2(True)
            P1YP2_P1P2(P1, 0)
            P1YP2_P1P2(line2.GetEndPoint2, 0.02)
            Arcdimension(A1, 0, 0.01, False)
            L1YL2_L1L2(line1, L1, -0.01)
            L1YL2_L1L2(line1, line3, 0, 肩宽 / 2)

            旋转草图(line00Segment, 相对Y轴偏转角度)


            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        Public Sub 阵列V形槽(槽口数#, 相对Y轴偏转角度#, 槽口宽#, 槽顶角#, 槽顶高#, 外径#)

            Dim 槽底高#
            槽底高# = (槽顶高 - Tan(PI * （90 - 槽顶角 / 2） / 180) * 槽口宽 / 2)



            'Slot number#, relative Y-axis deflection angle#, slot width#, slot bottom height#, slot top height#, outer diameter
            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line00 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, arc1Segment, SketchSegment, line00Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.001, 0)
            line00Segment = line00
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            初始设置(0)
            line1 = part.SketchManager.CreateLine(0, 槽底高, 0, 槽口宽 / 2, 槽顶高, 0)
            line1Segment = line1
            point1 = line1.GetEndPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line2 = part.SketchManager.CreateLine(槽口宽 / 2, 槽顶高, 0, 槽口宽 / 2 + 0.001, 槽顶高, 0)
            line2Segment = line2
            line2Segment.Select4(False, Nothing)
            草图方法("水平")
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            part.ViewZoomtofit2()
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line2.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")


            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("镜像")
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i


            P1OP2_P1XP3_P2P3(line1.GetEndPoint2.X, line1.GetEndPoint2.Y, -0.01)
            L1YL2_L1L2(line1, L1YL2_L2(line1), 0.01)


            旋转草图(line00Segment, 相对Y轴偏转角度)
            'line1Segment.SelectChain(False, Nothing)
            'line00Segment.Select4(True, Nothing)
            'part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)


            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        'Public Sub 阵列V形圆弧孔(阵列数#, 相对Y轴偏转角度#, 圆弧偏心距Y#, 圆弧直径#, 顶点X1#, 顶点Y1#, 上下边angle#, X2#, Y2#, 侧边angle#, 辅助点X4#, 辅助点Y4#， 侧边外边距#， 圆角R1#)

        Public Sub 阵列V形圆弧孔(阵列数#, 相对Y轴偏转角度#, 圆弧偏心距Y#, 圆弧直径#, 顶角#, 侧边angle#, 侧边参考V型槽顶高#, 侧边参考V型槽宽#， 平行边距#, 侧边外边距#， 底圆角R1#)
            ''Array Number, relative Y-axis deflection angle#, arc eccentricity Y#, arc diameter#, apex angle#, side angle#, side reference V-shaped groove top height#,
            ''side reference V-shaped groove width# , Top height#, Parallel margin#, Side outer margin#, Bottom round corner R1#

            Dim 顶点X1#, 顶点Y1#, 上下边angle#, X2#, Y2#, 侧边辅助点X#, 侧边辅助点Y#， 圆角R1#
            ''阵列数#, 相对Y轴偏转角度#, 肩宽#， 底宽#， 顶角#， 顶高#, 平行边距#, 肩圆角#
            ''阵列数#, 相对Y轴偏转角度, 顶角#， 顶高， 平行边距#, 底圆角#， 侧边外边距， 圆弧偏心距Y#， 直径#

            'Dim 顶点X1#, 顶点Y1#, X2#, Y2#, 侧边辅助点Y#, 侧边辅助点X#


            顶点X1# = 0
            顶点Y1# = 圆弧直径# / 2 + 圆弧偏心距Y#
            X2# = 0
            Y2 = 顶点Y1# - 平行边距# / Sin(PI * 顶角 / 2 / 180)
            侧边辅助点Y# = 0
            侧边辅助点X# = (侧边参考V型槽顶高 - 侧边参考V型槽宽 * Tan(PI * （90 - 侧边angle） / 180) / 2)
            上下边angle# = -(90 - 顶角 / 2)
            圆角R1 = 底圆角R1


            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3, line4, line00 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, line3Segment, line4Segment, arc1Segment, SketchSegment, line00Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.001, 0)
            line00Segment = line00
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            初始设置(0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 圆弧偏心距Y, 0, 圆弧直径 / 2)
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            初始设置(1)
            line1 = part.SketchManager.CreateLine(顶点X1#, 顶点Y1#, 0, 顶点X1# + 0.001, 顶点Y1#, 0)
            line1Segment = line1
            point1 = line1.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line1.Angle = PI * 上下边angle / 180

            初始设置(0)
            line2 = part.SketchManager.CreateLine(X2#, Y2#, 0, X2# + 0.001, Y2#, 0)
            line2Segment = line2
            point1 = line2.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line2.Angle = PI * 上下边angle / 180
            line2Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定


            初始设置(1)
            point1 = line2.GetEndPoint2
            line3 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            line3Segment = line3
            'point1 = line3.GetStartPoint2
            'point1.Select4(False, Nothing)
            'line3Segment.Select4(True, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            line3.Angle = PI * 侧边angle / 180


            初始设置(0)
            line4 = part.SketchManager.CreateCenterLine(侧边辅助点X#, 侧边辅助点Y#, 0, 侧边辅助点X# + 0.001, 侧边辅助点Y#, 0)
            line4Segment = line4
            point1 = line4.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line4.Angle = PI * 侧边angle / 180
            line4Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            line4Segment.Select4(False, Nothing)
            line3Segment.Select4(True, Nothing)
            DisplayDimension = part.AddHorizontalDimension2(0.1, 0.05, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 侧边外边距

            point1 = line1.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")
            point1 = line3.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")

            line1Segment.Select4(False, Nothing)
            line2Segment.Select4(True, Nothing)
            草图方法("平行")
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 顶点Y1, 0) '修剪到最近端
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, 顶点Y1, 0) '修剪到最近端

            part.ViewZoomtofit2()

            '圆角
            point1 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            part.SketchManager.CreateFillet(圆角R1, 1)


            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("镜像")


            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i


            L1YL2_L1L2(L1YL2_L2(line1), L1YL2_L2(line2), -0.03, -0.015)
            L1YL2_L1L2(line1, L1YL2_L2(line1), -0.01)
            L1YL2_L1L2(line4Segment, line3Segment)






            旋转草图(line00Segment, 相对Y轴偏转角度)


            'part.Extension.RotateOrCopy(True, 3, False, 0, 0, 0, 0, 0, 1, PI * 8 / 180)

            'line4Segment.Select4(False, Nothing)
            'part.EditDelete()


            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        Public Sub 平行三口槽(槽口数#, 相对Y轴偏转角度#, 槽顶高#, 顶圆半径#, 边槽最小距#, 边槽槽口最小距#, 边槽肩高#， 边槽颈长#， 边槽底部圆心最小距#, 底圆半径#， 边槽底高#， 边槽底部最大距#， 边槽定部最大距#， 边槽右肩高#， 颈水平宽度#， 颈水平高度#， 外径#)
            Dim arc1, arc2, arc3, arc4, arc5 As SldWorks.SketchArc
            Dim line1, line2, line3, line4, line5, line6, line7, line8, line11, line00, line01 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, line3Segment, line4Segment, line5Segment, line6Segment, line7Segment, line8Segment, line11Segment, arc1Segment, arc2Segment, arc3Segment, arc4Segment, arc5Segment, SketchSegment, line00Segment, line01Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.001, 0)
            line00Segment = line00
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            初始设置(0)
            'line1 = part.SketchManager.CreateLine(0, 中槽底高, 0, 中槽宽 / 2, 中槽底高, 0)
            'line1Segment = line1
            'line1Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            '初始设置(1)
            'line2 = part.SketchManager.CreateLine(中槽宽 / 2, 中槽底高, 0, 中槽宽 / 2, 中槽顶高#, 0)
            'line2Segment = line2
            'line2Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            line1 = part.SketchManager.CreateLine(0, 槽顶高#, 0, 边槽槽口最小距# / 2 - 顶圆半径, 槽顶高#, 0)
            line1Segment = line1
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            arc1 = part.SketchManager.CreateArc（边槽槽口最小距 / 2 - 顶圆半径, 槽顶高 - 顶圆半径, 0, 边槽槽口最小距 / 2 - 顶圆半径, 槽顶高, 0, 边槽槽口最小距 / 2 - 顶圆半径 + 顶圆半径 * Cos(PI * 10 / 180), 槽顶高 - 顶圆半径 - 顶圆半径 * Sin(PI * 10 / 180), 0, 0)
            arc1Segment = arc1
            point1 = arc1.GetCenterPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line2 = part.SketchManager.CreateLine(边槽槽口最小距 / 2 - 顶圆半径 + 顶圆半径 * Cos(PI * 10 / 180), 槽顶高 - 顶圆半径 - 顶圆半径 * Sin(PI * 10 / 180), 0, 边槽最小距 / 2, 边槽肩高, 0)
            line2Segment = line2
            point1 = line2.GetEndPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line2Segment.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("相切")
            line3 = part.SketchManager.CreateLine(边槽最小距 / 2, 边槽肩高, 0, 边槽最小距 / 2, 边槽肩高 - 边槽颈长, 0)
            line3Segment = line3
            line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line4 = part.SketchManager.CreateLine(边槽最小距 / 2, 边槽肩高 - 边槽颈长, 0, 边槽最小距 / 2, 边槽肩高 - 边槽颈长 - 0.001, 0)
            line4Segment = line4
            point1 = line4.GetStartPoint2
            point1.Select4(False, Nothing)


            part.SketchAddConstraints("sgFIXED") '固定
            line5 = part.SketchManager.CreateLine(边槽底部圆心最小距 / 2, 边槽底高, 0, 边槽底部最大距 / 2 - 底圆半径, 边槽底高, 0)
            line5Segment = line5
            line5Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            arc2 = part.SketchManager.CreateArc（边槽底部圆心最小距 / 2, 边槽底高 + 底圆半径, 0, 边槽底部圆心最小距 / 2, 边槽底高, 0, 边槽底部圆心最小距 / 2 - 底圆半径 * Cos(PI * 10 / 180), 边槽底高 + 底圆半径 + 底圆半径 * Sin(PI * 10 / 180), 0, 0)
            arc2Segment = arc2
            point1 = arc2.GetCenterPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line4Segment.Select4(False, Nothing)
            arc2Segment.Select4(True, Nothing)
            草图方法("相切")
            line4Segment.Select4(False, Nothing)
            arc2Segment.Select4(True, Nothing)
            草图方法("相切")
            point1 = line4.GetEndPoint2
            point2 = arc2.GetEndPoint2
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            草图方法("合并")
            arc3 = part.SketchManager.CreateArc（边槽底部最大距 / 2 - 底圆半径, 边槽底高 + 底圆半径, 0, 边槽底部最大距 / 2 - 底圆半径, 边槽底高, 0, 边槽底部最大距 / 2 - 底圆半径 + 底圆半径 * Cos(PI * 10 / 180), 边槽底高 + 底圆半径 + 底圆半径 * Sin(PI * 10 / 180), 0, 0)
            arc3Segment = arc3
            point1 = arc3.GetCenterPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            line6 = part.SketchManager.CreateLine(边槽底部最大距 / 2 - 底圆半径 + 底圆半径 * Cos(PI * 10 / 180), 边槽底高 + 底圆半径 + 底圆半径 * Sin(PI * 10 / 180), 0, 边槽定部最大距 / 2, 边槽右肩高, 0)
            line6Segment = line6
            point1 = line6.GetEndPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            arc3Segment.Select4(False, Nothing)
            line6Segment.Select4(True, Nothing)
            草图方法("相切")
            point1 = line6.GetStartPoint2
            point2 = arc3.GetEndPoint2
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            草图方法("合并")

            line7 = part.SketchManager.CreateLine(边槽定部最大距 / 2, 边槽右肩高, 0, 边槽定部最大距 / 2 - 颈水平宽度, 边槽右肩高 + 颈水平高度, 0)
            line7Segment = line7
            point1 = line7.GetEndPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            arc4 = part.SketchManager.CreateArc（边槽定部最大距 / 2 - 颈水平宽度 + 顶圆半径, 边槽右肩高 + 颈水平高度, 0, 边槽定部最大距 / 2 - 颈水平宽度, 边槽右肩高 + 颈水平高度, 0, 边槽定部最大距 / 2 - 颈水平宽度 + 顶圆半径 - 顶圆半径 * Cos(PI * 10 / 180), 边槽右肩高 + 颈水平高度 + 顶圆半径 * Sin(PI * 10 / 180), 0, 0)
            arc4Segment = arc4
            point1 = arc4.GetCenterPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定


            line8 = part.SketchManager.CreateLine(边槽定部最大距 / 2 - 颈水平宽度 + 顶圆半径 - 顶圆半径 * Cos(PI * 10 / 180), 边槽右肩高 + 颈水平高度 + 顶圆半径 * Sin(PI * 10 / 180), 0, 边槽定部最大距 / 2 - 颈水平宽度 + 顶圆半径 - 顶圆半径 * Cos(PI * 10 / 180) + 0.001, 边槽右肩高 + 颈水平高度 + 顶圆半径 * Sin(PI * 10 / 180), 0)

            line8Segment = line8
            line8Segment.Select4(False, Nothing)
            草图方法("水平")
            arc4Segment.Select4(False, Nothing)
            line8Segment.Select4(True, Nothing)
            草图方法("相切")

            arc5 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc5Segment = arc5
            arc5Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line8.GetEndPoint2
            point1.Select4(False, Nothing)
            arc5Segment.Select4(True, Nothing)
            草图方法("重合")

            part.ViewZoomtofit2()

            ''圆角
            'point1 = line1.GetEndPoint2()
            'point1.Select4(False, Nothing)
            'part.SketchManager.CreateFillet(圆角R1, 1)
            'point1 = line2.GetEndPoint2()
            'point1.Select4(False, Nothing)
            'part.SketchManager.CreateFillet(圆角R2, 1)
            'point1 = line5.GetEndPoint2()
            'point1.Select4(False, Nothing)
            'part.SketchManager.CreateFillet(圆角R3, 1)
            'point1 = line6.GetEndPoint2()
            'point1.Select4(False, Nothing)
            'part.SketchManager.CreateFillet(圆角R4, 1)
            'point1 = line7.GetEndPoint2()
            'point1.Select4(False, Nothing)
            'part.SketchManager.CreateFillet(圆角R5, 1)
            'point1 = line8.GetEndPoint2()
            'point1.Select4(False, Nothing)
            'part.SketchManager.CreateFillet(圆角R6, 1)


            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("镜像")
            arc5Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端
            'MsgBox(666)


            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i




            '添加尺寸
            P1YP2_P1P2(line3.GetStartPoint2, 0.02, 参考点:=line3.GetStartPoint2)
            A1YA2_A1A2(arc1, A1YA2_A2(arc1), 0.03, firstendall:=3, 参考点:=line3.GetStartPoint2)
            A1YA2_A1A2(arc2, A1YA2_A2(arc2), 0.04, firstendall:=3, 引线状态:=1, 参考点:=line3.GetStartPoint2)
            P1YP2_P1P2(line7.GetEndPoint2, 0.05, 参考点:=line3.GetStartPoint2)
            P1P2HD(line7.GetStartPoint2, line7.GetEndPoint2, line3.GetStartPoint2, 0.05)
            A1YA2_A1A2(arc3, A1YA2_A2(arc3), 0.06, firstendall:=3, 参考点:=line3.GetStartPoint2)

            Arcdimension(arc1, Diametric:=False)
            Arcdimension(arc2, Diametric:=False)
            Arcdimension(arc3, Diametric:=False)
            P1P2VD(P1YP2_P2(line1.GetEndPoint2), P1YP2_P2(line2.GetEndPoint2), P1YP2_P2(line1.GetEndPoint2), -0.01)
            P1P2VD(P1YP2_P2(line3.GetStartPoint2), P1YP2_P2(line3.GetEndPoint2), P1YP2_P2(line1.GetEndPoint2), -0.005)
            P1P2VD(line7.GetStartPoint2, line8.GetEndPoint2, line7.GetStartPoint2, -0.01)
            P1P2VD(P10P2_P2(line3.GetEndPoint2), P10P2_P2(line5.GetStartPoint2), P10P2_P2(line3.GetEndPoint2), -0.015)

            P1XP2_P1P2(line5.IGetEndPoint2, 0)
            P1XP2_P1P2(line8.IGetEndPoint2, 0.06)




            旋转草图(line00Segment, 相对Y轴偏转角度)



            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        Public Sub 折弯三口槽(槽口数#, 相对Y轴偏转角度#, 边槽最小距#, 边槽槽口最小距#, 中槽宽#, 边槽底高#, 中槽底高#, 中槽顶高#, 中槽口厚度#, 边槽口厚度#, 槽颈长度#, 边槽底部最小距#， 边槽底部最大距#， 边槽腰部最大距#， 腰长#， 边槽颈部最大距#， 边槽顶高#， 边槽槽口最大距#, 外径#， 中槽底圆角R1#， 边槽底圆角R2#， 边槽腰圆角R3#)
            Dim arc1, arc2, arc3, arc4, arc5 As SldWorks.SketchArc
            Dim line1, line2, line3, line4, line5, line6, line7, line8, line9, line10, line11, line12, line13, line00, line01 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, line3Segment, line4Segment, line5Segment, line6Segment, line7Segment, line8Segment, line9Segment, line10Segment, line11Segment, line12Segment, line13Segment, arc1Segment, SketchSegment, line00Segment, line01Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.001, 0)
            line00Segment = line00
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定

            初始设置(0)
            line1 = part.SketchManager.CreateLine(0, 中槽底高, 0, 中槽宽 / 2, 中槽底高, 0)
            line1Segment = line1
            line1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            初始设置(1)
            line2 = part.SketchManager.CreateLine(中槽宽 / 2, 中槽底高, 0, 中槽宽 / 2, 中槽顶高#, 0)
            line2Segment = line2
            line2Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line3 = part.SketchManager.CreateLine(中槽宽 / 2, 中槽顶高#, 0, 边槽槽口最小距# / 2, 中槽顶高#, 0)
            line3Segment = line3
            line3Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line4 = part.SketchManager.CreateLine(边槽槽口最小距# / 2, 中槽顶高#, 0, 边槽槽口最小距 / 2, 中槽顶高# - 中槽口厚度, 0)
            line4Segment = line4
            line4Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line5 = part.SketchManager.CreateLine(边槽槽口最小距 / 2, 中槽顶高# - 中槽口厚度, 0, 边槽最小距 / 2, 中槽顶高# - 中槽口厚度, 0)
            line5Segment = line5
            line5Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line6 = part.SketchManager.CreateLine(边槽最小距 / 2, 中槽顶高# - 中槽口厚度, 0, 边槽最小距 / 2, 中槽顶高# - 中槽口厚度 - 槽颈长度, 0)
            line6Segment = line6
            line6Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line7 = part.SketchManager.CreateLine(边槽最小距 / 2, 中槽顶高# - 中槽口厚度 - 槽颈长度, 0, 边槽底部最小距 / 2, 边槽底高, 0)
            line7Segment = line7
            'line7Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            line8 = part.SketchManager.CreateLine(边槽底部最小距 / 2, 边槽底高, 0, 边槽底部最大距 / 2, 边槽底高, 0)
            line8Segment = line8
            line8Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line9 = part.SketchManager.CreateLine(边槽底部最大距 / 2, 边槽底高, 0, 边槽腰部最大距 / 2, 边槽底高 + 腰长, 0)
            line9Segment = line9
            'line9Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            line10 = part.SketchManager.CreateLine(边槽腰部最大距 / 2, 边槽底高 + 腰长, 0, 边槽颈部最大距 / 2, 边槽顶高 - 边槽口厚度, 0)
            line10Segment = line10
            'line10Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            line11 = part.SketchManager.CreateLine(边槽颈部最大距 / 2, 边槽顶高 - 边槽口厚度, 0, 边槽槽口最大距 / 2, 边槽顶高 - 边槽口厚度, 0)
            line11Segment = line11
            line11Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line12 = part.SketchManager.CreateLine(边槽槽口最大距 / 2, 边槽顶高 - 边槽口厚度, 0, 边槽槽口最大距 / 2, 边槽顶高, 0)
            line12Segment = line12
            line12Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line13 = part.SketchManager.CreateLine(边槽槽口最大距 / 2, 边槽顶高, 0, 边槽槽口最大距 / 2 + 0.001, 边槽顶高, 0)
            point1 = line13.GetStartPoint2
            point1.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            line13Segment = line13
            line13Segment.Select4(False, Nothing)
            草图方法("水平")
            'line11 = part.SketchManager.CreateLine(边槽槽口最小距 / 2 + 边槽槽口宽, 边槽顶高, 0, 边槽槽口最小距 / 2 + 边槽槽口宽 + 0.001, 边槽顶高, 0)
            'line11Segment = line11
            'line11Segment.Select4(False, Nothing)
            '草图方法("水平")

            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            point1 = line13.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")
            part.ViewZoomtofit2()






            ''圆角
            point1 = line1.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc2 = part.SketchManager.CreateFillet(中槽底圆角R1, 1)
            point1 = line7.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc3 = part.SketchManager.CreateFillet(边槽底圆角R2, 1)
            DisplayDimension = P1P2HD(line00.GetEndPoint2, arc3.GetCenterPoint2, arc3.GetCenterPoint2, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 边槽底部最小距 / 2

            point1 = line8.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc4 = part.SketchManager.CreateFillet(边槽底圆角R2, 1)
            arc4.select2(False, 1)
            line00.select2(True, 1)
            DisplayDimension = part.AddDimension2(arc4.GetCenterPoint2.X, arc4.GetCenterPoint2.Y, 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SetArcEndCondition(1, 3)
            Dimension.SystemValue = 边槽底部最大距 / 2





            DisplayDimension = P1P2HD(line00.GetEndPoint2, line9.GetEndPoint2(), line9.GetEndPoint2(), 0)
            Dimension = part.Parameter(DisplayDimension.GetNameForSelection())
            Dimension.SystemValue = 边槽腰部最大距 / 2
            point1 = line9.GetEndPoint2()
            point1.Select4(False, Nothing)
            P1 = part.SketchManager.CreatePoint(point1.X, point1.Y, 0)
            point1.Select4(False, Nothing)
            arc5 = part.SketchManager.CreateFillet(边槽腰圆角R3, 1)


            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("镜像")
            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            Sketch = SketchManager.ActiveSketch
            SketchSegments = Sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i



            part.ViewZoomTo2(0， 0， 0， 0.01， 0.01， 0)
            P1P2VD(line12.GetEndPoint2, line12.GetStartPoint2, 相对参考点X向偏移:=-0.005)
            '添加尺寸
            P1XP2_P1P2(line1.GetEndPoint2, 0.025)
            P1XP2_P1P2(line8.GetEndPoint2, 0)
            P1YP2_P1P2(line2.GetEndPoint2, -0.01, line2.GetEndPoint2)
            P1YP2_P1P2(line6.GetEndPoint2, 0.01, line2.GetEndPoint2)
            P1YP2_P1P2(line4.GetEndPoint2, 0.02, line2.GetEndPoint2)
            P1YP2_P1P2(arc3.GetCenterPoint2, 0.03, line2.GetEndPoint2)
            P1YP2_P1P2(line12.GetEndPoint2, 0.04, line2.GetEndPoint2)
            P1YP2_P1P2(line11.GetStartPoint2, 0.05, line2.GetEndPoint2)
            P1YP2_P1P2(P1, 0.06, line2.GetEndPoint2)
            A1YA2_A1A2(arc4, A1YA2_A2(arc4), 0.07, firstendall:=3, 参考点:=line2.GetEndPoint2)
            P1P2VD(P1YP2_P2(line6.GetStartPoint2), P1YP2_P2(line6.GetEndPoint2), 相对参考点X向偏移:=-0.01)
            P1P2VD(P1YP2_P2(P1), P1YP2_P2(line8.GetEndPoint2), 相对参考点X向偏移:=0.02)
            P1P2VD(line4.GetStartPoint2, line4.GetEndPoint2, 相对参考点X向偏移:=0.005)

            P1XP2_P1P2(line13.GetEndPoint2, 0.07)
            Arcdimension(arc3, Diametric:=False)
            Arcdimension(arc4, Diametric:=False)
            Arcdimension(arc5, Diametric:=False)
            part.ViewZoomtofit2()








            旋转草图(line00Segment, 相对Y轴偏转角度)


            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(槽口数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub


        Public Sub 双矩形槽(阵列数#, 角度#, 两槽顶宽#, 两槽腰宽#, 腰顶高or腰顶长#, 槽腰长#, 底圆角R1#, 顶圆角R2#, 外径#, Optional 双层槽% = 0, Optional 双层槽腰差# = 0)
            'Array number#, angle#, two slot top width#, two slot waist width#, waist top height#, slot waist length#,
            'bottom Round corner R1#, top round corner R2#, outer diameter#,Double Floor groove, double groove waist Less#
            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3, line4, line00, line01 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, line3Segment, line4Segment, arc1Segment, SketchSegment, line00Segment, line01Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            If 腰顶高or腰顶长 < 槽腰长 Then
                腰顶高or腰顶长 = Sqrt(Pow(外径, 2) - Pow(两槽顶宽, 2)) / 2 - 腰顶高or腰顶长
            End If




            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.5, 0)
            line00Segment = line00
            line00.Angle = PI * 角度 / 180
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            'line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.002, 0, 0)
            'line01Segment = line01
            'line01Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            初始设置(0)
            line1 = part.SketchManager.CreateLine(两槽顶宽 / 2, 腰顶高or腰顶长 - 槽腰长, 0, 两槽腰宽 / 2, 腰顶高or腰顶长 - 槽腰长, 0)
            初始设置(1)
            line2 = part.SketchManager.CreateLine(两槽腰宽 / 2, 腰顶高or腰顶长 - 槽腰长, 0, 两槽腰宽 / 2, 腰顶高or腰顶长, 0)
            line3 = part.SketchManager.CreateLine(两槽腰宽 / 2, 腰顶高or腰顶长, 0, 两槽顶宽 / 2, 腰顶高or腰顶长, 0)
            line4 = part.SketchManager.CreateLine(0.002, 0, 0, 0.002, 0.001, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            part.ViewZoomtofit2()
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3
            line4Segment = line4
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            line2Segment.Select4(True, Nothing)
            line3Segment.Select4(True, Nothing)
            草图方法("固定")
            point1 = line1.GetEndPoint2()
            point2 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            草图方法("固定")


            line1Segment.Select4(False, Nothing)
            草图方法("水平")

            point1 = line4.GetStartPoint2()
            point2 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            草图方法("合并")
            point1 = line4.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")
            line4Segment.Select4(False, Nothing)
            草图方法("垂直")

            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("重合")

            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            A1 = part.SketchManager.CreateFillet(顶圆角R2, 1)

            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("镜像")

            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            A2 = part.SketchManager.CreateFillet(底圆角R1, 1)



            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端


            If 双层槽 = 0 Then
                P1 = part.SketchManager.CreatePoint(0, 0, 0)
                删除约束()
                P1YP2_P1P2(line4.GetEndPoint2, 0.04, line4.GetEndPoint2)
                P1YP2_P1P2(line2.GetStartPoint2, 0.01, line2.GetStartPoint2)

                P1P2VD(line1.GetEndPoint2, line3.GetStartPoint2, line1.GetEndPoint2, 0.01)
                P1P2VD(line3.GetEndPoint2, P1, line1.GetEndPoint2, 0.1)

                Arcdimension(A1)
                Arcdimension(A2)
                'P1YP2_P1P2(line2.GetEndPoint2, -0.01, line2.GetEndPoint2)
                'P1YP2_P1P2(line2.GetEndPoint2, -0.01, line2.GetEndPoint2)
                'MsgBox(111)
            Else

                P1P2HD(line3.GetEndPoint2, line3.GetStartPoint2, line3.GetStartPoint2, -0.01)
                part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
                P1 = part.SketchManager.CreatePoint(line2.GetEndPoint2.x, line2.GetEndPoint2.y - 双层槽腰差, 0)
                P1P2VD(line2.GetEndPoint2, P1, line2.GetEndPoint2, 0.02)
                part.ViewZoomtofit2()

            End If











            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        Public Sub 圆弧矩形凸台(直径#， 凸台高#, 凸台宽#， 倒角1#, 倒角2#, 相对Y轴偏转角度#， 阵列数#， 拉伸厚度#, Optional 尺寸标注% = 1)
            'Diameter#, Boss Height#, Boss Width#, Chamfering 1#, Chamfering 2#, Relative Y-axis Deflection Angle#,
            'Array Number#, Stretching Thickness#, Optional Secondary Use% = 0
            Dim X1#, Y1#, X2#, Y2#
            X1# = 凸台宽# / 2
            X2 = -凸台宽# / 2
            Y1# = 凸台高#
            Y2# = 凸台高#

            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3 As SldWorks.SketchLine
            Dim arc1Segment, line1Segment, line2Segment, line3Segment, SketchSegment, line01 As SldWorks.SketchSegment
            Dim point0, point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean
            swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '关闭捕捉
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.2, 0)

            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 直径 / 2)
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            草图方法("固定")
            line1 = part.SketchManager.CreateLine(X1#, Y1, 0, X2#, Y2#, 0)
            line1Segment = line1
            point0 = line1.GetStartPoint2
            point1 = line1.GetEndPoint2
            point1.Select4(False, Nothing)
            point0.Select4(True, Nothing)
            草图方法("固定")
            初始设置（1）
            line2 = part.SketchManager.CreateLine(X2#, Y2#, 0, X2#, Y2# + 0.001, 0)
            line2Segment = line2
            line2Segment.Select4(False, Nothing)
            草图方法("垂直")
            point1 = line2.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")
            line3 = part.SketchManager.CreateLine(X1#, Y1, 0, X1#, Y1 + 0.001, 0)
            line3Segment = line3
            line3Segment.Select4(False, Nothing)
            草图方法("垂直")
            point1 = line3.GetEndPoint2
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")

            point0 = line1.GetStartPoint2
            point1 = line1.GetEndPoint2
            point1.Select4(False, Nothing)
            SketchSegment = part.SketchManager.CreateChamfer(2, 倒角1, 倒角1)
            point0.Select4(False, Nothing)
            SketchSegment1 = part.SketchManager.CreateChamfer(2, 倒角2, 倒角2)


            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -直径 / 2, 0) '修剪到最近端

            删除约束()
            If 尺寸标注 = 1 Then
                P1XP2_P1P2(line1.GetStartPoint2, -0.01)
                P1YP2_P1P2(line1.GetStartPoint2, 0.01)
                If Not SketchSegment Is Nothing Then
                    SketchSegment.Select4(False, Nothing)
                    part.AddDimension2(line1.GetStartPoint2.x, line1.GetStartPoint2.y, 0)
                End If
                If Not SketchSegment1 Is Nothing Then
                    SketchSegment1.Select4(False, Nothing)
                    part.AddDimension2(line1.GetEndPoint2.x, line1.GetEndPoint2.y, 0)
                End If
            End If

            旋转草图(line01, 相对Y轴偏转角度)

            part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, 拉伸厚度, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub

        Public Sub 单矩形槽(阵列数#, 角度#, 两槽顶宽#, 两槽腰宽#, 腰顶高#, 顶圆角R1#, 角类型#, 倒角or圆角#, 外径#)
            'Array number#, angle#, two slot top width#, two slot waist width#, waist top height#, rounded corner R1#, angle type$, chamfer or rounded #, outer diameter
            两槽顶宽 = 两槽顶宽 / 1000
            两槽腰宽 = 两槽腰宽 / 1000
            腰顶高 = 腰顶高 / 1000
            顶圆角R1 = 顶圆角R1 / 1000
            倒角or圆角 = 倒角or圆角 / 1000
            外径 = 外径 / 1000

            Dim arc1 As SldWorks.SketchArc
            Dim line1, line2, line3, line4, line5, line00, line01 As SldWorks.SketchLine
            Dim line1Segment, line2Segment, line3Segment, line4Segment, arc1Segment, SketchSegment, line00Segment, line01Segment As SldWorks.SketchSegment
            Dim point1, point2 As SldWorks.SketchPoint

            Dim SketchSegments() As Object
            Dim Sketch As SldWorks.Sketch
            Dim [Boolean] As Boolean

            初始设置(1)
            part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            part.SketchManager.InsertSketch(True)
            part.ViewZoomTo2(0, 0, 0, 0.01, 0.01, 0) '放大区域
            line00 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.5, 0)
            line00Segment = line00
            line00.Angle = PI * 角度 / 180
            line00Segment.Select4(False, Nothing)
            part.SketchAddConstraints("sgFIXED") '固定
            'line01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.002, 0, 0)
            'line01Segment = line01
            'line01Segment.Select4(False, Nothing)
            'part.SketchAddConstraints("sgFIXED") '固定
            初始设置(0)
            line1 = part.SketchManager.CreateLine(两槽腰宽 / 2, 两槽腰宽 / 2, 0, 两槽腰宽 / 2, 腰顶高, 0)
            初始设置(1)
            line2 = part.SketchManager.CreateLine(两槽腰宽 / 2, 腰顶高, 0, 两槽顶宽 / 2, 腰顶高, 0)
            line3 = part.SketchManager.CreateLine(0.002, 0, 0, 0.002, 0.001, 0)
            arc1 = part.SketchManager.CreateCircleByRadius(0, 0, 0, 外径 / 2)
            'MsgBox(66)
            part.ViewZoomtofit2()
            line1Segment = line1
            line2Segment = line2
            line3Segment = line3
            arc1Segment = arc1
            arc1Segment.Select4(False, Nothing)
            line1Segment.Select4(True, Nothing)
            line2Segment.Select4(True, Nothing)
            草图方法("固定")
            line1Segment.Select4(False, Nothing)
            草图方法("垂直")

            point2 = line2.GetEndPoint2()
            point2.Select4(False, Nothing)
            草图方法("固定")
            point2 = line1.GetEndPoint2()
            point2.Select4(False, Nothing)
            草图方法("固定")
            'MsgBox(66)
            point1 = line3.GetStartPoint2()
            point2 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            草图方法("合并")
            point1 = line3.GetEndPoint2()
            point1.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            草图方法("重合")
            line3Segment.Select4(False, Nothing)
            草图方法("垂直")
            'MsgBox(66)
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("重合")

            point1 = line2.GetEndPoint2()
            point1.Select4(False, Nothing)
            part.SketchManager.CreateFillet(顶圆角R1, 1)
            line1Segment.SelectChain(False, Nothing)
            line00Segment.Select4(True, Nothing)
            草图方法("镜像")
            'MsgBox(66)
            point1 = line1.GetStartPoint2()
            point1.Select4(False, Nothing)
            If 角类型 = 0 Then
                part.SketchManager.CreateFillet(倒角or圆角, 1)
            ElseIf 角类型 = 1 Then
                part.SketchManager.CreateChamfer(2, 倒角or圆角, 倒角or圆角)
            End If

            arc1Segment.Select4(False, Nothing)
            SketchManager.SketchTrim(0, 0, -外径 / 2, 0) '修剪到最近端



            删除约束()

            P1XP2_P1P2(line2.GetEndPoint2(), 0.8 * 外径 / 2)
            P1P2VD(line3.GetStartPoint2, line3.GetEndPoint2, 相对参考点X向偏移:=0.01)
            P1YP2_P1P2(line1.GetEndPoint2, -(line1.GetEndPoint2.y - line1.GetStartPoint2.y) / 2)
            'MsgBox(666)




            line1Segment.SelectChain(False, Nothing)
            part.FeatureCut(True, False, True, 1, 0, 0, 0, False, False, 0, 0, 0, 0, 0, 0) '贯穿切除

            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim 基准轴Z As SldWorks.Feature
            基准轴Z = 基准轴("Z")
            基准轴Z.Select2(False, 1)
            part.Extension.SelectByID2(Feature.Name, "BODYFEATURE", 0, 0, 0, True, 4, Nothing, 0)
            part.FeatureManager.FeatureCircularPattern5(阵列数, 2 * PI, False, "NULL", False, True, False, False, False, False, 1, 0, "NULL", False)
            基准轴Z.Select2(False, Nothing) '基准轴与阵列特征相关联不能删除
            part.BlankRefGeom() '隐藏
        End Sub



        Public Sub 尺寸属性(slot_width_TolType%， slot_width_TolMaxFit$, slot_width_TolMinFit$, Optional slot_width_TolMax# = 0, Optional slot_width_TolMin# = 0, Optional 前缀$ = "", Optional 后缀$ = "", Optional 显示括号 As Boolean = True)
            'part.EditDimensionProperties2(slot_width_TolType, slot_width_TolMax#, slot_width_TolMin#, slot_width_TolMaxFit, slot_width_TolMinFit, True, 9, 2, True, 12, 12, "", "", True, "", "", False)
            part.Extension.EditDimensionProperties(slot_width_TolType, slot_width_TolMax#, slot_width_TolMin#, slot_width_TolMaxFit, slot_width_TolMinFit, True, 9, 2, True, 12, 12, 前缀$, 后缀$, True, "", "", "", False, 1, "")
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = slot_width_TolType%
            DimensionTolerance.SetFitValues(slot_width_TolMaxFit, slot_width_TolMinFit)
            DisplayDimension.ShowTolParenthesis = True '显示括号
        End Sub



        Public Sub save(dz$)
            part.SaveAs3(dz, 0, 8) 'AvoidRebuildOnSave
        End Sub



        Public Function 基准面(参考基准面$, 约束#, 距离或角度#, X#, Y#, Z#) As SldWorks.Feature
            Dim refplane As SldWorks.Feature
            If 参考基准面 = "前视" Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                refplane = part.FeatureManager.InsertRefPlane(约束, 距离或角度#, 0， 0， 0， 0)
            ElseIf 参考基准面 = "上视" Then
                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                refplane = part.FeatureManager.InsertRefPlane(约束, 距离或角度#, 0， 0， 0， 0)
            ElseIf 参考基准面 = "右视" Then
                part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                refplane = part.FeatureManager.InsertRefPlane(约束, 距离或角度#, 0， 0， 0， 0)
            ElseIf 参考基准面 = "" Then
                part.Extension.SelectByID2("", "FACE", X, Y, Z, False, 0, Nothing, 0)
                refplane = part.FeatureManager.InsertRefPlane(约束, 距离或角度#, 0， 0， 0， 0)
            End If

            基准面 = refplane
        End Function
        Public Function 基准轴(基准$) As SldWorks.Feature
            Dim AXIS As SldWorks.Feature
            Dim line1 As SldWorks.SketchLine
            Dim line1Segment As SldWorks.SketchSegment
            If 基准 = "Z" Then
                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, -0.01, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If
            If 基准 = "Y" Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.01, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If
            If 基准 = "X" Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.01, 0, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If
            AXIS = SelectionMgr.GetSelectedObject6(1, -1)
            基准轴 = AXIS
        End Function
        Public Function 偏心基准轴(基准$, X#, Y#) As SldWorks.Feature
            Dim AXIS As SldWorks.Feature
            Dim line1 As SldWorks.SketchLine
            Dim line1Segment As SldWorks.SketchSegment
            If 基准 = "X偏心" Then
                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(X#, 0, 0, X#, -0.01, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If
            If 基准 = "Y偏心" Then
                part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
                part.SketchManager.InsertSketch(True)
                line1 = part.SketchManager.CreateCenterLine(0, Y#, 0, -0.01, Y#, 0)
                line1Segment = line1
                part.InsertSketch2(True)
                line1Segment.Select4(False, Nothing)
                part.InsertAxis2(True)
                AXIS = SelectionMgr.GetSelectedObject6(1, -1)
                AXIS.Select2(False, Nothing)
            End If

            AXIS = SelectionMgr.GetSelectedObject6(1, -1)
            偏心基准轴 = AXIS
        End Function
        Public Function 初始设置(类型#)
            If 类型 = 0 Then '关闭捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
                part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
            ElseIf 类型 = 1 Then '激活捕捉,打开端点和草图点
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, False) '靠近
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
                part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 2) '长度精度保留小数点后3位
            ElseIf 类型 = 2 Then '激活捕捉,打开端点和草图点
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, True) '靠近
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
                part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
            ElseIf 类型 = 3 Then '激活捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, False) '靠近
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
                swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
                part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
            End If

        End Function
        Public Function 草图方法(类型$)
            If 类型 = "固定" Then
                part.SketchAddConstraints("sgFIXED")
            ElseIf 类型 = "水平" Then
                part.SketchAddConstraints("sgHORIZONTAL2D")
            ElseIf 类型 = "点水平排布" Then
                part.SketchAddConstraints("sgHORIZONTALPOINTS2D")
            ElseIf 类型 = "点竖直排布" Then
                part.SketchAddConstraints("sgVERTICALPOINTS2D")
            ElseIf 类型 = "垂直" Then
                part.SketchAddConstraints("sgVERTICAL2D")
            ElseIf 类型 = "共线" Then
                part.SketchAddConstraints("sgCOLINEAR")
            ElseIf 类型 = "全等" Then
                part.SketchAddConstraints("sgCORADIAL")
            ElseIf 类型 = "相互垂直" Then
                part.SketchAddConstraints("sgPERPENDICULAR")
            ElseIf 类型 = "平行" Then
                part.SketchAddConstraints("sgPARALLEL")
            ElseIf 类型 = "相切" Then
                part.SketchAddConstraints("sgTANGENT")
            ElseIf 类型 = "同心" Then
                part.SketchAddConstraints("sgCONCENTRIC")
            ElseIf 类型 = "重合" Then
                part.SketchAddConstraints("sgCOINCIDENT")
            ElseIf 类型 = "对称" Then
                part.SketchAddConstraints("sgSYMMETRIC")
            ElseIf 类型 = "相等" Then
                part.SketchAddConstraints("sgSAMELENGTH")
            ElseIf 类型 = "合并" Then
                part.SketchAddConstraints("sgMERGEPOINTS")
            ElseIf 类型 = "相等曲率" Then
                part.SketchAddConstraints("sgEQUALCURV3DALIGN")
            ElseIf 类型 = "曲线长度相等" Then
                part.SketchAddConstraints("sgSAMECURVELENGTH")
            ElseIf 类型 = "镜像" Then
                part.SketchMirror()
            End If

        End Function

        Public Function index_String(str$, index%) As String
            Dim strResult As String
            Dim seed As Integer
            Dim i As Integer
            i = 0
            strResult = ""
            Do Until i = index
                If i = 0 Then
                    seed = 1
                Else
                    seed = InStr(seed, str, "\") + 1
                End If
                strResult = Microsoft.VisualBasic.Left(str, InStr(seed, str, "\") - 1)

                If i = 0 Then
                Else
                    strResult = Microsoft.VisualBasic.Right(strResult, Len(strResult) - InStrRev(strResult, "\", -1))
                End If
                i += 1
            Loop
            If index = 0 Then
                index_String = str
            Else
                index_String = strResult
            End If
        End Function

        Public Function Arcdimension(Arc As SldWorks.SketchArc, Optional Y向偏移# = 0, Optional X向偏移# = 0, Optional Diametric As Boolean = True, Optional CenterText As Boolean = True) As SldWorks.DisplayDimension
            A1Segment = Arc
            If Not Arc Is Nothing Then
                A1Segment.Select4(False, Nothing)
                Arcdimension = part.AddDimension2(Arc.GetCenterPoint2.X + X向偏移#, Arc.GetCenterPoint2.Y + Y向偏移#, 0)
                Arcdimension.Diametric = False
                Arcdimension.CenterText = True
            End If

        End Function

        Public Function P1YP2_P1P2(point1 As SldWorks.SketchPoint, Y向偏移#, Optional 参考点 As SldWorks.SketchPoint = Nothing) As SldWorks.DisplayDimension
            'part.ViewZoomTo2(0， 0， 0， 0.01， 0.01， 0)
            DP1 = part.SketchManager.CreatePoint(-point1.X, point1.Y, 0)
            'If DP1 Is Nothing Then
            '    part.Extension.SelectByID2("", "SKETCHPOINT", -point1.X, point1.Y, 0, False, 0, Nothing, 0)
            '    DP1 = SelectionMgr.GetSelectedObject6(1, -1)
            '    DP1.Select4(False, Nothing)
            'Else
            '    DP1.Select4(False, Nothing)
            'End If
            'MsgBox(666)
            DP1.Select4(False, Nothing)
            point1.Select4(True, Nothing)
            If Not 参考点 Is Nothing Then
                P1YP2_P1P2 = part.AddDimension2(参考点.X, 参考点.Y + Y向偏移#, 0)
            Else
                P1YP2_P1P2 = part.AddDimension2(DP1.X, DP1.Y + Y向偏移#, 0)
            End If


            P1YP2_P1P2.CenterText = True
            'part.ViewZoomtofit2()
        End Function
        Public Function P1XP2_P1P2(point1 As SldWorks.SketchPoint, X向偏移#) As SldWorks.DisplayDimension
            DP1 = part.SketchManager.CreatePoint(point1.X, -point1.Y, 0)
            DP1.Select4(False, Nothing)
            point1.Select4(True, Nothing)
            P1XP2_P1P2 = part.AddDimension2(DP1.X + X向偏移#, DP1.Y, 0)
            P1XP2_P1P2.CenterText = True
        End Function

        Public Function P1OP2_P1XP3_P2P3(X#, Y#, Y向偏移#) As SldWorks.DisplayDimension '根据两线段的一顶点画出与X轴对称的一点和原点对称的一点并添加距离尺寸
            初始设置（0）
            'P1 = L2_y.GetEndPoint2()
            'P2 = L1_x.GetStartPoint2()
            DP1 = part.SketchManager.CreatePoint(X, -Y, 0)
            DP2 = part.SketchManager.CreatePoint(-X, -Y, 0)
            DP1.Select4(False, Nothing)
            DP2.Select4(True, Nothing)
            P1OP2_P1XP3_P2P3 = part.AddDimension2(X, -Y + Y向偏移#, 0)
            P1OP2_P1XP3_P2P3.CenterText = True
        End Function

        Public Function P1L1XP2L2_P2L2(P1 As SldWorks.SketchPoint, L1 As SldWorks.SketchLine, Y向偏移#) As SldWorks.DisplayDimension '根据一线段一顶点画出与X轴对称的一线段一顶点并添加距离尺寸
            初始设置（0）
            DL1Segment = part.SketchManager.CreateCenterLine(L1.GetStartPoint2.X, -L1.GetStartPoint2.Y, 0, L1.GetEndPoint2.X, -L1.GetEndPoint2.Y, 0)
            DP1 = part.SketchManager.CreatePoint(P1.X, -P1.Y, 0)
            DP1.Select4(False, Nothing)
            DL1Segment.Select4(True, Nothing)
            P1L1XP2L2_P2L2 = part.AddDimension2(DP1.X, DP1.Y + Y向偏移#, 0)
            P1L1XP2L2_P2L2.CenterText = True
        End Function

        Public Function P1XP2_P1OP3_P2P3(P1 As SldWorks.SketchPoint, X向偏移#) As SldWorks.DisplayDimension '根据一点画出与Y轴对称的一点和与原点对称的一点和，并添加距离尺寸
            初始设置（0）
            DP1 = part.SketchManager.CreatePoint(-P1.X, P1.Y, 0)
            DP2 = part.SketchManager.CreatePoint(-P1.X, -P1.Y, 0)
            DP1.Select4(False, Nothing)
            DP2.Select4(True, Nothing)
            P1XP2_P1OP3_P2P3 = part.AddDimension2(DP1.X + X向偏移#, DP1.Y, 0)
            P1XP2_P1OP3_P2P3.CenterText = True
        End Function
        Public Function P1YP2_P2(point1 As SldWorks.SketchPoint) As SldWorks.SketchPoint
            P1YP2_P2 = part.SketchManager.CreatePoint(-point1.X, point1.Y, 0)
        End Function
        Public Function P1XP2_P2(point1 As SldWorks.SketchPoint) As SldWorks.SketchPoint
            P1XP2_P2 = part.SketchManager.CreatePoint(point1.X, -point1.Y, 0)
        End Function

        Public Function P10P2_P2(point1 As SldWorks.SketchPoint) As SldWorks.SketchPoint
            P10P2_P2 = part.SketchManager.CreatePoint(-point1.X, -point1.Y, 0)
        End Function
        Public Function P1P2VD(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint, Optional 参考点 As SldWorks.SketchPoint = Nothing, Optional 相对参考点X向偏移# = 0) As SldWorks.DisplayDimension
            'part.ViewZoomTo2(0， 0， 0， 0.01， 0.01， 0)
            DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X + 0.001, point1.Y, 0)
            If DL1Segment Is Nothing Then
                DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X - 0.001, point1.Y, 0)
            End If
            DL1Segment.Select4(False, Nothing)
            草图方法（"固定"）
            DL1Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)
            If Not 参考点 Is Nothing Then
                P1P2VD = part.AddDimension2(参考点.X + 相对参考点X向偏移, point1.Y, 0)
            Else
                P1P2VD = part.AddDimension2(point1.X + 相对参考点X向偏移, point1.Y, 0)
            End If
            P1P2VD.CenterText = True
            'part.ViewZoomtofit2()
        End Function
        Public Function P1P2HD(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint, Optional 参考点 As SldWorks.SketchPoint = Nothing, Optional 相对参考点Y向偏移# = 0) As SldWorks.DisplayDimension

            DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X, point1.Y + 0.001, 0)
            If DL1Segment Is Nothing Then
                DL1Segment = part.SketchManager.CreateCenterLine(point1.X, point1.Y, 0, point1.X - 0.001, point1.Y, 0)
            End If
            DL1Segment.Select4(False, Nothing)
            草图方法（"固定"）
            DL1Segment.Select4(False, Nothing)
            point2.Select4(True, Nothing)

            If Not 参考点 Is Nothing Then
                P1P2HD = part.AddDimension2(point1.X, 参考点.Y + 相对参考点Y向偏移, 0)
            Else
                P1P2HD = part.AddDimension2(point1.X, point1.Y + 相对参考点Y向偏移, 0)
            End If

            P1P2HD.CenterText = True
        End Function

        Public Function L1YL2_L1L2(line1 As SldWorks.SketchLine, line2 As SldWorks.SketchLine, Optional Y向偏移# = 0, Optional X向偏移# = 0) As SldWorks.DisplayDimension '参考点line1.getstartpoint
            line1.Select2(False, 1)
            line2.Select2(True, 1)
            L1YL2_L1L2 = part.AddDimension2(line1.GetStartPoint2.X + X向偏移, line1.GetStartPoint2.Y + Y向偏移#, 0)
            L1YL2_L1L2.CenterText = True
        End Function

        Public Function L1YL2_L2(line1 As SldWorks.SketchLine) As SldWorks.SketchLine '获得对称线
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                If SketchSegment.GetType = 0 Then '0表示线段
                    If SketchSegment.GetStartPoint2.Y = line1.GetStartPoint2.Y And SketchSegment.GetStartPoint2.X = -line1.GetStartPoint2.X Then
                        L1YL2_L2 = SketchSegment '获得Line1的对称线
                    End If
                End If
            Next i
        End Function

        Public Function A1YA2_A1A2(arc1 As SldWorks.SketchArc, arc2 As SldWorks.SketchArc, Optional Y向偏移# = 0, Optional X向偏移# = 0, Optional firstendall% = 0, Optional 引线状态% = 3, Optional 参考点 As SldWorks.SketchPoint = Nothing) As SldWorks.DisplayDimension '参考点line1.getstartpoint
            arc1.Select2(False, 1)
            arc2.Select2(True, 1)
            If Not 参考点 Is Nothing Then
                A1YA2_A1A2 = part.AddDimension2(参考点.X + X向偏移, 参考点.Y + Y向偏移#, 0)
            Else
                A1YA2_A1A2 = part.AddDimension2(arc1.GetCenterPoint2.X + X向偏移, arc1.GetCenterPoint2.Y + Y向偏移#, 0)
            End If

            A1YA2_A1A2.CenterText = True
            Dimension = A1YA2_A1A2.GetDimension2(0)
            If firstendall = 1 Then
                Dimension.SetArcEndCondition(firstendall, 引线状态)
            ElseIf firstendall = 2 Then
                Dimension.SetArcEndCondition(firstendall, 引线状态)
            ElseIf firstendall = 3 Then
                Dimension.SetArcEndCondition(1, 引线状态)
                Dimension.SetArcEndCondition(2, 引线状态)
            End If

        End Function

        Public Function A1YA2_A2(arc1 As SldWorks.SketchArc) As SldWorks.SketchArc
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                If SketchSegment.GetType = 1 Then '1表示圆弧
                    If SketchSegment.GetCenterPoint2.Y = arc1.GetCenterPoint2.Y And SketchSegment.GetCenterPoint2.X = -arc1.GetCenterPoint2.X Then
                        A1YA2_A2 = SketchSegment
                    End If
                End If
            Next i
        End Function

        Public Function 辅助圆弧尺寸(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint， Optional 方向# = 1) As SldWorks.DisplayDimension
            'part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            'part.ClearSelection2(True)
            'part.SketchManager.InsertSketch(True)
            'MsgBox(两点距离(point1, point2))
            SketchSegment = part.SketchManager.CreateArc(point1.X, point1.Y, 0#,
                                                                 point1.X + 两点距离(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) - PI * 20 / 180),
                                                                 point1.Y + 两点距离(point1, point2) * Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) - PI * 20 / 180), 0#,
                                                                 point1.X + 两点距离(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) + PI * 20 / 180),
                                                                 point1.Y + 两点距离(point1, point2) * Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) + PI * 20 / 180), 0#, 1)
            'SketchSegment = part.SketchManager.CreateArc(point1.X, point1.Y, 0#, point1.X + 两点距离(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X) - PI * 10 / 180)), Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X) - PI * 10 / 180)), 0#, point1.X + 两点距离(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X) + PI * 10 / 180)), Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X) + PI * 10 / 180)), 0#, -1)

            SketchSegment.Select4(False, Nothing)
            SketchManager.CreateConstructionGeometry() '设为构造线
            SketchSegment.Select4(False, Nothing)
            If 方向 = 1 Then
                辅助圆弧尺寸 = part.AddDimension2(
             point1.X + 0.8 * 两点距离(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) - PI * 10 / 180),
             point1.Y + 0.8 * 两点距离(point1, point2) * Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) - PI * 10 / 180), 0#)
            Else
                辅助圆弧尺寸 = part.AddDimension2(
             point1.X + 0.8 * 两点距离(point1, point2) * Cos(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) + PI * 10 / 180),
             point1.Y + 0.8 * 两点距离(point1, point2) * Sin(Atan2((point2.Y - point1.Y), (point2.X - point1.X)) + PI * 10 / 180), 0#)
            End If


            辅助圆弧尺寸.CenterText = True

            SketchSegment.Select4(False, Nothing)
            part.UnblankSketch() '显示
        End Function

        Public Function 两点距离(point1 As SldWorks.SketchPoint, point2 As SldWorks.SketchPoint) As Double

            两点距离 = Sqrt(Pow(point1.X - point2.X, 2) + Pow(point1.Y - point2.Y, 2))

        End Function
        Public Function 取号(code$) As String
            '取号器
            Dim str As String
            Dim i As Integer
            i = 1
            str = "001.sldprt"
            Do Until Not (System.IO.File.Exists("E:\works\generator_parts_library\rotor_lamination\" + code + str))
                i += 1
                str = "00" + i.ToString() + ".sldprt"
                str = Right(str, 10)
            Loop
            str = code + str
            Len(code)
            str = Left(str, Len(code) + 3)
            取号 = str
        End Function
        Public Sub 删除约束()
            sketch = SketchManager.ActiveSketch
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
                part.SketchConstraintsDelAll()
            Next i
        End Sub

        Public Class Custom_class

            Public aa As Object()
            Public bb As Object()
            Public cc As Object()
            Public dd As Object()
            Public ee As Object()
            Public ff As Object()

        End Class
        Public Function selection_set() As Custom_class







            Dim swFeat As Feature
            swFeat = part.FirstFeature
            'TraverseFeatureFeatures(swFeat, part)
            'Sub TraverseFeatureFeatures(ByVal swFeat As Feature, ByVal swModel As ModelDoc2)
            Dim swSelectionSetFolder As SelectionSetFolder
            Dim selectionSetArray As Object
            Dim selectionSetItemArray As Object
            Dim selectionSetItemArrayTypes As Object
            Dim swSelectionSet As SelectionSet
            Dim swSelectionSetItem As SelectionSetItem
            Dim swFace As Face2
            Dim swEdge As Edge
            Dim swBody As Body2
            Dim i As Integer
            Dim j As Integer
            Dim selectionSetItemArrayType As Integer

            While Not swFeat Is Nothing
                If swFeat.Name = "Selection Sets" Then
                    Debug.Print("    " & swFeat.Name & " [" & swFeat.GetTypeName & "]")
                    'Get Selection Sets folder
                    swSelectionSetFolder = swFeat.GetSpecificFeature2
                    'Get selection sets in Selection Sets folder
                    selectionSetArray = swSelectionSetFolder.GetSelectionSets
                    For i = 0 To UBound(selectionSetArray) '遍历所有选择集
                        swSelectionSet = selectionSetArray(i)
                        Debug.Print("      Selection set[" & i & "] name: " & swSelectionSet.GetName)
                        'Get the items and their types in this selection set
                        selectionSetItemArray = swSelectionSet.GetSelectionSetItems '获得选择集中所有对象
                        selectionSetItemArrayTypes = swSelectionSet.GetSelectionSetItemTypes
                        For j = 0 To UBound(selectionSetItemArray)
                            swSelectionSetItem = selectionSetItemArray(j)
                            selectionSetItemArrayType = selectionSetItemArrayTypes(j)
                            Select Case selectionSetItemArrayType
                                Case swSelectType_e.swSelFACES
                                    'Get the Dispatch object for the selection set item
                                    swFace = swSelectionSetItem.GetCorrespondingItem
                                    'Get the name of the body for the face
                                    If i = 0 Then
                                        If j = 0 Then
                                            Object数组1 = {swFace}
                                        Else
                                            Object数组1 = Object数组1.Concat({swFace}).ToArray
                                        End If
                                    ElseIf i = 1 Then
                                        If j = 0 Then
                                            Object数组2 = {swFace}
                                        Else
                                            Object数组2 = Object数组2.Concat({swFace}).ToArray
                                        End If
                                    ElseIf i = 2 Then
                                        If j = 0 Then
                                            Object数组3 = {swFace}
                                        Else
                                            Object数组3 = Object数组3.Concat({swFace}).ToArray
                                        End If
                                    ElseIf i = 3 Then
                                        If j = 0 Then
                                            Object数组4 = {swFace}
                                        Else
                                            Object数组4 = Object数组4.Concat({swFace}).ToArray
                                        End If
                                    ElseIf i = 4 Then
                                        If j = 0 Then
                                            Object数组5 = {swFace}
                                        Else
                                            Object数组5 = Object数组5.Concat({swFace}).ToArray
                                        End If
                                    End If
                                    swBody = swFace.GetBody
                                    Debug.Print("        Name of face[" & j & "]'s body: " & swBody.Name)

                                Case swSelectType_e.swSelEDGES
                                    'Get the Dispatch object for the selection set item
                                    swEdge = swSelectionSetItem.GetCorrespondingItem
                                    'Get the name of the body for the edge
                                    If i = 0 Then
                                        If j = 0 Then
                                            Object数组1 = {swEdge}
                                        Else
                                            Object数组1 = Object数组1.Concat({swEdge}).ToArray
                                        End If
                                    ElseIf i = 1 Then
                                        If j = 0 Then
                                            Object数组2 = {swEdge}
                                        Else
                                            Object数组2 = Object数组2.Concat({swEdge}).ToArray
                                        End If
                                    ElseIf i = 2 Then
                                        If j = 0 Then
                                            Object数组3 = {swEdge}
                                        Else
                                            Object数组3 = Object数组3.Concat({swEdge}).ToArray
                                        End If
                                    ElseIf i = 3 Then
                                        If j = 0 Then
                                            Object数组4 = {swEdge}
                                        Else
                                            Object数组4 = Object数组4.Concat({swEdge}).ToArray
                                        End If
                                    ElseIf i = 4 Then
                                        If j = 0 Then
                                            Object数组5 = {swEdge}
                                        Else
                                            Object数组5 = Object数组5.Concat({swEdge}).ToArray
                                        End If
                                    End If
                                    swBody = swEdge.GetBody
                                    Debug.Print("        Name of edge[" & j & "]'s body: " & swBody.Name)
                            End Select
                        Next
                    Next
                End If
                swFeat = swFeat.GetNextFeature
            End While
            'End Sub
            Dim result As New Custom_class
            result.aa = Object数组1
            result.bb = Object数组2
            result.cc = Object数组3
            result.dd = Object数组4
            result.ee = Object数组5
            Return result


            'Object数组1 = SelectionSet.GetSelectionSetItems()
            'For i = 0 To UBound(Object数组1)
            '    SelectionSetItem = Object数组1(i)
            '    face = SelectionSetItem.GetCorrespondingItem()
            '    Object数组2(i) = face

            'Next i
            'selection_set = Object数组2
        End Function
        Public Function selection_set_assambly(doc As SldWorks.Component2) As Custom_class

            'doc.Select2(False, 0)
            'swSelectionSet2 = swModelDocExtension.SaveSelection(errors)
            'swModel.ClearSelection2(True)

            'swFeatureMgr = swModel.FeatureManager
            'rootNode = swFeatureMgr.GetFeatureTreeRootItem()


            Dim swFeat As Feature
            swFeat = doc.FirstFeature
            'MsgBox(doc.NAME)
            'TraverseFeatureFeatures(swFeat, part)
            'Sub TraverseFeatureFeatures(ByVal swFeat As Feature, ByVal swModel As ModelDoc2)
            Dim swSelectionSetFolder As SelectionSetFolder
            Dim selectionSetArray As Object
            Dim selectionSetItemArray As Object
            Dim selectionSetItemArrayTypes As Object
            Dim swSelectionSet As SelectionSet
            Dim swSelectionSetItem As SelectionSetItem
            Dim swFace As Face2
            Dim swEdge As Edge
            Dim swBody As Body2
            Dim i As Integer
            Dim j As Integer
            Dim selectionSetItemArrayType As Integer

            While Not swFeat Is Nothing
                If swFeat.Name = "Selection Sets" Then
                    Debug.Print("    " & swFeat.Name & " [" & swFeat.GetTypeName & "]")
                    MsgBox("OK")
                    Debug.Print("OK")
                    'Get Selection Sets folder
                    swSelectionSetFolder = swFeat.GetSpecificFeature2
                    'Get selection sets in Selection Sets folder
                    selectionSetArray = swSelectionSetFolder.GetSelectionSets
                    For i = 0 To UBound(selectionSetArray) '遍历所有选择集
                        swSelectionSet = selectionSetArray(i)
                        Debug.Print("      Selection set[" & i & "] name: " & swSelectionSet.GetName)
                        'Get the items and their types in this selection set
                        selectionSetItemArray = swSelectionSet.GetSelectionSetItems '获得选择集中所有对象

                        'Debug.Print(swSelectionSet.GetName)

                        selectionSetItemArrayTypes = swSelectionSet.GetSelectionSetItemTypes


                        Dim nbrSelections As Integer
                        Dim m As Integer
                        Dim selObj As Object
                        part.ClearSelection2(True)
                        SelectionMgr = part.SelectionManager
                        'SelectionMgr.SuspendSelectionList()

                        swSelectionSet.Select()
                        MsgBox(666)

                        nbrSelections = SelectionMgr.GetSelectedObjectCount2(-1)

                        Debug.Print("  Number of objects selected in this selection set: " & nbrSelections)
                        For m = 1 To nbrSelections
                            'Get each object in the new selection list
                            selObj = SelectionMgr.GetSelectedObject6(m, -1)
                            Debug.Print("    Object[" & m & "] in the selection list is of swSelectType_e = " & SelectionMgr.GetSelectedObjectType3(m, -1) & "")
                            'selObj.GetType()

                            'MsgBox(selObj.GetType())
                            part.ClearSelection2(True)
                            SelectionMgr.AddSelectionListObject(SelectionMgr.GetSelectedObject6(m, -1), Nothing)
                            MsgBox(SelectionMgr.AddSelectionListObject(SelectionMgr.GetSelectedObject6(m, -1), Nothing))
                            'selObj.select2(False, 0)

                            MsgBox(666)
                            'Cast the object
                            'Component2 = selObj
                            'Debug.Print("       Name of component: " & Component2.Name2)
                        Next

                        SelectionMgr.ResumeSelectionList()
                        MsgBox(666)





                        For j = 0 To UBound(selectionSetItemArray)

                            swSelectionSetItem = selectionSetItemArray(j)
                            selectionSetItemArrayType = selectionSetItemArrayTypes(j)
                            Select Case selectionSetItemArrayType
                                Case swSelectType_e.swSelFACES
                                    'Get the Dispatch object for the selection set item
                                    swFace = swSelectionSetItem.GetCorrespondingItem
                                    'swFace.select2(False, 1)
                                    MsgBox("OKK")
                                    Debug.Print("OKK")
                                    'Get the name of the body for the face
                                    If i = 0 Then
                                        If j = 0 Then
                                            Object数组1 = {swFace}
                                        Else
                                            Object数组1 = Object数组1.Concat({swFace}).ToArray
                                        End If
                                    ElseIf i = 1 Then
                                        If j = 0 Then
                                            Object数组2 = {swFace}
                                        Else
                                            Object数组2 = Object数组2.Concat({swFace}).ToArray
                                        End If
                                    ElseIf i = 2 Then
                                        If j = 0 Then
                                            Object数组3 = {swFace}
                                        Else
                                            Object数组3 = Object数组3.Concat({swFace}).ToArray
                                        End If
                                    ElseIf i = 3 Then
                                        If j = 0 Then
                                            Object数组4 = {swFace}
                                        Else
                                            Object数组4 = Object数组4.Concat({swFace}).ToArray
                                        End If
                                    ElseIf i = 4 Then
                                        If j = 0 Then
                                            Object数组5 = {swFace}
                                        Else
                                            Object数组5 = Object数组5.Concat({swFace}).ToArray
                                        End If
                                    End If
                                    swBody = swFace.GetBody
                                    Debug.Print("        Name of face[" & j & "]'s body: " & swBody.Name)

                                Case swSelectType_e.swSelEDGES
                                    'Get the Dispatch object for the selection set item
                                    swEdge = swSelectionSetItem.GetCorrespondingItem
                                    'Get the name of the body for the edge
                                    If i = 0 Then
                                        If j = 0 Then
                                            Object数组1 = {swEdge}
                                        Else
                                            Object数组1 = Object数组1.Concat({swEdge}).ToArray
                                        End If
                                    ElseIf i = 1 Then
                                        If j = 0 Then
                                            Object数组2 = {swEdge}
                                        Else
                                            Object数组2 = Object数组2.Concat({swEdge}).ToArray
                                        End If
                                    ElseIf i = 2 Then
                                        If j = 0 Then
                                            Object数组3 = {swEdge}
                                        Else
                                            Object数组3 = Object数组3.Concat({swEdge}).ToArray
                                        End If
                                    ElseIf i = 3 Then
                                        If j = 0 Then
                                            Object数组4 = {swEdge}
                                        Else
                                            Object数组4 = Object数组4.Concat({swEdge}).ToArray
                                        End If
                                    ElseIf i = 4 Then
                                        If j = 0 Then
                                            Object数组5 = {swEdge}
                                        Else
                                            Object数组5 = Object数组5.Concat({swEdge}).ToArray
                                        End If
                                    End If
                                    'swBody = swEdge.GetBody
                                    'Debug.Print("        Name of edge[" & j & "]'s body: " & swBody.Name)
                            End Select
                        Next
                    Next
                End If
                swFeat = swFeat.GetNextFeature
            End While
            'End Sub
            Dim result As New Custom_class
            result.aa = Object数组1
            result.bb = Object数组2
            result.cc = Object数组3
            result.dd = Object数组4
            result.ee = Object数组5
            Return result


            'Object数组1 = SelectionSet.GetSelectionSetItems()
            'For i = 0 To UBound(Object数组1)
            '    SelectionSetItem = Object数组1(i)
            '    face = SelectionSetItem.GetCorrespondingItem()
            '    Object数组2(i) = face

            'Next i
            'selection_set = Object数组2
        End Function

        Public Function selection_set_assambly_new(doc As SldWorks.Component2) As Custom_class

            doc.Select2(False, 0)
            swModelDocExtension = part.Extension
            swSelectionSet2 = swModelDocExtension.SaveSelection(errors)
            part.ClearSelection2(True)
            swFeatureMgr = part.FeatureManager
            rootNode = swFeatureMgr.GetFeatureTreeRootItem()


            If Not rootNode Is Nothing Then
                traverse_node(rootNode, swFeatureMgr, part)
            End If

        End Function

        Private Sub traverse_node(ByVal node As TreeControlItem, ByVal swFeatureMgr As FeatureManager, ByVal swModel As ModelDoc2)
            Dim childNode As TreeControlItem
            Dim featureNode As Feature
            Dim nodeObjectType As Integer
            Dim nodeObject As Object

            nodeObjectType = node.ObjectType
            nodeObject = node.Object
            Select Case nodeObjectType
                Case swTreeControlItemType_e.swFeatureManagerItem_Feature

                    If Not nodeObject Is Nothing Then
                        featureNode = nodeObject
                        MsgBox(featureNode.Name)
                        'featureNode.Name
                        If featureNode.Name = "Selection Sets" Then

                            Dim swSelectionSetFeature As Feature
                            Dim swSelectionSetFolderFeature As SelectionSetFolder
                            Dim swSelectionSet As SelectionSet
                            Dim swComponent As Component2
                            Dim swSelectionMgr As SelectionMgr
                            Dim nbrSelections As Integer
                            Dim i As Integer
                            Dim selObj As Object

                            swSelectionSetFeature = node.Object
                            Debug.Print("Feature name: " & swSelectionSetFeature.Name)
                            Debug.Print("  Feature type: " & swSelectionSetFeature.GetTypeName2)
                            swSelectionSetFolderFeature = swFeatureMgr.GetSelectionSetFolder
                            swSelectionSet = swSelectionSetFolderFeature.GetSelectionSetByName(swSelectionSetFeature.Name)
                            Debug.Print("Selection set name: " & swSelectionSet.GetName)

                            swSelectionMgr = swModel.SelectionManager
                            swSelectionMgr.SuspendSelectionList()

                            swSelectionSet.Select()

                            nbrSelections = swSelectionMgr.GetSelectedObjectCount2(-1)
                            Debug.Print("  Number of objects selected in this selection set: " & nbrSelections)
                            For i = 1 To nbrSelections
                                'Get each object in the new selection list
                                selObj = swSelectionMgr.GetSelectedObject6(i, -1)
                                Debug.Print("    Object[" & i & "] in the selection list is of swSelectType_e = " & swSelectionMgr.GetSelectedObjectType3(i, -1) & "")
                                'Cast the object
                                swComponent = selObj
                                Debug.Print("       Name of component: " & swComponent.Name2)
                            Next

                            swSelectionMgr.ResumeSelectionList()
                        End If
                    End If

            End Select

            childNode = node.GetFirstChild()
            While Not childNode Is Nothing
                traverse_node(childNode, swFeatureMgr, swModel)
                childNode = childNode.GetNext
            End While

        End Sub


        Public Sub 旋转草图(中心线 As SldWorks.SketchLine, 偏转角度#)
            part.ClearSelection2(True)
            'line01.Select4(False, Nothing)
            sketch = SketchManager.ActiveSketch
            points = sketch.GetSketchPoints2
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select2(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            SketchSegment = 中心线
            SketchSegment.Select2(True, 2)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 偏转角度 / 180)
        End Sub

        Public Sub 偏移草图(偏移距离X#, 偏移距离Y#)
            part.ClearSelection2(True)
            'line01.Select4(False, Nothing)
            sketch = SketchManager.ActiveSketch
            points = sketch.GetSketchPoints2
            SketchSegments = sketch.GetSketchSegments
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select2(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            'SketchSegment = 中心线
            'SketchSegment.Select2(True, 2)
            part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 偏移距离X, 偏移距离Y, 0)
        End Sub
        Public Sub Selectallsegment_markcenterline(centerline As SldWorks.SketchLine, 相对Y轴偏转角度#)
            SketchSegments = sketch.GetSketchSegments
            points = sketch.GetSketchPoints2
            For i = 0 To UBound(SketchSegments)
                SketchSegment = SketchSegments(i)
                [Boolean] = SketchSegment.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            For i = 0 To UBound(points)
                P1 = points(i)
                [Boolean] = P1.Select4(True, Nothing) : Debug.Assert([Boolean])
            Next i
            'MsgBox(666)
            L01Segment.Select2(True, 2)
            L01Segment.Select2(True, 2)


            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * 相对Y轴偏转角度 / 180)
        End Sub '无效
        Public Shared Sub [End](dz$)
            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
            part.SaveAs3(dz, 0, 8)
        End Sub
        Public Sub OldDrawings结束(dz$)
            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 3) '长度精度保留小数点后3位
            part.SaveAs3(dz, 0, 8)
        End Sub
        Public Function OldDrawings开始(dz$, 主视图X#, 主视图Y#, 图纸比例值#, name$, material$, code$, Optional 技术要求1$ = "", Optional 技术要求2$ = "", Optional 技术要求3$ = "", Optional 技术要求4$ = "", Optional 技术要求5$ = "", Optional 技术要求6$ = "", Optional 图纸格式$ = "A3") 'Company $, name $, material $, code $
            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            Dim NewDocument As SldWorks.ModelDoc2
            If 图纸格式$ = "A3" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a3.drwdot", 1, 0, 0)
            ElseIf 图纸格式$ = "A4P" Then
                swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4P.drwdot", 1, 0, 0)
            End If



            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
            Dim SketchManager As SldWorks.SketchManager = part.SketchManager
            Dim FeatureManager As SldWorks.FeatureManager = part.FeatureManager
            Dim Dimension As SldWorks.Dimension
            Dim DisplayDimension As SldWorks.DisplayDimension
            Dim sketch As SldWorks.Sketch
            Dim Feature As SldWorks.Feature
            Dim SelectionMgr As SldWorks.SelectionMgr = part.SelectionManager

            Dim Draw As SldWorks.DrawingDoc = swapp.ActiveDoc
            Dim View As SldWorks.View '视图对象
            Dim Notes As Object
            Dim Count As Long
            Dim Annpos() As Double
            Dim Note As SldWorks.Note
            Dim Annotation As SldWorks.Annotation
            Dim Annotations() As Object
            Dim myView As SldWorks.View
            Dim Displaydimention As SldWorks.DisplayDimension



            Dim DrawTitle As String
            DrawTitle = Draw.GetTitle
            Dim myViewname As String
            part.ViewZoomtofit2()
            SelectionMgr = part.SelectionManager
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitSystem, 0, SwConst.swUnitSystem_e.swUnitSystem_MMGS)
            part.Extension.SetUserPreferenceInteger(SwConst.swUserPreferenceIntegerValue_e.swUnitsLinearDecimalPlaces, 0, 4)
            part.Extension.SetUserPreferenceInteger(372, 204, 2)
            part.Extension.SetUserPreferenceInteger(516, 2, 0)
            part.Extension.SetUserPreferenceInteger(517, 208, 0)
            part.Extension.SetUserPreferenceInteger(372, 208, 2) '直径半径折弯标注
            myView = Draw.CreateDrawViewFromModelView3(dz, "*前视", 主视图X#, 主视图Y#, 0)

            myViewname = myView.Name
            Debug.Print(myViewname)
            'myView = Draw.CreateUnfoldedViewAt3(0.3, 0.19, 0, False)
            Dim myNote As Object
            myNote = part.InsertNote("公司名称")
            If 图纸格式 = "A3" Then

                If Not myNote Is Nothing Then
                    myNote.LockPosition = False
                    myNote.Angle = 0
                    myNote.SetBalloon(0, 0)
                    Annotation = myNote.GetAnnotation()
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.375, 0.055, 0)
                        Annotation.SetTextFormat(0, True, 0)
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()

                View = Draw.GetFirstView 'A3
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes
                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 42 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司")
                            End If
                            If Annpos(0) > 315 / 1000 And Annpos(0) < 365 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)
                            End If
                            If Annpos(0) > 365 / 1000 And Annpos(0) < 415 / 1000 And Annpos(1) > 14 / 1000 And Annpos(1) < 23 / 1000 Then
                                N1.SetText(code)
                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)
                            End If
                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()

            ElseIf 图纸格式 = "A4P" Then
                If Not myNote Is Nothing Then
                    myNote.LockPosition = False
                    myNote.Angle = 0
                    myNote.SetBalloon(0, 0)
                    Annotation = myNote.GetAnnotation()
                    If Not Annotation Is Nothing Then
                        Annotation.SetLeader3(SwConst.swLeaderStyle_e.swNO_LEADER, 0, True, False, False, False)
                        Annotation.SetPosition(0.164493037612998, 0.0537752937136617, 0)
                        Annotation.SetTextFormat(0, True, 0)
                    End If
                End If
                part.ClearSelection2(True)
                part.WindowRedraw()

                View = Draw.GetFirstView 'A4P
                Do Until View Is Nothing
                    Notes = View.GetNotes()
                    Count = View.GetNoteCount()
                    If Count > 0 Then
                        For Each N1 In Notes

                            Annotation = N1.GetAnnotation()
                            Annpos = Annotation.GetPosition()
                            If Annpos(0) > 104 / 1000 And Annpos(0) < 153 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText(material)
                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 43 / 1000 And Annpos(1) < 61 / 1000 Then
                                N1.SetText("江西兰叶科技有限公司")


                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 23 / 1000 And Annpos(1) < 43 / 1000 Then
                                N1.SetText(name)


                            End If
                            If Annpos(0) > 153 / 1000 And Annpos(0) < 205 / 1000 And Annpos(1) > 12 / 1000 And Annpos(1) < 24 / 1000 Then
                                N1.SetText(code)


                            End If
                            If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
                                N1.SetText(code)


                            End If

                        Next
                    End If
                    View = View.GetNextView() '获得下一个视图引用
                Loop
                Draw.EditRebuild3()
            End If










            part = swapp.ActiveDoc
            part.FontPoints(18)
            myNote = part.InsertNote(
            技术要求1 + Chr(13) + Chr(10) +
            技术要求2 + Chr(13) + Chr(10) +
            技术要求3 + Chr(13) + Chr(10) +
            技术要求4 + Chr(13) + Chr(10) +
            技术要求5 + Chr(13) + Chr(10) +
            技术要求6）
            Annotation = myNote.GetAnnotation()
            Annotation.SetPosition(0.075, 0.07, 0)


            Dim Sheet1 As SldWorks.Sheet '图纸对象

            Dim SheetPr() As Double
            Draw = swapp.ActiveDoc
            Sheet1 = Draw.GetCurrentSheet()
            SheetPr = Sheet1.GetProperties2()
            SheetPr(2) = 1
            SheetPr(3) = 1 / 图纸比例值
            SheetPr(4) = 1
            Sheet1.SetProperties2(SheetPr(0), SheetPr(1), SheetPr(2), SheetPr(3), SheetPr(4), SheetPr(5), SheetPr(6), SheetPr(7))
            Draw.EditRebuild()



            'Dim propertymanager As SldWorks.ModelViewManager
            'propertymanager.GetFeatureManagerTabs()

            'Dim propertymanager As New SldWorks.CustomPropertyManager
            'propertymanager.IsCustomPropertyEditable()

            'Dim propertymanager As New SldWorks.PropertyManagerPage2
            'propertymanager.

            'Dim propertymanager As New SldWorks.PropertyManagerPageActiveX
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageBitmapButton
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageBitmap
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageButton
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageCheckbox
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageControl
            'propertymanager.


            'Dim propertymanager As New SldWorks.PropertyManagerPageListbox
            'propertymanager.InsertItem()


            'Dim propertymanager As New SldWorks.PropertyManagerPageOption
            'propertymanager.




            part.InsertModelAnnotations3(0, 32864 + 2, True, False, True, True) '允许有重复标注


            part.Extension.SelectByID2("草图1@*@工程图视图1", "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            part.UnblankSketch()
            part.Extension.SelectByID2("草图1@*@工程图视图1", "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
            part.BlankSketch()

        End Function

        Public Function OldDrawings圆底槽口局部视图(局部视图X#, 局部视图Y#, 局部视图图纸比例值#, 局部视图圆心X#, 局部视图圆心Y#, 局部视图圆半径#, Slot_Relative_Y_axis_deflection_angle#)
            Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
            Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")


            Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
            Dim SelectionMgr As SldWorks.SelectionMgr = part.SelectionManager

            Dim Draw As SldWorks.DrawingDoc = swapp.ActiveDoc
            Dim Note As SldWorks.Note
            Dim Annotation As SldWorks.Annotation
            Dim myView As SldWorks.View









            Dim arc1 As SldWorks.SketchArc
            Dim arc1Segment As SldWorks.SketchSegment
            Dim LINE01 As SldWorks.SketchSegment
            part.ActivateView("工程图视图1") '局部视图
            arc1 = part.SketchManager.CreateCircle(局部视图圆心X#, 局部视图圆心Y#, 0#, 局部视图圆心X#, 局部视图圆心Y# + 局部视图圆半径, 0#)
            arc1Segment = arc1
            LINE01 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.002, 0, 0)
            LINE01.Select4(False, Nothing)
            arc1Segment.Select4(True, Nothing)
            part.Extension.RotateOrCopy(False, 1, False, 0, 0, 0, 0, 0, 1, PI * Slot_Relative_Y_axis_deflection_angle / 180)




            myView = part.CreateDetailViewAt4(局部视图X#, 局部视图Y#, 0, 0, 1, 1 / 局部视图图纸比例值#, "I", 0, False, False, False, False)
            part.InsertModelAnnotations3(0, 32768, True, False, True, True) '允许有重复标注
            Note = myView.GetFirstNote
            Annotation = Note.GetAnnotation()
            Annotation.SetPosition2(局部视图X#, 局部视图Y# + (局部视图圆半径 + 0.015) * 局部视图图纸比例值, 0)

            'part.Extension.SketchBoxSelect((主视图X# + arc1.IGetCenterPoint2.X * 图纸比例值 - 局部视图半径 * SelectBox_proportion) / 图纸比例值, (主视图Y# + arc1.IGetCenterPoint2.Y * 图纸比例值 - 局部视图半径 * SelectBox_proportion) / 图纸比例值, 0#, (主视图X# + arc1.IGetCenterPoint2.X * 图纸比例值 + 局部视图半径 * SelectBox_proportion) / 图纸比例值, (主视图Y# + arc1.IGetCenterPoint2.Y * 图纸比例值 + 局部视图半径 * SelectBox_proportion) / 图纸比例值, 0#)


            part.Extension.SelectByID2("D1@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("D2@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D3@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D4@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D5@草图2@*@工程图视图1", "DIMENSION", 0， 0， 0， True, 0, Nothing, 0)
            part.Extension.SelectByID2("D6@草图2@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D7@草图2@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D8@草图2@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.Extension.SelectByID2("D9@草图2@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
            part.EditDelete()
        End Function




        Public Function Query_database(数据库名$， 表名$, Code$) As Boolean

            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + 数据库名$ + ";pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            '//打开数据库连接
            mysqlcon.Open()
            '//sql查询表
            mysqlcom = New MySqlCommand("select * from " + 表名$, mysqlcon)

            r = mysqlcom.ExecuteReader()
            r.Read()

            Dim i As Integer
            i = 0
            Do Until r("Code") = Code$ Or i = 1
                If r.Read() Then
                Else
                    i = 1
                End If
            Loop

            If r("Code") = Code$ Then
                Query_database = True
            Else
                Query_database = False
            End If

            r.Close()
            mysqlcom.Dispose()
            mysqlcon.Close()
            mysqlcon.Dispose()
        End Function


        Public Function mysql_initialization()
            'mysql_new()
        End Function

        Public Function single_rectangular_slot_rotor_core(结构组地址$, 结构组数据库$, 结构组表名$, 设计组地址$, 设计组数据库$, 设计组表名$) As String()
            'Dim PythonUtils As Object
            'PythonUtils = CreateObject("single_rectangular_slot_rotor_core")
            'Dim aa As Object()
            'aa = PythonUtils.test()
            'single_rectangular_slot_rotor_core = {aa(0)， aa(1)}
            'MsgBox(aa(0))
            'MsgBox(aa(1))


            连接数据库(结构组地址$, 结构组数据库)
            插入一行复制数据(结构组表名)


            连接数据库(设计组地址$, 设计组数据库$)
            Dim aa As String()
            aa = 提取最新数据(设计组表名,
                        "poles", '0
                        "bp",'1
                        "hp", '2
                        "bm", '3
                        "g", '4
                        "D1i", '5
                        "hm", '6
                        "Dir",'7
                        "lt2", '8
                        "d1p", '9
                        "b1p", '10
                        "nd",'11
                        "dy", '12
                        "td", '13
                        "angle", '14
                        "bd", '15
                        "hd", '16
                        "by1", '17
                        "ay", '18
                        "house_number") '19
            Dim pole$, bp$, hp$, bm$, g$, D1i$, hm$, Dir$, lt2$, d1p$, b1p$, nd$, dy$, td$, angle$, bd$, hd$, by1$, ay$, house_number$
            pole = aa(0)
            bp = aa(1)
            hp = aa(2)
            bm = aa(3)
            g = aa(4)
            D1i = aa(5)
            hm = aa(6)
            Dir = aa(7)
            lt2 = aa(8)
            d1p = aa(9)
            b1p = aa(10)
            nd = aa(11)
            dy = aa(12)
            td = aa(13)
            angle = aa(14)
            bd = aa(15)
            hd = aa(16)
            by1 = aa(17)
            ay = aa(18)
            house_number = aa(19)


            Dim bb%
            bb = 查询当前数据库所有表总行数(结构组地址$, 结构组数据库)
            Dim newcode$
            newcode = 取新号(结构组地址$, 结构组数据库, bb)


            连接数据库(结构组地址$, 结构组数据库)
            aa = 更新数据(结构组表名,
                 字段1:="code", value1:=newcode,
                 字段2:="Damping_slot_type", value2:=2.ToString,
                 字段3:="array_hole", value3:=0.ToString,
                 字段4:="Square_hole", value4:=0.ToString,
                 字段5:="Trapezoidal_hole", value5:=0.ToString,
                 字段6:="Slot1_Relative_Y_axis_deflection_angle", value6:=(-(nd - 1) * angle / 2),
                 字段7:="Slot1_angle", value7:=angle,
                 字段8:="Slot1_Array_number", value8:=pole,
                 字段9:="Slot1_number", value9:=nd,
                 字段10:="Slot1_bottom_diameter", value10:=dy,
                 字段11:="Slot1_outer_diameter", value11:=D1i - g,
                 字段12:="Slot1_top_width", value12:=bd,
                 字段13:="Slot1_Upper_body_height", value13:=hd,
                 字段14:="middle_hole_diameter", value14:=Dir,
                 字段15:="middle_hole_slot_width", value15:=Dir * 0.2,
                 字段16:="middle_hole_left_high", value16:=1.05 * Dir,
                 字段17:="middle_hole_Right_high", value17:=1.05 * Dir,
                 字段18:="srs_two_slot_top_width", value18:=bp,
                 字段19:="srs_two_slot_waist_width", value19:=bm,
                 字段20:="srs_waist_top_height", value20:=(D1i - g) / 2 - hp,
                 字段21:="srs_outer_diameter", value21:=D1i - g,
                 字段22:="table2_outer_diameter", value22:=Sqrt(Pow(((D1i - g) / 2 - hp - hm), 2) + Pow((bm / 2), 2)),
                  字段23:="thickness", value23:=lt2
                 )


            single_rectangular_slot_rotor_core = 去重(结构组表名, aa,
                                                       字段2:="Damping_slot_type",
                 字段3:="array_hole",
                 字段4:="Square_hole",
                 字段5:="Trapezoidal_hole",
                 字段6:="Slot1_Relative_Y_axis_deflection_angle",
                 字段7:="Slot1_angle",
                 字段8:="Slot1_Array_number",
                 字段9:="Slot1_number",
                 字段10:="Slot1_bottom_diameter",
                 字段11:="Slot1_outer_diameter",
                 字段12:="Slot1_top_width",
                 字段13:="Slot1_Upper_body_height",
                 字段14:="middle_hole_diameter",
                 字段15:="middle_hole_slot_width",
                 字段16:="middle_hole_left_high",
                 字段17:="middle_hole_Right_high",
                 字段18:="srs_two_slot_top_width",
                 字段19:="srs_two_slot_waist_width",
                 字段20:="srs_waist_top_height",
                 字段21:="srs_outer_diameter",
                 字段22:="table2_outer_diameter",
                 字段23:="thickness"
)
            'MsgBox(666)


        End Function

        Public Function fan(housenumber$) As String()
            'Dim PythonUtils As Object
            'PythonUtils = CreateObject("fan")
            'Dim aa As Object()
            'aa = PythonUtils.test(housenumber$)
            'fan = {aa(0)， aa(1)}
            If housenumber = "250" Then
                fan = {("8LY.435.008"), ("E:\works\generator_parts_library\fan\")}
            ElseIf housenumber = "280" Then
                fan = {("5LY.435.002"), ("E:\works\generator_parts_library\fan\assembly\")}
            ElseIf housenumber = "355" Then
                fan = {("5LY.435.002"), ("E:\works\generator_parts_library\fan\assembly\")}
            End If

        End Function

        Public Function shaft_sleeve(housenumber$) As String()
            If housenumber = "250" Then
                shaft_sleeve = {("8LY.211.005"), ("E:\works\generator_parts_library\shaft_sleeve\")}
            ElseIf housenumber = "280" Then
                shaft_sleeve = {("8LY.211.002"), ("E:\works\generator_parts_library\shaft_sleeve\")}
            ElseIf housenumber = "355" Then
                shaft_sleeve = {("8SB.255.2091"), ("E:\works\generator_parts_library\shaft_sleeve\")}
            End If

        End Function

        ' //balance_ring
        '//coupling_piece
        Public Function balance_ring(housenumber$) As String()
            If housenumber = "250" Then
                balance_ring = {("8LY.435.008"), ("E:\works\generator_parts_library\balance_ring\")}
            ElseIf housenumber = "280" Then
                balance_ring = {("8LY.101.001"), ("E:\works\generator_parts_library\balance_ring\")}
            ElseIf housenumber = "355" Then
                balance_ring = {("0"), ("E:\works\generator_parts_library\balance_ring\")}
            End If

        End Function

        Public Function coupling_piece(housenumber$) As String()
            If housenumber = "250" Then
                coupling_piece = {("8LY.233.006"), ("E:\works\generator_parts_library\coupling_piece\")}
            ElseIf housenumber = "280" Then
                coupling_piece = {("8LY.233.011"), ("E:\works\generator_parts_library\coupling_piece\")}
            ElseIf housenumber = "355" Then
                coupling_piece = {("8LY.233.002"), ("E:\works\generator_parts_library\coupling_piece\")}
            End If

        End Function


        Public Function single_rectangular_slot_rotor_core_assembly(结构组地址$, 结构组数据库$, 结构组表名$, part1$, part2$, part3$) As String()
            'Dim PythonUtils As Object
            'PythonUtils = CreateObject("single_rectangular_slot_rotor_core_assembly")
            'Dim aa As Object()
            'aa = PythonUtils.test(part1$, part2$, part3$)
            'single_rectangular_slot_rotor_core_assembly = {aa(0)， aa(1)}

            '连接数据库("localhost", "rotor_core_assembly")
            '插入一行复制数据("single_rectangular_slot_rotor_core")


            连接数据库(结构组地址$, 结构组数据库)
            插入一行复制数据(结构组表名)
            Dim bb%
            bb = 查询当前数据库所有表总行数(结构组地址$, 结构组数据库)
            Dim newcode$
            newcode = 取新号(结构组地址$, 结构组数据库, bb)
            Dim aa As String()
            连接数据库(结构组地址$, 结构组数据库)
            aa = 更新数据(结构组表名,
                 字段1:="code", value1:=newcode,
                 字段2:="Part1_Code", value2:=part1,
                 字段3:="Part2_Code", value3:=part2,
                 字段4:="Part3_Code", value4:=part3
                 )


            single_rectangular_slot_rotor_core_assembly = 去重(结构组表名, aa,
                                                       字段2:="Part1_Code",
                 字段3:="Part2_Code",
                 字段4:="Part3_Code"
)


        End Function

        Public Function single_rectangular_slot_rotor_assembly(结构组地址$, 结构组数据库$, 结构组表名$, part1$, part2$, part3$, 风扇地址$,
                                                               Optional house_number$ = "0", Optional shaft_sleeve$ = "0", Optional balance_ring$ = "0", Optional coupling_piece$ = "0") As String()
            'Dim PythonUtils As Object
            'PythonUtils = CreateObject("single_rectangular_slot_rotor_core_assembly")
            'Dim aa As Object()
            'aa = PythonUtils.test(part1$, part2$, part3$)
            'single_rectangular_slot_rotor_core_assembly = {aa(0)， aa(1)}

            '连接数据库("localhost", "rotor_core_assembly")
            '插入一行复制数据("single_rectangular_slot_rotor_core")


            连接数据库(结构组地址$, 结构组数据库)
            插入一行复制数据(结构组表名)
            Dim bb%
            bb = 查询当前数据库所有表总行数(结构组地址$, 结构组数据库)
            Dim newcode$
            newcode = 取新号(结构组地址$, 结构组数据库, bb)
            Dim aa As String()
            连接数据库(结构组地址$, 结构组数据库)
            aa = 更新数据(结构组表名,
                 字段1:="code", value1:=newcode,
                 字段2:="assembly1_Code", value2:=part1,
                 字段3:="Part1_Code", value3:=part2,
                 字段4:="Part2_Code", value4:=part3,
                 字段5:="Partaddress2", value5:=风扇地址,
                 字段6:="house_number", value6:=house_number,
                 字段7:="Part3_Code", value7:=shaft_sleeve,
                 字段8:="Part4_Code", value8:=balance_ring,
                 字段9:="Part5_Code", value9:=coupling_piece
                 )


            single_rectangular_slot_rotor_assembly = 去重(结构组表名, aa,
                                                           字段2:="assembly1_Code",
                 字段3:="Part1_Code",
                 字段4:="Part2_Code",
                 字段5:="Partaddress2",
                 字段6:="house_number",
                 字段7:="Part3_Code",
                 字段8:="Part4_Code",
                 字段9:="Part5_Code"
)


        End Function

        Public Function single_rectangular_slot_rotor_assembly(part1$, part2$, part3$) As String()
            Dim PythonUtils As Object
            PythonUtils = CreateObject("single_rectangular_slot_rotor_assembly")
            Dim aa As Object()
            aa = PythonUtils.test(part1$, part2$, part3$)
            single_rectangular_slot_rotor_assembly = {aa(0)， aa(1)}

        End Function

        Public Function single_rectangular_slot_Damping_plate(结构组地址$, 结构组数据库$, 结构组表名$, 设计组地址$, 设计组数据库$, 设计组表名$) As String()
            'Dim PythonUtils As Object
            'PythonUtils = CreateObject("single_rectangular_slot_Damping_plate")
            'Dim aa As Object()
            'aa = PythonUtils.test()
            'single_rectangular_slot_Damping_plate = {aa(0)， aa(1)}

            连接数据库(结构组地址$, 结构组数据库)
            插入一行复制数据(结构组表名)


            连接数据库(设计组地址$, 设计组数据库$)
            Dim aa As String()
            aa = 提取最新数据(设计组表名,
                        "poles", '0
                        "bp",'1
                        "hp", '2
                        "bm", '3
                        "g", '4
                        "D1i", '5
                        "hm", '6
                        "Dir",'7
                        "lt2", '8
                        "d1p", '9
                        "b1p", '10
                        "nd",'11
                        "dy", '12
                        "td", '13
                        "angle", '14
                        "bd", '15
                        "hd", '16
                        "by1", '17
                        "ay", '18
                        "house_number") '19
            Dim pole$, bp$, hp$, bm$, g$, D1i$, hm$, Dir$, lt2$, d1p$, b1p$, nd$, dy$, td$, angle$, bd$, hd$, by1$, ay$, house_number$
            pole = aa(0)
            bp = aa(1)
            hp = aa(2)
            bm = aa(3)
            g = aa(4)
            D1i = aa(5)
            hm = aa(6)
            Dir = aa(7)
            lt2 = aa(8)
            d1p = aa(9)
            b1p = aa(10)
            nd = aa(11)
            dy = aa(12)
            td = aa(13)
            angle = aa(14)
            bd = aa(15)
            hd = aa(16)
            by1 = aa(17)
            ay = aa(18)
            house_number = aa(19)


            Dim bb%
            bb = 查询当前数据库所有表总行数(结构组地址$, 结构组数据库)
            Dim newcode$
            newcode = 取新号(结构组地址$, 结构组数据库, bb)


            连接数据库(结构组地址$, 结构组数据库)
            aa = 更新数据(结构组表名,
                 字段1:="code", value1:=newcode,
                 字段2:="Damping_slot_type", value2:=2.ToString,
                 字段3:="array_hole", value3:=0.ToString,
                 字段4:="Square_hole", value4:=0.ToString,
                 字段5:="Trapezoidal_hole", value5:=0.ToString,
                 字段6:="Slot1_Relative_Y_axis_deflection_angle", value6:=(-(nd - 1) * angle / 2),
                 字段7:="Slot1_angle", value7:=angle,
                 字段8:="Slot1_Array_number", value8:=pole,
                 字段9:="Slot1_number", value9:=nd,
                 字段10:="Slot1_bottom_diameter", value10:=dy,
                 字段11:="Slot1_outer_diameter", value11:=D1i - g,
                 字段12:="Slot1_top_width", value12:=bd,
                 字段13:="Slot1_Upper_body_height", value13:=hd,
                 字段14:="middle_hole_diameter", value14:=Dir,
                 字段15:="middle_hole_slot_width", value15:=Dir * 0.2,
                 字段16:="middle_hole_left_high", value16:=1.05 * Dir,
                 字段17:="middle_hole_Right_high", value17:=1.05 * Dir,
                 字段18:="srs_two_slot_top_width", value18:=bp,
                 字段19:="srs_two_slot_waist_width", value19:=bm,
                 字段20:="srs_waist_top_height", value20:=(D1i - g) / 2 - hp,
                 字段21:="srs_outer_diameter", value21:=D1i - g,
                 字段22:="table2_outer_diameter", value22:=Sqrt(Pow(((D1i - g) / 2 - hp - hm), 2) + Pow((bm / 2), 2))
                 )


            single_rectangular_slot_Damping_plate = 去重(结构组表名, aa,
                                                       字段2:="Damping_slot_type",
                 字段3:="array_hole",
                 字段4:="Square_hole",
                 字段5:="Trapezoidal_hole",
                 字段6:="Slot1_Relative_Y_axis_deflection_angle",
                 字段7:="Slot1_angle",
                 字段8:="Slot1_Array_number",
                 字段9:="Slot1_number",
                 字段10:="Slot1_bottom_diameter",
                 字段11:="Slot1_outer_diameter",
                 字段12:="Slot1_top_width",
                 字段13:="Slot1_Upper_body_height",
                 字段14:="middle_hole_diameter",
                 字段15:="middle_hole_slot_width",
                 字段16:="middle_hole_left_high",
                 字段17:="middle_hole_Right_high",
                 字段18:="srs_two_slot_top_width",
                 字段19:="srs_two_slot_waist_width",
                 字段20:="srs_waist_top_height",
                 字段21:="srs_outer_diameter",
                 字段22:="table2_outer_diameter"
)
            'MsgBox(666)
        End Function
        Public Function Shaft_Update(结构组地址$, 结构组数据库$, 结构组表名$, 设计组地址$, 设计组数据库$, 设计组表名$) As String()
            'Dim PythonUtils As Object
            'PythonUtils = CreateObject("single_rectangular_slot_Damping_plate")
            'Dim aa As Object()
            'aa = PythonUtils.test()
            'single_rectangular_slot_Damping_plate = {aa(0)， aa(1)}

            连接数据库(结构组地址$, 结构组数据库)
            插入一行复制数据(结构组表名)


            连接数据库(设计组地址$, 设计组数据库$)
            Dim aa As String()
            aa = 提取最新数据(设计组表名,
                        "lt2", '0
                        "house_number") '1
            Dim lt2$, house_number$
            lt2 = aa(0)
            house_number = aa(1)



            Dim bb%
            bb = 查询当前数据库所有表总行数(结构组地址$, 结构组数据库)
            'MsgBox(bb)
            Dim newcode$
            newcode = 取新号(结构组地址$, 结构组数据库, bb)
            'MsgBox(newcode)

            连接数据库(结构组地址$, 结构组数据库)


            'If table_name =
            Dim house_355_KeywayLength, house_280_KeywayLength, house_250_KeywayLength, house_200_KeywayLength As Double

            If house_number = 355.ToString Then
                If lt2 < 89.ToString Then
                    house_355_KeywayLength = 30
                ElseIf lt2 < 110.ToString Then
                    house_355_KeywayLength = 40
                ElseIf lt2 < 140.ToString Then
                    house_355_KeywayLength = 60
                ElseIf lt2 < 180.ToString Then
                    house_355_KeywayLength = 80
                ElseIf lt2 < 200.ToString Then
                    house_355_KeywayLength = 120
                ElseIf lt2 < 260.ToString Then
                    house_355_KeywayLength = 150
                ElseIf lt2 <= 280.ToString Then
                    house_355_KeywayLength = 180
                ElseIf lt2 <= 330.ToString Then
                    house_355_KeywayLength = 200
                ElseIf lt2 <= 380.ToString Then
                    house_355_KeywayLength = 250
                ElseIf lt2 <= 450.ToString Then
                    house_355_KeywayLength = 280
                ElseIf lt2 <= 600.ToString Then
                    house_355_KeywayLength = 320
                ElseIf lt2 <= 650.ToString Then
                    house_355_KeywayLength = 320
                ElseIf lt2 <= 700.ToString Then
                    house_355_KeywayLength = 340
                End If
            End If
            If house_number = 280.ToString Then
                house_280_KeywayLength = lt2 - 5
            End If
            If house_number = 250.ToString Then
                house_250_KeywayLength = lt2 - 5 - 22
            End If
            If house_number = 200.ToString Then
                house_200_KeywayLength = lt2 - 10 - 70
            End If


            If house_number = 355.ToString Then
                aa = 更新数据(结构组表名,
                字段1:="code", value1:=newcode,
                字段2:="Dis05stStartPFrDivLine", value2:=lt2,
                字段3:="NkR_05sKeywayLength", value3:=house_355_KeywayLength
                )
                Shaft_Update = 去重(结构组表名, aa,
                             字段2:="Dis05stStartPFrDivLine",
                字段3:="NkR_05sKeywayLength")

            End If

            If house_number = 280.ToString Then
                aa = 更新数据(结构组表名,
                字段1:="code", value1:=newcode,
                字段2:="Step4_length", value2:=lt2,
                字段3:="NkL_04sKeywayLength", value3:=house_280_KeywayLength
                )
                Shaft_Update = 去重(结构组表名, aa,
                             字段2:="Step4_length",
                字段3:="NkL_04sKeywayLength")

            End If

            If house_number = 250.ToString Then
                aa = 更新数据(结构组表名,
                字段1:="code", value1:=newcode,
                字段2:="Step4_length", value2:=lt2,
                字段3:="NkL_04sKeywayLength", value3:=house_250_KeywayLength
                )
                Shaft_Update = 去重(结构组表名, aa,
                             字段2:="Step4_length",
                字段3:="NkL_04sKeywayLength")

            End If

            If house_number = 200.ToString Then
                aa = 更新数据(结构组表名,
                字段1:="code", value1:=newcode,
                字段2:="Step4_length", value2:=lt2,
                字段3:="NkR_04sKeywayLength", value3:=house_200_KeywayLength
                )
                Shaft_Update = 去重(结构组表名, aa,
                             字段2:="Step4_length",
                字段3:="NkR_04sKeywayLength")

            End If




            'MsgBox(666)
        End Function

        Public Function Damping_rod(结构组地址$, 结构组数据库$, 结构组表名$, 设计组地址$, 设计组数据库$, 设计组表名$) As String()
            'Dim PythonUtils As Object
            'PythonUtils = CreateObject("Damping_rod")
            'Dim aa As Object()
            'aa = PythonUtils.test()
            'Damping_rod = {aa(0)， aa(1)}


            连接数据库(结构组地址$, 结构组数据库$)
            插入一行复制数据(结构组表名$)


            连接数据库(设计组地址$, 设计组数据库$)
            Dim aa As String()
            aa = 提取最新数据(设计组表名, "dy", "lt2")


            Dim bb%
            bb = 查询当前数据库所有表总行数(结构组地址$, 结构组数据库$)
            Dim newcode$
            newcode = 取新号(结构组地址$, 结构组数据库$, bb)


            连接数据库(结构组地址$, 结构组数据库$)
            aa = 更新数据(结构组表名, "code", "diameter", "thickness",
                 value1:=newcode,
                 value2:=aa(0),
                 value3:=aa(1))


            Damping_rod = 去重(结构组表名, aa, "diameter", "thickness")
            'MsgBox(66666666)
        End Function

        Public Function rotor_core_assembly() As String
            Dim PythonUtils As Object
            PythonUtils = CreateObject("rotor_core_assembly")
            rotor_core_assembly = PythonUtils.test()

        End Function


        Public Sub Damping_rod(code$)
            Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=Damping_rod;pooling=false")
            Dim mysqlcom As MySqlCommand
            Dim r As MySqlDataReader
            '//打开数据库连接
            mysqlcon.Open()
            '//sql查询
            mysqlcom = New MySqlCommand("select * from Damping_rod", mysqlcon)
            r = mysqlcom.ExecuteReader()
            r.Read()
            Do Until r("Code") = code
                r.Read()
            Loop
            倒角凸台_fubin(r("diameter") / 1000， r("thickness") / 1000, r("Chamfer_length") / 1000， r("Chamfer angle"), r("Chamfering_parameters"), r("Tolerance_size"))
            属性设置("红铜-钴-铍-合金，UNS C17500")
            save(r("Parts_drawing_address") + r("code") + ".sldprt")
        End Sub
        Public Sub 倒角凸台_fubin(diameter#, thickness#, 倒角长#， 倒角角度#, Chamfering_parameters$， Tolerance_size#, Optional Tolerance$ = "", Optional Type# = 0, Optional Max$ = "", Optional Min$ = "") '凸台拉伸

            Dim SF As Object
            Dim p1, p2, p3, p4 As SketchPoint
            SelectPlane_fubin("right")

            part.SketchManager.InsertSketch(True)
            放大视图(10)
            part.SketchManager.CreateCircleByRadius(0, 0, 0, diameter# / 2)
            'part.AddDimension2(diameter# / 2 + 0.02, 0, -0.005)


            part.FeatureManager.FeatureExtrusion3(True, False, False, 0, 0, thickness#, 0, False, False, 0, 0, 0, 0, 0, 0, 0, 0, True, False, True, 0, 0, 0) '拉伸

            part.Extension.SelectByID2("", "FACE", 0, 0, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("", "FACE", thickness, 0, 0, True, 0, Nothing, 0)
            part.FeatureManager.InsertFeatureChamfer(6, 1, 倒角长, 倒角角度 * PI / 180, 0, 0, 0, 0)



            SelectPlane_fubin("front")
            part.SketchManager.InsertSketch(True)
            Dim l1, L2 As SldWorks.SketchPoint

            sketch = SketchManager.ActiveSketch
            Feature = sketch
            'SF = part.Extension.InsertSurfaceFinishSymbol3(2, 0, 0, 0, 0, 0, 1, "", "", "", "", "", "", "")
            'SF.GetAnnotation().SetPosition2(thickness / 2 + 0.1, diameter / 2, 0)

            l1 = part.SketchManager.CreatePoint((thickness# - 0.035), diameter# / 2, 0)
            'part.SketchManager.InsertSketch(True)


            'Debug.Print("Point1@" & Feature.Name)
            'part.Extension.SelectByID2("Point1@" & Feature.Name, "SKETCHPOINT", l1.X, l1.Y, 0, False, 0, Nothing, 0)
            part.Extension.SelectByID2("Point1", "SKETCHPOINT", l1.X, l1.Y, 0, False, 0, Nothing, 0)

            'part.ShowNamedView2("*右视", 4)
            'part.ViewZoomtofit2()
            Dim myGtol As Object
            Dim myAnno As Annotation
            Dim myNote As Object
            Dim myAnnotation As Object

            myGtol = part.InsertGtol()
            myGtol.SetFrameSymbols2（1, "<IGTOL-STRAIGHT>", False, "", False, "", "", "", ""）
            myGtol.SetFrameValues（1, Tolerance_size, "", "", "", ""）
            myAnno = myGtol.GetAnnotation()
            myAnno.SetPosition((thickness# - 0.02), diameter# / 2 + 0.02, 0)
            myAnno.SetLeader3(2, 0, True, False, False, False)

            'myGtol = part.InsertGtol()
            'myGtol.SetFrameSymbols2(1, "<IGTOL-STRAIGHT>", False, "", False, "", "", "", "")
            'myGtol.SetFrameValues(1, "0.1", "", "", "", "")
            'myGtol.SetFrameSymbols2(2, "", False, "", False, "", "", "", "")
            'myGtol.SetFrameValues(2, "", "", "", "", "")
            'myGtol.SetPTZHeight("", False)
            'myGtol.SetCompositeFrame(False)
            'myGtol.SetText(4, "")
            'myGtol.SetBetweenTwoPoints(False, "", "")
            'myAnno = myGtol.GetAnnotation()
            'myAnno.SetPosition(-(thickness# / 2 - 0.1), diameter# / 2 + 0.02, 0)
            'myAnno.SetLeader3(2, 0, True, False, False, False)
            ''myAnno.SetLeaderAttachmentPointAtIndex(0, l1.X, l1.Y, 0)


            p1 = part.SketchManager.CreatePoint(倒角长, diameter# / 2, 0)
            myNote = part.InsertNote(Chamfering_parameters)

            myNote.LockPosition = False
            myNote.Angle = 0
            myNote.SetBalloon(0, 0)
            myAnnotation = myNote.GetAnnotation()
            myAnnotation.SetLeader3(swLeaderStyle_e.swUNDERLINED, 0, True, False, False, False)

            myAnnotation.SetPosition(倒角长 + 0.01, diameter# / 2 + 0.015, 0)
            p2 = part.SketchManager.CreatePoint(0, diameter# / 2, 0)
            p3 = part.SketchManager.CreatePoint(0, -diameter# / 2, 0)
            p4 = part.SketchManager.CreatePoint(thickness, -diameter# / 2, 0)
            p3.Select4(False, Nothing)
            p4.Select4(True, Nothing)
            part.AddDimension2(thickness / 2, -diameter# / 2 - 0.015, 0)
            If Not Tolerance Is Nothing Then
                p3.Select4(False, Nothing)
                p2.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(-0.02, 0, 0)
                part.Extension.EditDimensionProperties(0, 0, 0, "", "", False, 9, 2, False, 12, 12, "<MOD-DIAM>", "", True, "", "", "", False, 1, "")
                SetTolvalue_fubin(Type, Max, Min)
                part.SketchManager.InsertSketch(True)

            Else
                p3.Select4(False, Nothing)
                p2.Select4(True, Nothing)
                DisplayDimension = part.AddDimension2(-0.02, 0, 0)
                part.Extension.EditDimensionProperties(0, 0, 0, "", "", False, 9, 2, False, 12, 12, "<MOD-DIAM>", "", True, "", "", "", False, 1, "")
                part.SketchManager.InsertSketch(True)
            End If

        End Sub
        Public Sub SelectPlane_fubin(plane$) '选择基准面


            If plane = "front" Then
                part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            ElseIf plane = "up" Then
                part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            ElseIf plane = "right" Then
                part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
            End If
        End Sub
        Public Sub SetTolvalue_fubin(type#, max$, min$)
            Dimension = DisplayDimension.GetDimension2(0)
            DimensionTolerance = Dimension.Tolerance
            DimensionTolerance.Type = type
            DimensionTolerance.SetFitValues(max, min)

        End Sub
        Public Sub End_fubin(dz$)
            part.SaveAs3(dz, 0, 8)
        End Sub
        Public Sub 插入零件(ByRef component As SldWorks.Component2, dz As String, Optional x# = 0, Optional y# = 0, Optional z# = 0)
            swapp.OpenDoc6(dz + ".SLDPRT", 1, 32, "", errors, longwarnings)
            part = swapp.ActivateDoc3(AssemblyTitle, True, 0, errors)
            component = part.AddComponent5(dz + ".SLDPRT", 0, "", False, "", x, y, z)
            swapp.CloseDoc(component.GetPathName())
        End Sub
        Public Sub 插入子装配体(ByRef component As SldWorks.Component2, dz As String, Optional x# = 0, Optional y# = 0, Optional z# = 0)
            swapp.OpenDoc6(dz + ".SLDASM", 2, 32, "", errors, longwarnings)
            part = swapp.ActivateDoc3(AssemblyTitle, True, 0, errors)
            component = part.AddComponent5(dz + ".SLDASM", 0, "", False, "", x, y, z)
            swapp.CloseDoc(component.GetPathName())
        End Sub

        Public Sub 获得子零件(component As Component2, ByRef componentchildren As Component2, name$, Optional 重复% = 0)

            Object数组1 = component.GetChildren
            Dim i As Integer = 0
            Do Until Object数组1(i).GetPathName Like name
                'MsgBox(Object数组1(i).GetPathName)
                i += 1
                componentchildren = Object数组1(i)
            Loop
            If 重复% = 1 Then
                i += 1
                Do Until Object数组1(i).GetPathName Like name
                    'MsgBox(Object数组1(i).GetPathName)
                    i += 1
                    componentchildren = Object数组1(i)
                Loop
            End If


            If i = 0 Then
                componentchildren = Object数组1(i)
            End If
        End Sub
        Public Sub 获得子零件_new(component As Component2, ByRef componentchildren As Component2, name$, Optional Number% = 1)

            Object数组1 = component.GetChildren

            For i = 0 To Object数组1.Count - 1
                If Object数组1(i).GetPathName Like name Then
                    If Right(Object数组1(i).Name2, 1) = Number.ToString Then
                        componentchildren = Object数组1(i)
                    End If
                End If
            Next


        End Sub
        Public Function pack_and_go(oldlocal$, new_local$)
            part = swapp.OpenDoc6(oldlocal + ".SLDASM", 2, 32, "", errors, longwarnings)
            Dim swPackAndGo As PackAndGo
            swPackAndGo = part.Extension.GetPackAndGo
            Dim namesCount As Integer
            namesCount = swPackAndGo.GetDocumentNamesCount

            swPackAndGo.IncludeDrawings = True
            swPackAndGo.IncludeSimulationResults = True
            swPackAndGo.IncludeToolboxComponents = True




            Dim pgFileNames As Object = Nothing
            Dim pgFileStatus As Object = Nothing
            Dim pgSetFileNames() As String
            Dim pgGetFileNames As Object
            Dim pgDocumentStatus As Object
            status = swPackAndGo.GetDocumentNames(pgFileNames)
            status = swPackAndGo.GetDocumentSaveToNames(pgFileNames, pgFileStatus)



            status = swPackAndGo.SetSaveToName(True, new_local)
            swPackAndGo.FlattenToSingleFolder = True
            swPackAndGo.AddPrefix = "LY_"
            swPackAndGo.AddSuffix = "_LY"

            ReDim pgGetFileNames(namesCount - 1)
            ReDim pgDocumentStatus(namesCount - 1)
            status = swPackAndGo.GetDocumentSaveToNames(pgGetFileNames, pgDocumentStatus)

            part.Extension.SavePackAndGo(swPackAndGo)

        End Function


        ' 尺寸驱动
        Public Sub mysql_new2(localhost$, database$, tabledase$, code$)
            mysqlcon = New MySqlConnection("server=" + localhost + ";userid=root" & ";password=123456" & ";database=" + database + ";pooling=false")
            mysqlcon.Open()
            mysqlcom = New MySqlCommand("select * from " + tabledase, mysqlcon)
            read = mysqlcom.ExecuteReader()
            read.Read()
            Do Until read("code") = code
                read.Read()
            Loop
        End Sub
        Public Sub 修改特征(特征名称$, 修改参数#, Optional 尺寸名称$ = "D1")
            修改参数# = 修改参数# / 1000
            part = swapp.ActiveDoc
            FeatureManager = part.FeatureManager
            SketchManager = part.SketchManager
            SelectionMgr = part.SelectionManager
            Dim swFeat As Feature
            part.Extension.SelectByID2(特征名称, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            swFeat = SelectionMgr.GetSelectedObject6(1, -1)
            part.ActivateSelectedFeature()
            part.Extension.SelectByID2(尺寸名称 + "@" + 特征名称 + "@" + part.GetTitle, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
            修改标注尺寸(修改参数#) 'ChangeDimensionVaule
            part.EditRebuild3()
        End Sub
        Public Sub test修改()
            swapp.OpenDoc6("E:\works\generator_parts_library\balance_ring\8LY.101.001.SLDPRT", 1, 32, "", errors, longwarnings)
            part = swapp.ActiveDoc
            FeatureManager = part.FeatureManager
            SketchManager = part.SketchManager
            SelectionMgr = part.SelectionManager
            修改特征("阵列(圆周)1", 2)
        End Sub
        Public Sub open_initialization(file_path$)
            OpenDoc7 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
            swapp = CreateObject("Sldworks.application")
            swapp.Visible = True
            swapp.CloseAllDocuments(True)
            swapp.FrameState = 1
            Dim a As Component2
            swapp.OpenDoc6(file_path$ + ".SLDPRT", 1, 32, "", errors, longwarnings)
            part = swapp.ActiveDoc
            FeatureManager = part.FeatureManager
            SketchManager = part.SketchManager
            SelectionMgr = part.SelectionManager
        End Sub
        Public Sub Modify_feature_拉伸切除(feature_name$, Depth#, Optional endcondition# = 0)
            Depth = Depth / 1000
            part.Extension.SelectByID2(feature_name, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim aa As SldWorks.ExtrudeFeatureData2
            aa = Feature.GetDefinition()
            aa.SetDepth(True, Depth)
            aa.ReverseDirection = False
            aa.SetEndCondition(True, endcondition)
            Feature.ModifyDefinition(aa, part, Nothing)
        End Sub
        Public Sub Modify_feature_圆周阵列(feature_name$, spacing#, total#, Optional spacing_type As Boolean = True)
            part.Extension.SelectByID2(feature_name, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim aa As ICircularPatternFeatureData
            aa = Feature.GetDefinition()
            aa.EqualSpacing = spacing_type '1方向类型
            aa.Spacing = spacing '1方向距离
            aa.TotalInstances = total '1方向个数
            Feature.ModifyDefinition(aa, part, Nothing)
        End Sub
        Public Sub Modify_feature_线性阵列(feature_name$, spacing#, total#, Optional spacing_type As Boolean = False， Optional spacing2# = 0, Optional total2# = 1, Optional spacing_type2 As Boolean = False)
            spacing = spacing / 1000
            part.Extension.SelectByID2(feature_name, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim aa As ILinearPatternFeatureData
            aa = Feature.GetDefinition()
            aa.D1ReverseDirection = spacing_type '1方向反向
            aa.D1Spacing = spacing '1方向距离
            aa.D1TotalInstances = total '1方向个数
            aa.D2ReverseDirection = spacing_type2 '2方向反向
            aa.D2Spacing = spacing2 '2方向距离
            aa.D2TotalInstances = total2 '2方向个数
            Feature.ModifyDefinition(aa, part, Nothing)
        End Sub
        Public Sub Modify_feature_倒角(feature_name$, distance1#, distance2#, Optional angle# = PI / 4, Optional type# = 1)
            distance1 = distance1 / 1000
            distance2 = distance2 / 1000
            part.Extension.SelectByID2(feature_name, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim aa As IChamferFeatureData2
            aa = Feature.GetDefinition()
            aa.Type = type '1角度距离 2距离距离 
            If aa.Type = 1 Then
                aa.EdgeChamferAngle = angle#
            End If
            If aa.Type = 2 Then
                aa.EqualDistance = False
                aa.SetEdgeChamferDistance(1, distance2)
            End If
            aa.SetEdgeChamferDistance(0, distance1)
            Feature.ModifyDefinition(aa, part, Nothing)
        End Sub
        Public Sub Modify_feature_旋转拉伸(feature_name$, angle#)
            part.Extension.SelectByID2(feature_name, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim aa As IRevolveFeatureData2
            aa = Feature.GetDefinition()
            aa.SetRevolutionAngle(True, angle#)
            Feature.ModifyDefinition(aa, part, Nothing)
        End Sub
        Public Sub Modify_feature_圆角(feature_name$, Radius#)
            Radius = Radius / 1000
            part.Extension.SelectByID2(feature_name, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim aa As ISimpleFilletFeatureData2
            aa = Feature.GetDefinition()
            'aa.ISetRadius(1, 6 / 1000)
            aa.DefaultRadius = Radius
            Feature.ModifyDefinition(aa, part, Nothing)
        End Sub
        Public Sub Modify_feature_基体法兰(feature_name$, wight#, Optional thickness# = 2 / 1000， Optional Fillet# = 2 / 1000)

            part.Extension.SelectByID2(feature_name, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            SelectionMgr = part.SelectionManager
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            Dim aa As IBaseFlangeFeatureData
            aa = Feature.GetDefinition()
            aa.BendRadius = Fillet#
            aa.D1OffsetDistance = wight#
            aa.Thickness = thickness#
            Feature.ModifyDefinition(aa, part, Nothing)
        End Sub
        Public Sub 修改特征草图(特征名称$, 修改参数#, Optional 尺寸名称$ = "D1")
            part.Extension.SelectByID2(特征名称, "BODYFEATURE", 0, 0, 0, False, 0, Nothing, 0)
            'MsgBox(0)
            Feature = SelectionMgr.GetSelectedObject6(1, -1)
            part.FeatEdit()
            part.Extension.SelectByID2(尺寸名称 + "@" + Feature.IGetFirstSubFeature().Name + "@*", "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
            'MsgBox(0)
            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
            修改标注尺寸(修改参数)
            part.InsertSketch2(True)
        End Sub
        Public Sub 转轴355尺寸驱动(localhost$, database$, tabledase$, code$)


            mysql_new2(localhost$, database$, tabledase$, code$)

            Part_initialization_news("E:\works\Motor_template_parts_library\rotor_shaft\005.SLDPRT")


            修改特征草图("旋转1", read("Dis05stStartPFrDivLine") / 1000 + 0.197, "D7")

        End Sub
        Public Sub 定子冲片尺寸驱动(localhost$, database$, tabledase$, code$)


            mysql_new2(localhost$, database$, tabledase$, code$)

            Part_initialization_news("E:\works\Motor_template_parts_library\stator_lamination\8LY.670.120.SLDPRT")

            修改特征草图("凸台-拉伸1", read("diameter") / 1000, "D1") '外径

            Modify_feature_拉伸切除("凸台-拉伸1", read("thickness")) '修改特征

            修改特征草图("切除-拉伸1", read("inside_diameter") / 1000, "D1") '内径

            修改特征草图("切除-拉伸2", read("Groove_Bottom_Width") / 1000, "D1") '槽内宽度1

            修改特征草图("切除-拉伸2", read("Groove_Bottom_Short_Hight") / 1000, "D2") '槽底竖直长度1

            修改特征草图("切除-拉伸2", read("Bottom_tip_width") / 1000, "D3") '槽内宽度2（较宽）

            修改特征草图("切除-拉伸2", read("Groove_Bottom_Long_Hight") / 1000, "D4") '槽底竖直长度2（较长）

            修改特征草图("切除-拉伸2", read("Dome_Radius") / 1000 * 2, "D5") '槽外圆

            修改特征草图("切除-拉伸2", read("Dome_center_height") / 1000, "D6") '槽底竖直长度2（较长）

            Modify_feature_圆周阵列("阵列(圆周)1", 2 * PI, read("Groove_number"))

            设置属性(read("name"), read("code"), read("material"))

            part.Save()
            swapp.CloseDoc(part.GetTitle)

            swapp.OpenDoc6("E:\\works\\generator_parts_library\\stator_lamination\\001" + ".slddrw", 3, 32, "", errors, longwarnings)
            MsgBox(1)

            pack_and_go(read("part_save_address") + "001", "E:\works"）

        End Sub
    End Class








    Public Class Run_huangzilong



        'Public Shared Function 计数器(数据库名$， 表名$, Optional 行数% = 0) As Integer
        '    Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + 数据库名$ + ";pooling=false")
        '    Dim mysqlcom As MySqlCommand
        '    Dim r As MySqlDataReader
        '    '//打开数据库连接
        '    mysqlcon.Open()
        '    '//sql查询表
        '    mysqlcom = New MySqlCommand("select * from " + 表名$, mysqlcon)
        '    r = mysqlcom.ExecuteReader()
        '    'r.Read()
        '    Dim i As Integer
        '    i = 行数
        '    Do Until r.Read() = False
        '        i = i + 1
        '    Loop
        '    计数器 = i
        '    r.Close()
        '    mysqlcom.Dispose()
        '    mysqlcon.Close()
        '    mysqlcon.Dispose()
        'End Function
        'Public Shared Function Query_database(数据库名$， 表名$, Code$) As Boolean
        '    Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + 数据库名$ + ";pooling=false")
        '    Dim mysqlcom As MySqlCommand
        '    Dim r As MySqlDataReader
        '    '//打开数据库连接
        '    mysqlcon.Open()
        '    '//sql查询表
        '    mysqlcom = New MySqlCommand("select * from " + 表名$, mysqlcon)

        '    r = mysqlcom.ExecuteReader()
        '    r.Read()


        '    Dim i As Integer
        '    i = 0
        '    Do Until r("Code") = Code$ Or i = 1
        '        If r.Read() Then
        '        Else
        '            i = 1
        '        End If
        '    Loop


        '    If r("Code") = Code$ Then
        '        Query_database = True
        '    Else
        '        Query_database = False
        '    End If




        '    r.Close()
        '    mysqlcom.Dispose()
        '    mysqlcon.Close()
        '    mysqlcon.Dispose()
        'End Function


        Public Class 测试
            '自定义类型，可用于自定义函数返回自己定义的类型


            Public Class test

                Public aa%
                Public bb#
                Public cc$

            End Class
            Public Function x() As test
                Dim result As New test
                result.aa = 2
                result.bb = 2.2
                result.cc = "2.222"
                Return result
                'MsgBox(result)
            End Function

            'Public Function dd() As rotor_lamination.cc
            'End Function
        End Class

        Public Class rotor_lamination

            Public Function 计数器(数据库名$， 表名$, Optional 行数% = 0) As Integer
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + 数据库名$ + ";pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询表
                mysqlcom = New MySqlCommand("select * from " + 表名$, mysqlcon)
                r = mysqlcom.ExecuteReader()
                'r.Read()
                Dim i As Integer
                i = 行数
                Do Until r.Read() = False
                    i = i + 1
                Loop
                计数器 = i
                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Function
            Public Function Query_database(数据库名$， 表名$, Code$) As Boolean



                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + 数据库名$ + ";pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询表
                mysqlcom = New MySqlCommand("select * from " + 表名$, mysqlcon)

                r = mysqlcom.ExecuteReader()
                r.Read()


                Dim i As Integer
                i = 0
                Do Until r("Code") = Code$ Or i = 1
                    If r.Read() Then
                    Else
                        i = 1
                    End If
                Loop


                If r("Code") = Code$ Then
                    Query_database = True
                Else
                    Query_database = False
                End If




                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Function
            Public Sub Roundbottomslot_roundhole_Squarehole_middlehole(Code$)





                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询表
                mysqlcom = New MySqlCommand("select * from Roundbottomslot_roundhole_Squarehole_middlehole", mysqlcon)

                r = mysqlcom.ExecuteReader()
                r.Read()

                'MsgBox(r.FieldCount) '列数

                Do Until r("Code") = Code$
                    r.Read()
                Loop

                Dim aaa As New zhangweibin.Module_huangzilong

                aaa.Part_initialization()

                aaa.Round_table(r("Slot_outer_diameter"), r("thickness"), aaa.index_String(r("Slot_outer_diameter_Attach"), 1)， aaa.index_String(r("Slot_outer_diameter_Attach"), 2)，
                                                        aaa.index_String(r("Slot_outer_diameter_Attach"), 3)， aaa.index_String(r("Slot_outer_diameter_Attach"), 4), aaa.index_String(r("Slot_outer_diameter_Attach"), 5), aaa.index_String(r("Slot_outer_diameter_Attach"), 6),
                                                        aaa.index_String(r("Slot_outer_diameter_Attach"), 7), aaa.index_String(r("Slot_outer_diameter_Attach"), 8)， r("Proportional_value"))

                aaa.Round_bottom_slot(r("Slot_Relative_Y_axis_deflection_angle"), r("Slot_number"), r("Slot_bottom_radius"), r("Slot_outer_diameter"), r("Slot_inside_diameter"), r("Slot_shoulder_width"), r("Slot_top_width"), r("Slot_one_Step_height"), r("Slot_two_steps_height"),
                                      aaa.index_String(r("Slot_Attach"), 1), aaa.index_String(r("Slot_Attach"), 2), aaa.index_String(r("Slot_Attach"), 3), aaa.index_String(r("Slot_Attach"), 4)， r("Proportional_value")) '调用画槽口模块

                If r("middle_hole") = 1 Then
                    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")， 图纸比例值:=r("Proportional_value"))
                End If

                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")， 图纸比例值:=r("Proportional_value"))
                End If

                For i = 1 To r("round_hole")
                    aaa.round_hole(r("round_hole" + i.ToString + "_Number"), r("round_hole" + i.ToString + "_center_distance"), r("round_hole" + i.ToString + "_diameter"), r("round_hole" + i.ToString + "_relative_X_axis_deflection_angle")， aaa.index_String(r("round_hole" + i.ToString + "_attach"), 1), aaa.index_String(r("round_hole" + i.ToString + "_attach"), 2))
                Next



                If r("Square_hole") = 1 Then
                    aaa.Square_hole(r("Square_hole_Center_distance"), r("Square_hole_diameter"), r("Square_hole_horizontal_side_length"), DimensionProperties:=1)
                End If
                aaa.save(r("Parts_drawing_address"))
                'swapp.CloseDoc("")

                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"), aaa.index_String(r("skills_requirement"), 1), aaa.index_String(r("skills_requirement"), 2), aaa.index_String(r("skills_requirement"), 3), aaa.index_String(r("skills_requirement"), 4), aaa.index_String(r("skills_requirement"), 5), aaa.index_String(r("skills_requirement"), 6))
                aaa.OldDrawings圆底槽口局部视图(0.347, 0.16, r("Local_scale_value"), 0, (r("Slot_outer_diameter") + r("Slot_inside_diameter")) / 2 / 2 / 1000, (r("Slot_outer_diameter") - r("Slot_inside_diameter")) / 2 / 2 / 1000 + 0.002, r("Slot_Relative_Y_axis_deflection_angle"))
                aaa.OldDrawings结束(r("Drawings_address"))

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()

            End Sub
            Public Sub Roundbottomslot_Localarrayhole(Code$)
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from Roundbottomslot_Localarrayhole", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()

                Do Until r("Code") = Code$
                    r.Read()

                Loop

                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                aaa.Round_table(r("Slot_outer_diameter"), r("thickness"), aaa.index_String(r("Slot_outer_diameter_Attach"), 1)， aaa.index_String(r("Slot_outer_diameter_Attach"), 2)，
                                                        aaa.index_String(r("Slot_outer_diameter_Attach"), 3)， aaa.index_String(r("Slot_outer_diameter_Attach"), 4), aaa.index_String(r("Slot_outer_diameter_Attach"), 5), aaa.index_String(r("Slot_outer_diameter_Attach"), 6),
                                                        aaa.index_String(r("Slot_outer_diameter_Attach"), 7), aaa.index_String(r("Slot_outer_diameter_Attach"), 8))

                aaa.Round_bottom_slot(r("Slot_Relative_Y_axis_deflection_angle"), r("Slot_number"), r("Slot_bottom_radius"), r("Slot_outer_diameter"), r("Slot_inside_diameter"), r("Slot_shoulder_width"), r("Slot_top_width"), r("Slot_one_Step_height"), r("Slot_two_steps_height"), r("Slot_Gtol"), r("Slot_Gtol_Value"), r("Slot_Gtol_datum")) '调用画槽口模块

                aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")，
                                 r("middle_hole_slot_width_TolType")， r("middle_hole_slot_width_TolMax")， r("middle_hole_slot_width_TolMin")， r("middle_hole_slot_width_TolMaxFit"), r("middle_hole_slot_width_TolMinFit")，
                                 r("middle_hole_diameter_TolType")， r("middle_hole_diameter_TolMax")， r("middle_hole_diameter_TolMin")， r("middle_hole_diameter_TolMaxFit"), r("middle_hole_diameter_TolMinFit"))

                If r("round_hole") >= 1 Then
                    aaa.round_hole(r("round_hole1_Number"), r("round_hole1_center_distance"), r("round_hole1_diameter"), r("round_hole1_relative_X_axis_deflection_angle")， 0)

                End If

                If r("round_hole") >= 2 Then
                    aaa.round_hole_negative(r("round_hole2_Number"), r("round_hole2_center_distance"), r("round_hole2_diameter"), r("round_hole2_relative_X_axis_deflection_angle")， 0， 尺寸标注:=0)

                End If

                If r("round_hole") >= 3 Then
                    aaa.round_hole(r("round_hole3_Number"), r("round_hole3_center_distance"), r("round_hole3_diameter"), r("round_hole3_relative_X_axis_deflection_angle")， 10)

                End If

                If r("Square_hole") >= 1 Then
                    aaa.Square_hole(r("Square_hole_Center_distance"), r("Square_hole_diameter"), r("Square_hole_horizontal_side_length"))

                End If

                If r("holes_Array_number") >= 1 Then
                    aaa.deflection_array_of_circular_holes(r("holes_Array_number"), r("holes_number"), r("holes_relative_Y_axis_deflection_angle"), r("holes_angle"), r("holes_center_distance"), r("holes_diameter"), r("holes_deflection_distance_Y"))

                End If

                aaa.save(r("Parts_drawing_address"))
                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings圆底槽口局部视图(0.347, 0.16, r("Local_scale_value"), 0, (r("Slot_outer_diameter") + r("Slot_inside_diameter")) / 2 / 2 / 1000, (r("Slot_outer_diameter") - r("Slot_inside_diameter")) / 2 / 2 / 1000 + 0.002, r("Slot_Relative_Y_axis_deflection_angle"))
                aaa.OldDrawings结束(r("Drawings_address"))





                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()

            End Sub
            Public Sub Three_rectangular_slots(Code$)
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from Three_rectangular_slots", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()







                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop



                aaa.Round_table(r("Slot_outer_diameter"), r("thickness"), aaa.index_String(r("Slot_outer_diameter_Attach"), 1)， aaa.index_String(r("Slot_outer_diameter_Attach"), 2)，
                                            aaa.index_String(r("Slot_outer_diameter_Attach"), 3)， aaa.index_String(r("Slot_outer_diameter_Attach"), 4), aaa.index_String(r("Slot_outer_diameter_Attach"), 5), aaa.index_String(r("Slot_outer_diameter_Attach"), 6),
                                            aaa.index_String(r("Slot_outer_diameter_Attach"), 7), aaa.index_String(r("Slot_outer_diameter_Attach"), 8))
                aaa.array_small_round_bottomsolt(r("Slot_Array_number"), r("Slot_Relative_Y_axis_deflection_angle"), r("Slot_angle"), 0 / 1000, 0, r("Slot_number"),
                                            r("Slot_bottom_diameter") / 1000, r("Slot_outer_diameter") / 1000, r("Slot_Upper_body_height") / 1000, r("Slot_top_width") / 1000)

                If r("array_hole") >= 1 Then
                    aaa.deflection_array_of_circular_holes(r("array1_Number"), r("array_hole1_Number"), r("array_hole1_relative_Y_axis_deflection_angle"), r("array_hole1_angle"),
                                            r("array_hole1_center_distance"), r("array_hole1_diameter"), 0)
                End If
                If r("array_hole") >= 2 Then
                    aaa.deflection_array_of_circular_holes(r("array2_Number"), r("array_hole2_Number"), r("array_hole2_relative_Y_axis_deflection_angle"), r("array_hole2_angle"),
                                             r("array_hole2_center_distance"), r("array_hole2_diameter"), 10， 尺寸方向:=-1)
                End If
                If r("array_hole") >= 3 Then
                    aaa.deflection_array_of_circular_holes(r("array3_Number"), r("array_hole3_Number"), r("array_hole3_relative_Y_axis_deflection_angle"), r("array_hole3_angle"),
                                            r("array_hole3_center_distance"), r("array_hole3_diameter"), 20)
                End If

                If r("middle_hole") = 1 Then
                    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high"),
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)， aaa.index_String(r("middle_hole_diameter_Attach"), 1)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)， aaa.index_String(r("middle_hole_diameter_Attach"), 4),
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If
                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"),
                                     r("middle_hole_Right_high"), aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 3)， aaa.index_String(r("middle_hole_slot_width_Attach"), 4),
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 5)， aaa.index_String(r("middle_hole_diameter_Attach"), 1)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If



                aaa.Three_rectangular_slots(r("Threerectangularslots_Number"), r("Threerectangularslots_Relative_Y_axis_deflection_angle"),
                                            r("Threerectangularslots_side_slot_max_distance") / 1000, r("Threerectangularslots_side slot min distance") / 1000,
                                            r("Threerectangularslots_side_slot_slot_min_distance") / 1000, r("Threerectangularslots_side_slot_slot_width") / 1000,
                                            r("Threerectangularslots_Middle_slot_width") / 1000, r("Threerectangularslots_side_slot_bottom_height") / 1000,
                                            r("Threerectangularslots_side_slot_shoulder_height") / 1000, r("Threerectangularslots_middle_slot_bottom_height") / 1000,
                                            r("Threerectangularslots_Middle_slot_top_height") / 1000, r("Threerectangularslots_side_slot_top_height") / 1000,
                                            r("Threerectangularslots_outer_diameter") / 1000, r("Threerectangularslots_FilletR1") / 1000,
                                            r("Threerectangularslots_FilletR2") / 1000, r("Threerectangularslots_FilletR3") / 1000,
                                            r("Threerectangularslots_FilletR4") / 1000, r("Threerectangularslots_FilletR5") / 1000,
                                            r("Threerectangularslots_FilletR6") / 1000)

                aaa.save(r("Parts_drawing_address"))

                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings结束(r("Drawings_address"))

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()

            End Sub
            Public Sub Flat_bottom_slots(Code$)
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from flat_bottom_slots", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()

                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop

                aaa.Round_table(r("FbS_outer_diameter"), r("thickness"), aaa.index_String(r("FbS_outer_diameter_Attach"), 1)， aaa.index_String(r("FbS_outer_diameter_Attach"), 2)，
                                                        aaa.index_String(r("FbS_outer_diameter_Attach"), 3)， aaa.index_String(r("FbS_outer_diameter_Attach"), 4), aaa.index_String(r("FbS_outer_diameter_Attach"), 5),
                                                        aaa.index_String(r("FbS_outer_diameter_Attach"), 6), aaa.index_String(r("FbS_outer_diameter_Attach"), 7), aaa.index_String(r("FbS_outer_diameter_Attach"), 8))
                aaa.Flat_bottom_slots(r("FbS_Relative_Y_axis_deflection_angle"), slot_number:=r("FbS_number"), outer_diameter:=r("FbS_outer_diameter") / 1000, shoulder_width:=r("FbS_shoulder_width") / 1000,
                                      bottom_width:=r("FbS_bottom_width") / 1000, top_width:=r("FbS_top_width") / 1000, one_Step_height:=r("FbS_one_Step_height") / 1000,
                                      two_steps_height:=r("FbS_two_steps_height") / 1000, three_steps_height#:=r("FbS_three_steps_height") / 1000, rounded_R1#:=r("FbS_rounded_R1") / 1000, rounded_R2#:=r("FbS_rounded_R2") / 1000) '相对Y轴偏转角度#, 槽口数#, 外径#, 肩宽#, 底宽#, 顶宽#, 一阶梯高#, 二阶梯高#, 三阶梯高#, 圆角R1#, 圆角R2#


                If r("middle_hole") = 1 Then
                    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high"),
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If
                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If

                If r("round_hole") >= 1 Then
                    aaa.round_hole(r("round_hole1_Number"), r("round_hole1_center_distance"), r("round_hole1_diameter"), r("round_hole1_relative_X_axis_deflection_angle")， 0)

                End If
                If r("round_hole") >= 2 Then
                    aaa.round_hole_negative(r("round_hole2_Number"), r("round_hole2_center_distance"), r("round_hole2_diameter"), r("round_hole2_relative_X_axis_deflection_angle")， 0)

                End If

                If r("Trapezoidal_hole") = 1 Then
                    aaa.Trapezoidal_hole(r("Th_Type"), r("Th_relative_Y_axis_deflection_angle"), r("Th_slot_number"),
                                        r("Th_outer_diameter") / 1000, r("Th_inner_diameter") / 1000, r("Th_distance_between_slots") / 1000,
                                      r("Th_round_R1") / 1000, r("Th_round_R2") / 1000, r("Th_top_width") / 1000, r("Th_bottom_width") / 1000,
                                      r("Th_waist_angle"))
                    '功能模块.梯形孔("平行", 0, 8, 260 / 1000, 160 / 1000, 16 / 1000, 10 / 1000, 5 / 1000, 0, 0, 0)
                End If

                If r("Small_round_bottom_slot") = 1 Then
                    aaa.array_small_round_bottomsolt(r("Srbs_Array_number"), r("Srbs_Relative_Y_axis_deflection_angle"), r("Srbs_angle"), 0 / 1000, 0, r("Srbs_number"),
                                           r("Srbs_bottom_diameter") / 1000, r("Srbs_outer_diameter") / 1000, r("Srbs_Upper_body_height") / 1000, r("Srbs_top_width") / 1000)

                End If







                aaa.save(r("Parts_drawing_address"))

                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings圆底槽口局部视图(0.347, 0.11, r("Local_scale_value"), 0, (r("FbS_outer_diameter") + (r("FbS_outer_diameter") - 2 * r("FbS_one_Step_height") - 2 * r("FbS_two_Steps_height") - 2 * r("FbS_three_Steps_height"))) / 2 / 2 / 1000, (r("FbS_outer_diameter") - (r("FbS_outer_diameter") - 2 * r("FbS_one_Step_height") - 2 * r("FbS_two_Steps_height") - 2 * r("FbS_three_Steps_height"))) / 2 / 2 / 1000 + 0.002, r("FbS_Relative_Y_axis_deflection_angle"))
                aaa.OldDrawings结束(r("Drawings_address"))

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub
            Public Sub Flatbottom_smallroundbottom_slot(Code$)
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from flatbottom_smallroundbottom_slot", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()

                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop

                aaa.Round_table(r("Fbsrbs_outer_diameter"), r("thickness"), aaa.index_String(r("Fbsrbs_outer_diameter_Attach"), 1)， aaa.index_String(r("Fbsrbs_outer_diameter_Attach"), 2)，
                                                        aaa.index_String(r("Fbsrbs_outer_diameter_Attach"), 3)， aaa.index_String(r("Fbsrbs_outer_diameter_Attach"), 4), aaa.index_String(r("Fbsrbs_outer_diameter_Attach"), 5),
                                                        aaa.index_String(r("Fbsrbs_outer_diameter_Attach"), 6), aaa.index_String(r("Fbsrbs_outer_diameter_Attach"), 7), aaa.index_String(r("Fbsrbs_outer_diameter_Attach"), 8))
                aaa.平底加小圆底槽口(r("Fbsrbs_Relative_Y_axis_deflection_angle"), r("Fbsrbs_number"), r("Fbsrbs_outer_diameter") / 1000, r("Fbsrbs_shoulder_width") / 1000, r("Fbsrbs_bottom_width") / 1000, r("Fbsrbs_top_width") / 1000, r("Fbsrbs_one_Step_height") / 1000,
                                     r("Fbsrbs_two_steps_height") / 1000, r("Fbsrbs_three_steps_height") / 1000, r("Fbsrbs_rounded_R1") / 1000, r("Fbsrbs_rounded_R2") / 1000, r("Fbsrbs_rounded_R3") / 1000, r("Fbsrbs_bottom_circle_diameter") / 1000, r("Fbsrbs_small_round_slot_outer_diameter") / 1000, r("Fbsrbs_small_round_slot_height1") / 1000, r("Fbsrbs_small_round_slot_width1") / 1000)


                If r("middle_hole") = 1 Then
                    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high"),
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If
                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If

                If r("round_hole") >= 1 Then
                    aaa.round_hole(r("round_hole1_Number"), r("round_hole1_center_distance"), r("round_hole1_diameter"), r("round_hole1_relative_X_axis_deflection_angle")， 0)

                End If
                If r("round_hole") >= 2 Then
                    aaa.round_hole(r("round_hole2_Number"), r("round_hole2_center_distance"), r("round_hole2_diameter"), r("round_hole2_relative_X_axis_deflection_angle")， 20)

                End If

                If r("Small_round_bottom_slot") = 1 Then
                    aaa.array_small_round_bottomsolt(r("Srbs_Array_number"), r("Srbs_Relative_Y_axis_deflection_angle"), r("Srbs_angle"), 0 / 1000, 0, r("Srbs_number"),
                                           r("Srbs_bottom_diameter") / 1000, r("Srbs_outer_diameter") / 1000, r("Srbs_Upper_body_height") / 1000, r("Srbs_top_width") / 1000)

                End If

                If r("Arc_slot") = 1 Then
                    aaa.圆弧槽孔(r("Arc_slot_RelativeYaxis_deflection_angle"), r("Arc_slot_number"), r("Arc_slot_width") / 1000,
                         r("Arc_slot_body_angle"), r("Arc_radius") / 1000)
                    'aaa.圆弧槽孔(20, 5, 7 * 2 / 1000, 32, (53 + 39) / 2 / 1000)
                End If




                aaa.save(r("Parts_drawing_address"))

                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings圆底槽口局部视图(0.347, 0.16, r("Local_scale_value"), 0, (r("Fbsrbs_outer_diameter") + (r("Fbsrbs_small_round_slot_outer_diameter") - r("Fbsrbs_bottom_circle_diameter") - 2 * r("Fbsrbs_small_round_slot_height1"）)) / 4 / 1000, (r("Fbsrbs_outer_diameter") - (r("Fbsrbs_small_round_slot_outer_diameter") - r("Fbsrbs_bottom_circle_diameter") - 2 * r("Fbsrbs_small_round_slot_height1"）)) / 4 / 1000 + 0.002, r("Fbsrbs_Relative_Y_axis_deflection_angle"))
                aaa.OldDrawings结束(r("Drawings_address"))

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub
            Public Sub V_shaped_hole(Code$)


                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from v_shaped_hole", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()

                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop
                aaa.偏心圆凸台(r("Ert_diameter"), r("thickness"), r("Ert_relative_X_axis_deflection_angle"), r("Ert_Array_number"), r("Ert_X_eccentricity"))
                For i = 1 To r("Arrayholes")
                    aaa.deflection_array_of_circular_holes(r("holes" + i.ToString + "_Array_number"), r("holes" + i.ToString + "_number"), r("holes" + i.ToString + "_relative_Y_axis_deflection_angle"), r("holes" + i.ToString + "_angle"), r("holes" + i.ToString + "_center_distance"),
                                                       r("holes" + i.ToString + "_diameter"), 0, r("holes" + i.ToString + "_deflection_distance_Y"))
                Next i


                If r("middle_hole") = 1 Then
                    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high"),
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If
                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If


                If r("Array_of_single_rectangular_slots") = 1 Then
                    aaa.阵列单矩形槽(r("Asrs_Number"), r("Asrs_relative_Y_axis_deflection_angle"), r("Asrs_slot_width1") / 1000, r("Asrs_slot_bottom_height") / 1000, r("Asrs_slot_top_height") / 1000, r("Asrs_outer_diameter") / 1000, r("Asrs_roundedR1") / 1000, r("Asrs_roundedR2") / 1000)

                End If


                If r("V_shaped_hole") = 1 Then
                    aaa.阵列V形孔(r("V_shaped_hole_number"), r("V_shaped_hole_relative_Yaxis_deflection_angle"), r("V_shaped_hole_shoulder_width") / 1000,
                             r("V_shaped_hole_bottom_width") / 1000, r("V_shaped_hole_top_angle"), r("V_shaped_hole_top_height") / 1000,
                            r("V_shaped_hole_parallel_margin") / 1000, r("V_shaped_hole_Shoulder_fillet") / 1000)
                ElseIf r("V_shaped_hole") = 2 Then
                    aaa.阵列V形圆弧孔(r("V_shaped_hole_number"), r("V_shaped_hole_relative_Yaxis_deflection_angle"), r("V_shaped_hole_arc_eccentricity_Y") / 1000,
                                r("V_shaped_hole_arc_diameter") / 1000, r("V_shaped_hole_top_angle"), r("V_shaped_hole_side_angle"), r("V_shaped_hole_side_reference_Vslot_topheight") / 1000,
                                r("V_shaped_hole_side_reference_Vslot_width") / 1000, r("V_shaped_hole_parallel_margin") / 1000, r("V_shaped_hole_outside_side_Distance") / 1000,
                                r("V_shaped_hole_bottom_rounded_cornerR1") / 1000)
                End If


                If r("Eccentric_round_table") = 2 Then
                    aaa.偏心圆凸台(r("Ert2_diameter"), r("thickness"), r("Ert2_relative_X_axis_deflection_angle"), r("Ert2_Array_number"), r("Ert2_X_eccentricity"))
                End If


                If r("Eccentric_Small_round_bottom_slot") >= 1 Then
                    aaa.偏心阵列小圆底槽口(r("ESrbs1_Array_number"), r("ESrbs1_Relative_Y_axis_deflection_angle"), r("ESrbs1_angle"), r("ESrbs1_Offset_distance_X") / 1000,
                       r("ESrbs1_Offset_distance_Y") / 1000, r("ESrbs1_number"), r("ESrbs1_bottom_diameter") / 1000, r("ESrbs1_outer_diameter") / 1000, r("ESrbs1_Upper_body_height") / 1000, r("ESrbs1_top_width") / 1000, r("ESrbs1_Dimensions"))
                End If
                If r("Eccentric_Small_round_bottom_slot") >= 2 Then
                    aaa.偏心阵列小圆底槽口(r("ESrbs2_Array_number"), r("ESrbs2_Relative_Y_axis_deflection_angle"), r("ESrbs2_angle"), r("ESrbs2_Offset_distance_X") / 1000,
                       r("ESrbs2_Offset_distance_Y") / 1000, r("ESrbs2_number"), r("ESrbs2_bottom_diameter") / 1000, r("ESrbs2_outer_diameter") / 1000, r("ESrbs2_Upper_body_height") / 1000, r("ESrbs2_top_width") / 1000)
                End If


                '存入数据库
                If r("V_shaped_slots") = 1 Then
                    aaa.阵列V形槽(r("Vss_Number"), r("Vss_relative_Y_axis_deflection_angle"), r("Vss_slot_width") / 1000,
                              r("Vss_angle"), r("Vss_slot_top_height") / 1000, r("Vss_outer_diameter") / 1000)
                End If

                '添加标注


                aaa.save(r("Parts_drawing_address"))
                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings结束(r("Drawings_address"))

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub
            Public Sub half_ring_hole(Code$)

                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from half_ring_hole", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()

                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop


                'aaa.Round_table(r("ESrbs1_outer_diameter") / 1000, r("thickness") / 1000, aaa.index_String(r("ESrbs1_outer_diameter_Attach"), 1)， aaa.index_String(r("ESrbs1_outer_diameter_Attach"), 2) / 1000，
                '                                        aaa.index_String(r("ESrbs1_outer_diameter_Attach"), 3) / 1000， aaa.index_String(r("ESrbs1_outer_diameter_Attach"), 4), aaa.index_String(r("ESrbs1_outer_diameter_Attach"), 5), aaa.index_String(r("ESrbs1_outer_diameter_Attach"), 6),
                '                                        aaa.index_String(r("ESrbs1_outer_diameter_Attach"), 7), aaa.index_String(r("ESrbs1_outer_diameter_Attach"), 8))

                'For i = 1 To r("Arrayholes")
                '    aaa.deflection_array_of_circular_holes(r("holes" + i.ToString + "_Array_number"), r("holes" + i.ToString + "_number"), r("holes" + i.ToString + "_relative_Y_axis_deflection_angle"), r("holes" + i.ToString + "_angle"), r("holes" + i.ToString + "_center_distance") / 1000,
                '                                       r("holes" + i.ToString + "_diameter") / 1000, 0, r("holes" + i.ToString + "_deflection_distance_Y") / 1000)
                'Next i
                'If r("middle_hole") = 1 Then
                '    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter") / 1000, r("middle_hole_slot_width") / 1000, r("middle_hole_Left_high") / 1000, r("middle_hole_Right_high") / 1000, aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2) / 1000， aaa.index_String(r("middle_hole_slot_width_Attach"), 3) / 1000， aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                '                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2) / 1000， aaa.index_String(r("middle_hole_diameter_Attach"), 3) / 1000， aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                'End If
                'If r("middle_hole") = 2 Then
                '    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter") / 1000, r("middle_hole_slot_width") / 1000, r("middle_hole_Left_high") / 1000, r("middle_hole_Right_high") / 1000，
                '                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2) / 1000， aaa.index_String(r("middle_hole_slot_width_Attach"), 3) / 1000， aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                '                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2) / 1000， aaa.index_String(r("middle_hole_diameter_Attach"), 3) / 1000， aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                'End If
                'If r("Array_of_single_rectangular_slots") = 1 Then
                '    aaa.阵列单矩形槽(r("Asrs_Number"), r("Asrs_relative_Y_axis_deflection_angle"), r("Asrs_slot_width1") / 1000, r("Asrs_slot_bottom_height") / 1000, r("Asrs_slot_top_height") / 1000, r("Asrs_outer_diameter") / 1000, r("Asrs_roundedR1") / 1000, r("Asrs_roundedR2") / 1000)

                'End If
                'If r("Eccentric_Small_round_bottom_slot") >= 1 Then
                '    aaa.偏心阵列小圆底槽口(r("ESrbs1_Array_number"), r("ESrbs1_Relative_Y_axis_deflection_angle"), r("ESrbs1_angle"), r("ESrbs1_Offset_distance_X") / 1000,
                '       r("ESrbs1_Offset_distance_Y") / 1000, r("ESrbs1_number"), r("ESrbs1_bottom_diameter") / 1000, r("ESrbs1_outer_diameter") / 1000, r("ESrbs1_Upper_body_height") / 1000, r("ESrbs1_top_width") / 1000, r("ESrbs1_Dimensions"))
                'End If





                aaa.Round_table(r("Asrs_outer_diameter"), r("thickness"), Slot_outer_diameter_Gtol:="")
                For i = 1 To r("Arrayholes")
                    aaa.deflection_array_of_circular_holes(r("holes" + i.ToString + "_Array_number"), r("holes" + i.ToString + "_number"), r("holes" + i.ToString + "_relative_Y_axis_deflection_angle"), r("holes" + i.ToString + "_angle"), r("holes" + i.ToString + "_center_distance"),
                                                       r("holes" + i.ToString + "_diameter"), 0, r("holes" + i.ToString + "_deflection_distance_Y"))
                Next i
                'aaa.middle_hole2(0, 36 / 1000, 10 / 1000, 39.3 / 1000, 39.3 / 1000)
                If r("middle_hole") = 1 Then
                    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high"),
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If
                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 1)， aaa.index_String(r("middle_hole_slot_width_Attach"), 2)， aaa.index_String(r("middle_hole_slot_width_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_slot_width_Attach"), 4), aaa.index_String(r("middle_hole_slot_width_Attach"), 5)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 1)， aaa.index_String(r("middle_hole_diameter_Attach"), 2)， aaa.index_String(r("middle_hole_diameter_Attach"), 3)，
                                     aaa.index_String(r("middle_hole_diameter_Attach"), 4), aaa.index_String(r("middle_hole_diameter_Attach"), 5))
                End If




                aaa.阵列单矩形槽(r("Asrs_Number"), r("Asrs_relative_Y_axis_deflection_angle"), r("Asrs_slot_width1") / 1000, r("Asrs_slot_bottom_height") / 1000, r("Asrs_slot_top_height") / 1000, r("Asrs_outer_diameter") / 1000, r("Asrs_roundedR1") / 1000, r("Asrs_roundedR2") / 1000)
                aaa.偏心阵列小圆底槽口(r("ESrbs1_Array_number"), r("ESrbs1_Relative_Y_axis_deflection_angle"), r("ESrbs1_angle"), r("ESrbs1_Offset_distance_X") / 1000,
                       r("ESrbs1_Offset_distance_Y") / 1000, r("ESrbs1_number"), r("ESrbs1_bottom_diameter") / 1000, r("ESrbs1_outer_diameter") / 1000, r("ESrbs1_Upper_body_height") / 1000, r("ESrbs1_top_width") / 1000, r("ESrbs1_Dimensions"))
                'aaa.半环孔(0, 2, 104 / 1000, 64 / 1000, 3 / 1000, 0, -Sqrt(Pow(64 / 2, 2) - Pow(21 / 2, 2)) / 1000, 21 / 2 / 1000, -Sqrt(Pow(104 / 2, 2) - Pow(21 / 2, 2)) / 1000, 21 / 2 / 1000, Sqrt(Pow(64 / 2, 2) - Pow(21 / 2, 2)) / 1000, 21 / 2 / 1000, Sqrt(Pow(104 / 2, 2) - Pow(21 / 2, 2)) / 1000, 21 / 2 / 1000)

                If r("half_ring_hole") = 1 Then
                    aaa.半环孔(r("hrh_Relative_Y_axis_deflection_angle"), r("hrh_number"), r("hrh_outer_diameter") / 1000,
                            r("hrh_inner_diameter") / 1000, r("hrh_top_round_cornerR1") / 1000, r("hrh_bottom_round_cornerR2") / 1000, r("hrh_Hole_margin") / 1000)
                End If

                aaa.save(r("Parts_drawing_address"))
                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings结束(r("Drawings_address"))

                ''aaa.圆凸台(128 / 1000, 25 / 1000)

                'aaa.偏心阵列小圆底槽口(2, -9 - 18 - 18, 18, 0 / 1000, 0, 6, 4.1 / 1000, 128 / 1000, （128 - 120.4） / 2 / 1000, 1.5 / 1000)

                'aaa.阵列圆孔(2, 53 / 2 / 1000, 5.1 / 1000, 90)
                'aaa.中心槽孔2(0, 36 / 1000, 10 / 1000, 39.3 / 1000, 0 / 1000)
                'aaa.梯形孔1(0, 2, 104 / 1000, 64 / 1000, 3 / 1000, 0, -Sqrt(Pow(64 / 2, 2) - Pow(21 / 2, 2)) / 1000, 21 / 2 / 1000, -Sqrt(Pow(104 / 2, 2) - Pow(21 / 2, 2)) / 1000, 21 / 2 / 1000, Sqrt(Pow(64 / 2, 2) - Pow(21 / 2, 2)) / 1000, 21 / 2 / 1000, Sqrt(Pow(104 / 2, 2) - Pow(21 / 2, 2)) / 1000, 21 / 2 / 1000)
                'aaa.阵列单矩形槽(2, 90, 15 / 1000, (108.3 / 2 - 23.5) / 1000, 108.3 / 2 / 1000, 128 / 1000, 2 / 1000, 2 / 1000)
                'MsgBox("转子冲片DJ13.029.02.01-02绘制完成")

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub
            Public Sub Parallelogram_slot(Code$)
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from Parallelogram_slot", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()

                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop


                aaa.Round_table(169, 25)
                If r("array_hole") >= 1 Then
                    aaa.deflection_array_of_circular_holes(1, 2, 0, 180, 114 / 2, 10)
                End If
                If r("array_hole") >= 2 Then
                    aaa.deflection_array_of_circular_holes(1, 2, 90, 180, 52, 16)
                End If
                If r("array_hole") >= 3 Then
                    aaa.deflection_array_of_circular_holes(1, 2, 90, 180, (152 / 2 + 1), 8)
                End If
                aaa.middle_hole2(270, 48, 10, 53.3, 51.3)
                aaa.偏心阵列小圆底槽口(2, -9 - 18, 18, 0, 0, 4, 5.2 / 1000, 169 / 1000, （169 - 162） / 2 / 1000, 1.5 / 1000, 尺寸标注:=1)
                aaa.平行三口槽(2, 90, 152 / 2 / 1000, 1.5 / 1000, 16 / 1000, 24 / 1000, (152 / 2 - 4.5) / 1000, 3 / 1000, 46 / 1000, 4 / 1000, 70 / 2 / 1000, 100 / 1000, (68 + 4 * 2) / 1000, (152 / 2 - 4.5) / 1000, 4 / 1000, (4.5 - 1.5) / 1000, 169 / 1000)

                aaa.save(r("Parts_drawing_address"))
                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings结束(r("Drawings_address"))

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub
            Public Sub bend_slot(Code$)
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from bend_slot", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()
                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop
                aaa.Round_table(188.4, 25)
                If r("array_hole") >= 1 Then
                    aaa.deflection_array_of_circular_holes(1, 2, 0, 180, 130 / 2, 12)
                End If
                If r("array_hole") >= 2 Then
                    aaa.deflection_array_of_circular_holes(1, 2, 90, 180, 55, 8)
                End If
                aaa.middle_hole2(270, 50, 12, 55.3, 53.3)
                aaa.偏心阵列小圆底槽口(2, -9 - 18, 18, 0, 0, 4, 6.2 / 1000, 188.4 / 1000, （188.4 - 180） / 2 / 1000, 1.5 / 1000, 尺寸标注:=1)
                aaa.折弯三口槽(2, 270, 30 / 1000, 36 / 1000, 20 / 1000, 80 / 2 / 1000, 54 / 1000, 169 / 2 / 1000, 4 / 1000, 4.5 / 1000, 3 / 1000, 50 / 1000, 114 / 1000, 108 / 1000, 20 / 1000, 84 / 1000, 169 / 2 / 1000, 78 / 1000, 188.4 / 1000, 4 / 1000, 4 / 1000, 4 / 1000)


                aaa.save(r("Parts_drawing_address"))
                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings结束(r("Drawings_address"))

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub
            Public Sub double_rectangle_slot(Code$)
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from double_rectangle_slot", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()
                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop

                aaa.偏心圆凸台(r("Slot1_outer_diameter"), r("thickness"), r("relative_X_axis_deflection_angle"), r("Array_number"), r("Eccentricity")， r("drs1_outer_diameter"))


                For i = 1 To r("array_hole")
                    aaa.deflection_array_of_circular_holes(r("array" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_relative_Y_axis_deflection_angle"), r("array_hole" + i.ToString + "_angle"), r("array_hole" + i.ToString + "_center_distance"), r("array_hole" + i.ToString + "_diameter"))
                Next i

                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"),
                              r("middle_hole_Left_high"), r("middle_hole_Right_high"))
                End If


                For i = 1 To r("Slot")
                    aaa.偏心阵列小圆底槽口(r("Slot" + i.ToString + "_Array_number"), r("Slot" + i.ToString + "_Relative_Y_axis_deflection_angle"), r("Slot" + i.ToString + "_angle"), 0,
                     r("Eccentricity") / 1000, r("Slot" + i.ToString + "_number"), r("Slot" + i.ToString + "_bottom_diameter") / 1000, r("Slot" + i.ToString + "_outer_diameter") / 1000, r("Slot" + i.ToString + "_Upper_body_height") / 1000, r("Slot" + i.ToString + "_top_width") / 1000, i)

                Next

                For i = 1 To r("double_rectangle_slot")
                    aaa.双矩形槽(r("drs" + i.ToString + "_Array_number"), r("drs" + i.ToString + "_angle"), r("drs" + i.ToString + "_two_slot_top_width") / 1000, r("drs" + i.ToString + "_two_slot_waist_width") / 1000,
                         r("drs" + i.ToString + "_waist_top_height") / 1000, r("drs" + i.ToString + "_slot_waist_length") / 1000, r("drs" + i.ToString + "_bottom_Round_cornerR1") / 1000, r("drs" + i.ToString + "_top_round_corner_R2") / 1000， r("drs" + i.ToString + "_outer_diameter") / 1000,
                         r("drs" + i.ToString + "_floor_slot"), r("drs" + i.ToString + "_waist_Less") / 1000）

                Next


                For i = 1 To r("Square_hole")
                    aaa.Square_hole(r("Square_hole" + i.ToString + "_Centerdistance_or_verticalsidelength"), r("Square_hole" + i.ToString + "_diameter"), r("Square_hole" + i.ToString + "_horizontal_side_length"), 1, i)
                    'MsgBox(666)
                Next i


                If r("Trapezoidal_hole") = 1 Then
                    aaa.Trapezoidal_hole(r("Th_Type"), r("Th_relative_Y_axis_deflection_angle"), r("Th_slot_number"),
                                        r("Th_outer_diameter") / 1000, r("Th_inner_diameter") / 1000, r("Th_distance_between_slots") / 1000,
                                      r("Th_round_R1") / 1000, r("Th_round_R2") / 1000, r("Th_top_width") / 1000, r("Th_bottom_width") / 1000,
                                      r("Th_waist_angle"))
                    'aaa.梯形孔("平行", 0, 8, 102 / 1000, 77 / 1000, 8 / 1000, 3 / 1000, 0, 0, 0, 0)
                End If



                For i = 1 To r("Arc_rectangular_table")
                    aaa.圆弧矩形凸台(r("Art" + i.ToString + "_Diameter") / 1000, r("Art" + i.ToString + "_Height") / 1000, r("Art" + i.ToString + "_Width") / 1000, r("Art" + i.ToString + "_Chamfering1") / 1000, r("Art" + i.ToString + "_Chamfering2") / 1000, r("Art" + i.ToString + "_Relative_Yaxis_Deflection_Angle"), r("Art" + i.ToString + "_Array Number"), r("Art" + i.ToString + "_Thickness") / 1000, r("Art" + i.ToString + "_Dimensions"))

                Next i




                aaa.save(r("Parts_drawing_address"))




                aaa.OldDrawings开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings结束(r("Drawings_address"))

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub
            Public Sub single_rectangular_slot(Code$, Optional database$ = "rotor_lamination", Optional table$ = "single_rectangular_slot", Optional material$ = "合金钢")
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + database + ";pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from " + table, mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()
                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop

                'aaa.偏心圆凸台(r("Slot1_outer_diameter") / 1000, r("thickness") / 1000, r("relative_X_axis_deflection_angle"), r("Array_number"), r("Eccentricity") / 1000， r("drs1_outer_diameter") / 1000)


                aaa.偏心圆凸台(r("Slot1_outer_diameter"), r("thickness"))
                'aaa.单矩形槽(327 / 1000, 45, 184, 107,
                '         135.5, r("srs_top_Round_cornerR1"), r("srs_angle_type"), r("srs_chamfer or rounded"), r("srs_outer_diameter"))

                aaa.单矩形槽(r("srs_Array_number"), r("srs_angle"), r("srs_two_slot_top_width"), r("srs_two_slot_waist_width"),
                         r("srs_waist_top_height"), r("srs_top_Round_cornerR1"), r("srs_angle_type"), r("srs_chamfer or rounded"), r("srs_outer_diameter"))

                'MsgBox(666)
                'aaa.单矩形槽(4, 45, 300, 190, 480 / 2, 1, "0", 0, 290 * 2)
                aaa.偏心圆凸台(r("table2_outer_diameter"), r("thickness"), 尺寸标注:=0)
                'MsgBox(666)

                For i = 1 To r("array_hole")
                    aaa.deflection_array_of_circular_holes(r("array" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_relative_Y_axis_deflection_angle"), r("array_hole" + i.ToString + "_angle"), r("array_hole" + i.ToString + "_center_distance"), r("array_hole" + i.ToString + "_diameter"))
                Next i
                For i = 1 To r("Square_hole")
                    If i = 1 Then
                        aaa.Square_hole(r("Square_hole" + i.ToString + "_Centerdistance_or_verticalsidelength"), r("Square_hole" + i.ToString + "_diameter"), r("Square_hole" + i.ToString + "_horizontal_side_length"), 1, 尺寸标注:=1, Array_number:=4)
                        'MsgBox(666)
                    End If
                    If i = 2 Then
                        aaa.Square_hole(r("Square_hole" + i.ToString + "_Centerdistance_or_verticalsidelength"), r("Square_hole" + i.ToString + "_diameter"), r("Square_hole" + i.ToString + "_horizontal_side_length"), 1, 尺寸标注:=1, Array_number:=4)
                        'MsgBox(666)
                    End If

                Next i


                If r("Damping_slot_type") = 1 Then
                    For i = 1 To r("Slot")
                        aaa.偏心阵列小圆底槽口(r("Slot" + i.ToString + "_Array_number"), r("Slot" + i.ToString + "_Relative_Y_axis_deflection_angle"), r("Slot" + i.ToString + "_angle"), 0,
                     r("Eccentricity") / 1000, r("Slot" + i.ToString + "_number"), r("Slot" + i.ToString + "_bottom_diameter") / 1000, r("Slot" + i.ToString + "_outer_diameter") / 1000, r("Slot" + i.ToString + "_Upper_body_height") / 1000, r("Slot" + i.ToString + "_top_width") / 1000, i)

                    Next
                ElseIf r("Damping_slot_type") = 2 Then
                    For i = 1 To r("Slot")
                        aaa.偏心阵列小圆底槽口_阻尼槽口高(r("Slot" + i.ToString + "_Array_number"), r("Slot" + i.ToString + "_Relative_Y_axis_deflection_angle"), r("Slot" + i.ToString + "_angle"), 0,
                     r("Eccentricity") / 1000, r("Slot" + i.ToString + "_number"), r("Slot" + i.ToString + "_bottom_diameter") / 1000, r("Slot" + i.ToString + "_outer_diameter") / 1000, r("Slot" + i.ToString + "_Upper_body_height") / 1000, r("Slot" + i.ToString + "_top_width") / 1000, i)

                    Next
                End If

                'aaa.偏心圆凸台(r("Slot1_outer_diameter"), r("thickness"), r("relative_X_axis_deflection_angle"), r("Array_number"), r("Eccentricity")， r("drs1_outer_diameter"))

                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"),
                              r("middle_hole_Left_high"), r("middle_hole_Right_high"))
                End If
                'MsgBox(111)

                aaa.属性设置(material, r("name"), r("code"), r("material"))

                aaa.save(r("Parts_drawing_address") + r("code") + ".sldprt")




                aaa.OldDrawings开始(r("Parts_drawing_address") + r("code") + ".sldprt", 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings结束(r("Drawings_address") + r("code") + ".slddrw")

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub

            Public Sub single_rectangular_slot_new(Code$)
                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=rotor_lamination;pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询
                mysqlcom = New MySqlCommand("select * from single_rectangular_slot", mysqlcon)
                r = mysqlcom.ExecuteReader()
                r.Read()
                Dim aaa As New zhangweibin.Module_huangzilong
                aaa.Part_initialization()
                'MsgBox(aaa.取号("8.LY.630."))
                Do Until r("Code") = Code$
                    r.Read()
                Loop

                'aaa.偏心圆凸台(r("Slot1_outer_diameter") / 1000, r("thickness") / 1000, r("relative_X_axis_deflection_angle"), r("Array_number"), r("Eccentricity") / 1000， r("drs1_outer_diameter") / 1000)


                aaa.偏心圆凸台(r("Slot1_outer_diameter"), r("thickness"))

                'If r("") = 1 Then

                'End If
                aaa.单矩形槽(r("srs_Array_number"), r("srs_angle"), r("srs_two_slot_top_width"), r("srs_two_slot_waist_width"),
                         r("srs_waist_top_height"), r("srs_top_Round_cornerR1"), r("srs_angle_type"), r("srs_chamfer or rounded"), r("srs_outer_diameter"))
                'MsgBox(666)
                'aaa.单矩形槽(4, 45, 300, 190, 480 / 2, 1, "0", 0, 290 * 2)
                aaa.偏心圆凸台(r("table2_outer_diameter"), r("thickness"), 尺寸标注:=0)

                For i = 1 To r("array_hole")
                    aaa.deflection_array_of_circular_holes(r("array" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_relative_Y_axis_deflection_angle"), r("array_hole" + i.ToString + "_angle"), r("array_hole" + i.ToString + "_center_distance"), r("array_hole" + i.ToString + "_diameter"))
                Next i
                For i = 1 To r("Square_hole")
                    If i = 1 Then
                        aaa.Square_hole(r("Square_hole" + i.ToString + "_Centerdistance_or_verticalsidelength"), r("Square_hole" + i.ToString + "_diameter"), r("Square_hole" + i.ToString + "_horizontal_side_length"), 1, 尺寸标注:=1, Array_number:=4)
                        'MsgBox(666)
                    End If
                    If i = 2 Then
                        aaa.Square_hole(r("Square_hole" + i.ToString + "_Centerdistance_or_verticalsidelength"), r("Square_hole" + i.ToString + "_diameter"), r("Square_hole" + i.ToString + "_horizontal_side_length"), 1, 尺寸标注:=1, Array_number:=4)
                        'MsgBox(666)
                    End If

                Next i

                For i = 1 To r("Slot")
                    aaa.偏心阵列小圆底槽口_阻尼槽口高(r("Slot" + i.ToString + "_Array_number"), r("Slot" + i.ToString + "_Relative_Y_axis_deflection_angle"), r("Slot" + i.ToString + "_angle"), 0,
                     r("Eccentricity") / 1000, r("Slot" + i.ToString + "_number"), r("Slot" + i.ToString + "_bottom_diameter") / 1000, r("Slot" + i.ToString + "_outer_diameter") / 1000, r("Slot" + i.ToString + "_Upper_body_height") / 1000, r("Slot" + i.ToString + "_top_width") / 1000, i)

                Next


                'aaa.偏心圆凸台(r("Slot1_outer_diameter"), r("thickness"), r("relative_X_axis_deflection_angle"), r("Array_number"), r("Eccentricity")， r("drs1_outer_diameter"))

                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"),
                              r("middle_hole_Left_high"), r("middle_hole_Right_high"))
                End If
                'MsgBox(111)



                aaa.save(r("Parts_drawing_address") + r("code") + ".sldprt")




                aaa.OldDrawings开始(r("Parts_drawing_address") + r("code") + ".sldprt", 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                aaa.OldDrawings结束(r("Drawings_address") + r("code") + ".slddrw")

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()
            End Sub


            'Dim 功能模块 As New AAA
            '功能模块.圆凸台(290 * 2 / 1000, 25 / 1000)
            '功能模块.阵列圆孔(4, 504 / 2 / 1000, 20 / 1000, 0)
            '功能模块.四方孔(Sqrt(Pow(62, 2) + Pow(504 / 2, 2)) / 1000, 20 / 1000, 504 / 1000)
            '功能模块.四方孔(Sqrt(Pow(62, 2) + Pow(504 / 2, 2)) / 1000, 20 / 1000, 62 * 2 / 1000)
            '功能模块.偏心阵列小圆底槽口(4, -21, 6, 0 / 1000, 0, 8, 10.2 / 1000, 290 * 2 / 1000, (290 - 282.5) / 1000, 2.5 / 1000)
            '功能模块.单矩形槽(4, 45, 300 / 1000, 190 / 1000, 480 / 2 / 1000, 1 / 1000, "0", 0, 290 * 2 / 1000)
            '功能模块.圆凸台(332 / 1000, 25 / 1000)
            '功能模块.中心槽孔2(180, 210 / 1000, 32 / 1000, 217 / 1000, 0 / 1000)
            '功能模块.阵列圆孔(4, 332 / 2 / 1000, 4 / 1000, 45)
            '功能模块.阵列圆孔(4, Sqrt(Pow(190 / 2, 2) + Pow(480 / 2 - 45, 2)) / 1000, 4 / 1000, Atan2(480 / 2 - 45, 190 / 2) * 180 / PI)
            '功能模块.阵列圆孔(4, Sqrt(Pow(190 / 2, 2) + Pow(480 / 2 - 40, 2)) / 1000, 4 / 1000, Atan2(190 / 2, 480 / 2 - 40) * 180 / PI)
            '功能模块.阵列矩形孔(4, (480 / 2 - 90 - 3 / 2) / 1000, 190 / 2 / 1000, (480 / 2 - 90) / 1000, (190 / 2 + 3 / 2) / 1000, 0)
            '功能模块.阵列矩形孔(4, 190 / 2 / 1000, (480 / 2 - 90 - 3 / 2) / 1000, (190 / 2 + 3 / 2) / 1000, (480 / 2 - 90) / 1000, 0)
            'MsgBox("转子冲片DJ50.001.05.06.01-01绘制完成")

        End Class

        Public Class EQ_214_2431

            Public Class Parts_drawing
                Public Sub rotor_lamination()
                    Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
                    Dim mysqlcom As MySqlCommand
                    Dim r As MySqlDataReader
                    '//打开数据库连接
                    mysqlcon.Open()
                    '//sql查询
                    mysqlcom = New MySqlCommand("select * from rotor_lamination", mysqlcon)
                    r = mysqlcom.ExecuteReader()
                    r.Read()
                    Dim aaa As New Module_huangzilong
                    aaa.Part_initialization()
                    'MsgBox(aaa.取号("8.LY.630."))
                    Do Until r("id") = 1
                        r.Read()
                    Loop

                    aaa.初始设置_new（1）
                    aaa.设置属性_new(r("name"), r("Code"), r("material"))

                    aaa.偏心圆凸台_new(r("Slot1_outer_diameter"), r("thickness"), r("relative_X_axis_deflection_angle"), r("Array_number"), r("Eccentricity")， r("drs1_outer_diameter"))


                    For i = 1 To r("array_hole")
                        aaa.deflection_array_of_circular_holes_new(r("array" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_relative_Y_axis_deflection_angle"),
                                                           r("array_hole" + i.ToString + "_angle"), r("array_hole" + i.ToString + "_center_distance"), r("array_hole" + i.ToString + "_diameter"), 图纸比例值:=r("Proportional_value"))
                    Next i
                    MsgBox(0)
                    If r("middle_hole") = 2 Then
                        aaa.middle_hole2_new(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"),
                              r("middle_hole_Left_high"), r("middle_hole_Right_high"))
                    End If


                    For i = 1 To r("Slot")
                        aaa.偏心阵列小圆底槽口_new(r("Slot" + i.ToString + "_Array_number"), r("Slot" + i.ToString + "_Relative_Y_axis_deflection_angle"), r("Slot" + i.ToString + "_angle"), 0,
                     r("Eccentricity") / 1000, r("Slot" + i.ToString + "_number"), r("Slot" + i.ToString + "_bottom_diameter") / 1000, r("Slot" + i.ToString + "_outer_diameter") / 1000, r("Slot" + i.ToString + "_Upper_body_height") / 1000, r("Slot" + i.ToString + "_top_width") / 1000, i)

                    Next

                    For i = 1 To r("double_rectangle_slot")
                        aaa.双矩形槽_new(r("drs" + i.ToString + "_Array_number"), r("drs" + i.ToString + "_angle"), r("drs" + i.ToString + "_two_slot_top_width") / 1000, r("drs" + i.ToString + "_two_slot_waist_width") / 1000,
                         r("drs" + i.ToString + "_waist_top_height") / 1000, r("drs" + i.ToString + "_slot_waist_length") / 1000, r("drs" + i.ToString + "_bottom_Round_cornerR1") / 1000, r("drs" + i.ToString + "_top_round_corner_R2") / 1000， r("drs" + i.ToString + "_outer_diameter") / 1000,
                         r("drs" + i.ToString + "_floor_slot"), r("drs" + i.ToString + "_waist_Less") / 1000）

                    Next


                    For i = 1 To r("Square_hole")
                        aaa.Square_hole_new(r("Square_hole" + i.ToString + "_Centerdistance_or_verticalsidelength"), r("Square_hole" + i.ToString + "_diameter"), r("Square_hole" + i.ToString + "_horizontal_side_length"), 1, i)
                        'MsgBox(666)
                    Next i


                    If r("Trapezoidal_hole") = 1 Then
                        aaa.Trapezoidal_hole_new(r("Th_Type"), r("Th_relative_Y_axis_deflection_angle"), r("Th_slot_number"),
                                        r("Th_outer_diameter") / 1000, r("Th_inner_diameter") / 1000, r("Th_distance_between_slots") / 1000,
                                      r("Th_round_R1") / 1000, r("Th_round_R2") / 1000, r("Th_top_width") / 1000, r("Th_bottom_width") / 1000,
                                      r("Th_waist_angle"))
                        'aaa.梯形孔("平行", 0, 8, 102 / 1000, 77 / 1000, 8 / 1000, 3 / 1000, 0, 0, 0, 0)
                    End If



                    For i = 1 To r("Arc_rectangular_table")
                        aaa.圆弧矩形凸台_new(r("Art" + i.ToString + "_Diameter") / 1000, r("Art" + i.ToString + "_Height") / 1000, r("Art" + i.ToString + "_Width") / 1000, r("Art" + i.ToString + "_Chamfering1") / 1000, r("Art" + i.ToString + "_Chamfering2") / 1000, r("Art" + i.ToString + "_Relative_Yaxis_Deflection_Angle"), r("Art" + i.ToString + "_Array Number"), r("Art" + i.ToString + "_Thickness") / 1000, r("Art" + i.ToString + "_Dimensions"))

                    Next i




                    aaa.End_new(r("Parts_drawing_address"))




                    aaa.A3模板(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                    aaa.over(r("Drawings_address"))

                    r.Close()
                    mysqlcom.Dispose()
                    mysqlcon.Close()
                    mysqlcon.Dispose()
                End Sub
                Public Sub damping_plate()
                    Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
                    Dim mysqlcom As MySqlCommand
                    Dim r As MySqlDataReader
                    '//打开数据库连接
                    mysqlcon.Open()
                    '//sql查询
                    mysqlcom = New MySqlCommand("select * from damping_plate", mysqlcon)
                    r = mysqlcom.ExecuteReader()
                    r.Read()
                    Dim aaa As New Module_huangzilong
                    aaa.Part_initialization()
                    'MsgBox(aaa.取号("8.LY.630."))
                    Do Until r("id") = 1
                        r.Read()
                    Loop

                    aaa.初始设置_new（1）

                    aaa.偏心圆凸台_new(r("Slot1_outer_diameter"), r("thickness"), r("relative_X_axis_deflection_angle"), r("Array_number"), r("Eccentricity")， r("drs1_outer_diameter"))


                    For i = 1 To r("array_hole")
                        aaa.deflection_array_of_circular_holes_new(r("array" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_relative_Y_axis_deflection_angle"), r("array_hole" + i.ToString + "_angle"), r("array_hole" + i.ToString + "_center_distance"), r("array_hole" + i.ToString + "_diameter"), 图纸比例值:=r("Proportional_value"))
                    Next i

                    If r("middle_hole") = 2 Then
                        aaa.middle_hole2_new(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"),
                              r("middle_hole_Left_high"), r("middle_hole_Right_high"))
                    End If


                    For i = 1 To r("Slot")
                        aaa.偏心阵列小圆底槽口_new(r("Slot" + i.ToString + "_Array_number"), r("Slot" + i.ToString + "_Relative_Y_axis_deflection_angle"), r("Slot" + i.ToString + "_angle"), 0,
                     r("Eccentricity") / 1000, r("Slot" + i.ToString + "_number"), r("Slot" + i.ToString + "_bottom_diameter") / 1000, r("Slot" + i.ToString + "_outer_diameter") / 1000, r("Slot" + i.ToString + "_Upper_body_height") / 1000, r("Slot" + i.ToString + "_top_width") / 1000, i)

                    Next

                    For i = 1 To r("double_rectangle_slot")
                        aaa.双矩形槽_new(r("drs" + i.ToString + "_Array_number"), r("drs" + i.ToString + "_angle"), r("drs" + i.ToString + "_two_slot_top_width") / 1000, r("drs" + i.ToString + "_two_slot_waist_width") / 1000,
                         r("drs" + i.ToString + "_waist_top_height") / 1000, r("drs" + i.ToString + "_slot_waist_length") / 1000, r("drs" + i.ToString + "_bottom_Round_cornerR1") / 1000, r("drs" + i.ToString + "_top_round_corner_R2") / 1000， r("drs" + i.ToString + "_outer_diameter") / 1000,
                         r("drs" + i.ToString + "_floor_slot"), r("drs" + i.ToString + "_waist_Less") / 1000）

                    Next


                    For i = 1 To r("Square_hole")
                        aaa.Square_hole_new(r("Square_hole" + i.ToString + "_Centerdistance_or_verticalsidelength"), r("Square_hole" + i.ToString + "_diameter"), r("Square_hole" + i.ToString + "_horizontal_side_length"), 1, i)
                        'MsgBox(666)
                    Next i


                    If r("Trapezoidal_hole") = 1 Then
                        aaa.Trapezoidal_hole_new(r("Th_Type"), r("Th_relative_Y_axis_deflection_angle"), r("Th_slot_number"),
                                        r("Th_outer_diameter") / 1000, r("Th_inner_diameter") / 1000, r("Th_distance_between_slots") / 1000,
                                      r("Th_round_R1") / 1000, r("Th_round_R2") / 1000, r("Th_top_width") / 1000, r("Th_bottom_width") / 1000,
                                      r("Th_waist_angle"))
                        'aaa.梯形孔("平行", 0, 8, 102 / 1000, 77 / 1000, 8 / 1000, 3 / 1000, 0, 0, 0, 0)
                    End If



                    For i = 1 To r("Arc_rectangular_table")
                        aaa.圆弧矩形凸台_new(r("Art" + i.ToString + "_Diameter") / 1000, r("Art" + i.ToString + "_Height") / 1000, r("Art" + i.ToString + "_Width") / 1000, r("Art" + i.ToString + "_Chamfering1") / 1000, r("Art" + i.ToString + "_Chamfering2") / 1000, r("Art" + i.ToString + "_Relative_Yaxis_Deflection_Angle"), r("Art" + i.ToString + "_Array Number"), r("Art" + i.ToString + "_Thickness") / 1000, r("Art" + i.ToString + "_Dimensions"))
                        'aaa.圆弧矩形凸台(r("") / 1000, r("") / 1000, r("") / 1000, r("") / 1000, r("") / 1000, r(""), r(""), r("") / 1000, r(""))
                        'aaa.圆弧矩形凸台(77 / 1000, 69 / 2 / 1000, 8 / 1000, 1.5 / 1000, 0, 180, 1, 25 / 1000)
                        'aaa.圆弧矩形凸台(77 / 1000, 69 / 2 / 1000, 8 / 1000, 0, 0, 0, 1, 25 / 1000, 1)
                    Next i




                    'aaa.End(r("Parts_drawing_address"))

                    aaa.End_new(r("Parts_drawing_address"), "铜")


                    'Dim aaa As New Basic_module.Bm_huangzilong.Drawings
                    aaa.A3模板(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                    aaa.over(r("Drawings_address"))

                    r.Close()
                    mysqlcom.Dispose()
                    mysqlcon.Close()
                    mysqlcon.Dispose()
                End Sub
                Public Sub connecting_shaft_piece()
                    Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
                    Dim mysqlcom As MySqlCommand
                    Dim r As MySqlDataReader
                    '//打开数据库连接
                    mysqlcon.Open()
                    '//sql查询
                    mysqlcom = New MySqlCommand("select * from connecting_shaft_piece", mysqlcon)
                    r = mysqlcom.ExecuteReader()
                    r.Read()
                    Dim aaa As New Module_huangzilong
                    aaa.Part_initialization()
                    'MsgBox(aaa.取号("8.LY.630."))
                    Do Until r("id") = 1
                        r.Read()
                    Loop

                    aaa.初始设置_new（1）
                    aaa.Round_table_new(r("outer_diameter"), r("thickness"), 图纸比例值:=r("Proportional_value"))
                    'aaa.偏心圆凸台(r("outer_diameter"), r("thickness"))



                    For i = 1 To r("array_hole")
                        aaa.deflection_array_of_circular_holes_new(r("array" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_Number"), r("array_hole" + i.ToString + "_relative_Y_axis_deflection_angle"),
                                                           r("array_hole" + i.ToString + "_angle"), r("array_hole" + i.ToString + "_center_distance"), r("array_hole" + i.ToString + "_diameter"), 图纸比例值:=r("Proportional_value"))
                    Next i


                    aaa.End_new(r("Parts_drawing_address"))



                    'Dim aaa As New Basic_module.Bm_huangzilong.Drawings
                    aaa.A3模板(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"))
                    aaa.over(r("Drawings_address"))

                    r.Close()
                    mysqlcom.Dispose()
                    mysqlcon.Close()
                    mysqlcon.Dispose()
                End Sub
                Public Sub Exciter_rotor_pressing_ring()
                    Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=eq_214_2431;pooling=false")
                    Dim mysqlcom As MySqlCommand
                    Dim r As MySqlDataReader
                    '//打开数据库连接
                    mysqlcon.Open()
                    '//sql查询
                    mysqlcom = New MySqlCommand("select * from Exciter_rotor_pressing_ring", mysqlcon)
                    r = mysqlcom.ExecuteReader()
                    r.Read()
                    Dim aaa As New Module_huangzilong
                    aaa.Part_initialization()
                    'MsgBox(aaa.取号("8.LY.630."))
                    Do Until r("id") = 1
                        r.Read()
                    Loop

                    aaa.初始设置_new（1）
                    aaa.Round_table_new(r("outer_diameter"), r("thickness"), 图纸比例值:=r("Proportional_value"))
                    If r("middle_hole") = 2 Then
                        aaa.middle_hole2_new(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"),
                              r("middle_hole_Left_high"), r("middle_hole_Right_high"), 图纸比例值:=r("Proportional_value"))
                    End If
                    aaa.End_new(r("Parts_drawing_address"))
                    aaa.Exciter_rotor_pressing_ring_开始(r("Parts_drawing_address"), 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code")， aaa.index_String_new(r("skills_requirement"), 1), aaa.index_String_new(r("skills_requirement"), 2), aaa.index_String_new(r("skills_requirement"), 3), aaa.index_String_new(r("skills_requirement"), 4), aaa.index_String_new(r("skills_requirement"), 5), aaa.index_String_new(r("skills_requirement"), 6))

                    aaa.over(r("Drawings_address"))
                    r.Close()
                    mysqlcom.Dispose()
                    mysqlcon.Close()
                    mysqlcon.Dispose()




                End Sub
                Public Sub support_block_screw()
                    Dim aaa As New Module_huangzilong
                    aaa.Part_initialization()
                    aaa.support_block_screw()

                End Sub
                Public Sub Support_block_2004()
                    Dim aaa As New Module_huangzilong
                    aaa.Part_initialization()
                    aaa.Support_block_2004()

                End Sub
                Public Sub Support_block_2005()
                    Dim aaa As New Module_huangzilong
                    aaa.Part_initialization()
                    'aaa.线圈模块(100， 0.01， 0.01)
                    'aaa.线圈阵列(50， 0.01, 0.01， 0.38， 0.11)
                    aaa.Support_block_2005()
                End Sub
                Public Sub Support_block_assembly()

                    Dim aaa As New Module_huangzilong
                    aaa.Assembly_initialization()
                    aaa.Support_block_assembly()

                    '

                End Sub
                Public Sub fan_parts_series_one(code$, 配置$) '风扇
                    Dim aaa As New Module_huangzilong

                    aaa.Part_initialization()
                    aaa.fan_parts_series_one(code$, 配置$)
                End Sub






                Public Sub Rotor_core()
                    Dim aaa As New Module_huangzilong
                    aaa.Assembly_initialization()
                    aaa.Rotor_core()
                End Sub



                Public Sub 线圈()
                    Dim aaa As New Module_huangzilong
                    aaa.Part_initialization()
                    'aaa.线圈模块(20， 0.012， 0.01)
                    aaa.线圈(30， 0.012, 0.01， 0.1， 0.1)
                    aaa.End_new("E:\works\solidworks高阶绘图\线圈.sldprt")
                    'aaa.线圈阵列(50， 0.01, 0.01， 0.38， 0.11)
                End Sub
                Public Sub 仿真分析()

                    'MsgBox(0.0897 * 0.1001 + 0.0832 * 0.016 + 0.0797 * 0.069 - 0.0564 * 0.0137 + 0.05 * 0.0681 + 0.047 * 0.0496 + 0.0406 * 0.0834 + 0.0377 * 0.0366 - 0.0359 * 0.0005 - 0.0347 * 0.0397)

                    Dim aaa As New Module_huangzilong
                    aaa.simulation_initialization("E:\works\generator_parts_library\ly25_026\8.LY.200.001.SLDPRT", "静应力分析", "合金钢")
                    aaa.轴_扭矩力()
                    aaa.生成网格运行算例("E:\works\仿真分析", "应力报表", "E:\works\仿真分析", "图片")


                    'aaa.simulation_initialization("E:\works\generator_parts_library\ly25_026\8.LY.123.001.SLDPRT", "频率", "C355.0-T61 永久成型铸件 (SS)")
                    ''aaa.轴_扭矩力()
                    'MsgBox(999)
                    'aaa.生成网格运行算例("E:\works\仿真分析", "应力报表", "E:\works\仿真分析", "图片")




                End Sub
                Public Sub 轴_模态响应()
                    Dim aaa As New Module_huangzilong
                    aaa.轴_模态响应()


                End Sub
                Public Sub 转子冲片热力学分析()
                    Dim aaa As New Module_huangzilong
                    aaa.转子冲片热力学分析()
                End Sub
                Public Sub ADDPro(dz$, name$, Code$, material$)
                    Dim aaa As New Module_huangzilong
                    'aaa.ADDPro()
                    'Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
                    'swapp.OpenDoc7(dz)
                    'Dim cusproper As SldWorks.CustomPropertyManager
                    'cusproper = part.Extension.CustomPropertyManager("")
                    'cusproper.Set2("名称", name)
                    'cusproper.Set2("代号", Code)
                    'cusproper.Set2("材料", material)
                    'part.EditRebuild3()
                End Sub

                '


            End Class





        End Class

        Public Class fan
            Public Sub 外风扇_8LY_435_001(Code$) '风扇

                Dim aaa As New Module_huangzilong
                aaa.Part_initialization()
                aaa.外风扇_8LY_435_001(Code$, "配置1")

            End Sub

            Public Sub fan_parts_series_one(code$, 配置$) '风扇
                Dim aaa As New Module_huangzilong
                aaa.Part_initialization()
                aaa.fan_parts_series_one(code$, 配置$)
            End Sub
        End Class

        Public Class Damping_rod
            Public Sub Damping_rod(code$)
                Dim aaa As New Module_huangzilong
                aaa.Part_initialization()


                aaa.Damping_rod(code$)

            End Sub
        End Class
        Public Class Y2_450 '绘制转子冲片
            Public Sub 转子冲片(code$)
                Dim aaa As New Module_huangzilong


                aaa.转子冲片(code$)


            End Sub
            Public Sub 甩水环(code$)
                Dim aaa As New Module_huangzilong


                aaa.甩水环(code$)

            End Sub
            Public Sub 平衡块(code$)
                Dim aaa As New Module_huangzilong


                aaa.平衡块(code$)

            End Sub
            Public Sub 铸铝转子(code$)
                Dim aaa As New Module_huangzilong


                aaa.铸铝转子(code$)

            End Sub
            Public Sub 键(code$)
                Dim aaa As New Module_huangzilong


                aaa.键(code$)

            End Sub
            Public Sub 盖板(code$)
                Dim aaa As New Module_huangzilong


                aaa.盖板(code$)

            End Sub
            Public Sub 定子压圈(code$)
                Dim aaa As New Module_huangzilong


                aaa.定子压圈(code$)

            End Sub
            Public Sub 挡风圈(code$)
                Dim aaa As New Module_huangzilong


                aaa.挡风圈(code$)

            End Sub
            Public Sub 挡风板（code$)
                Dim aaa As New Module_huangzilong


                aaa.挡风板(code$)

            End Sub
            Public Sub 定子冲片（code$)
                Dim aaa As New Module_huangzilong


                aaa.定子冲片(code$)

            End Sub
            Public Sub 定子端板（code$)
                Dim aaa As New Module_huangzilong


                aaa.定子端板(code$)

            End Sub
            Public Sub 甩油盘（code$)
                Dim aaa As New Module_huangzilong


                aaa.甩油盘(code$)

            End Sub
            Public Sub 扣片（code$)
                Dim aaa As New Module_huangzilong


                aaa.扣片(code$)

            End Sub
            Public Sub 槽楔（code$)
                Dim aaa As New Module_huangzilong


                aaa.槽楔(code$)

            End Sub

            Public Sub 衬套(code$)
                Dim aaa As New Module_huangzilong

                aaa.衬套(code$)

            End Sub
            Public Sub 风罩圈(code$)
                Dim aaa As New Module_huangzilong

                aaa.风罩圈(code$)

            End Sub
            Public Sub 转轴(code$)
                Dim aaa As New Module_huangzilong

                aaa.转轴(code$)

            End Sub



            Public Sub 转轴355尺寸驱动(localhost$, database$, tabledase$, code$)
                Dim aaa As New Module_huangzilong


                aaa.转轴355尺寸驱动(localhost$, database$, tabledase$, code$)
            End Sub
            Public Sub 定子冲片尺寸驱动(localhost$, database$, tabledase$, code$)
                Dim aaa As New Module_huangzilong


                aaa.定子冲片尺寸驱动(localhost$, database$, tabledase$, code$)
            End Sub

        End Class '张伟斌

        Public Class rotor_assembly
            Public Sub rotor_250_assembly(code$)
                Dim aaa As New Module_huangzilong
                aaa.Assembly_initialization()
                aaa.rotor_250_assembly(code$)

            End Sub

            Public Sub rotor_355_assembly(code$)
                Dim aaa As New Module_huangzilong
                aaa.Assembly_initialization()
                aaa.rotor_355_assembly(code$)

            End Sub

            Public Sub main_frame_355_assembly(code1$, code2$, code3$)
                Dim aaa As New Module_huangzilong
                aaa.Assembly_initialization()
                aaa.main_frame_355_assembly(code1$, code2$, code3$)

            End Sub

            'Public Sub rotor_280_assembly(code$)
            '    Dim aaa As New Module_huangzilong
            '    aaa.Assembly_initialization()
            '    aaa.rotor_280_assembly(code$)
            'End Sub

        End Class

        Public Class rotor_core_assembly
            Public Sub rotor_core_assembly(code$)
                Dim aaa As New Module_huangzilong
                aaa.Assembly_initialization()
                aaa.rotor_core_assembly(code)

            End Sub

        End Class


        Public Class 定制铁芯
            Public Sub 定制铁芯(code$， Optional database$ = "定制铁芯", Optional table$ = "Roundbottomslot_roundhole_Squarehole_middlehole", Optional material$ = "合金钢")
                Dim aaa As New Module_huangzilong
                aaa.Part_initialization()






                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + database$ + ";pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询表
                mysqlcom = New MySqlCommand("select * from " + table, mysqlcon)

                r = mysqlcom.ExecuteReader()
                r.Read()

                'MsgBox(r.FieldCount) '列数

                Do Until r("Code") = code
                    r.Read()
                Loop


                aaa.Round_table(r("Slot_outer_diameter"), r("thickness"), aaa.index_String(r("Slot_outer_diameter_Attach"), 1)， aaa.index_String(r("Slot_outer_diameter_Attach"), 2)，
                                                        aaa.index_String(r("Slot_outer_diameter_Attach"), 3)， aaa.index_String(r("Slot_outer_diameter_Attach"), 4), aaa.index_String(r("Slot_outer_diameter_Attach"), 5), aaa.index_String(r("Slot_outer_diameter_Attach"), 6),
                                                        aaa.index_String(r("Slot_outer_diameter_Attach"), 7), aaa.index_String(r("Slot_outer_diameter_Attach"), 8)， r("Proportional_value"))

                aaa.Round_bottom_slot_定制铁芯(r("Slot_Relative_Y_axis_deflection_angle"), r("Slot_number"), r("Slot_bottom_radius"), r("Slot_outer_diameter"), r("Slot_inside_diameter"), r("Slot_shoulder_width"), r("Slot_top_width"), r("Slot_one_Step_height"), r("Slot_two_steps_height"),
                                      aaa.index_String(r("Slot_Attach"), 1), aaa.index_String(r("Slot_Attach"), 2), aaa.index_String(r("Slot_Attach"), 3), aaa.index_String(r("Slot_Attach"), 4)， r("Proportional_value")) '调用画槽口模块

                If r("middle_hole") = 1 Then
                    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")， 图纸比例值:=r("Proportional_value"))
                End If

                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")， 图纸比例值:=r("Proportional_value"))
                End If

                For i = 1 To r("round_hole")
                    aaa.round_hole(r("round_hole" + i.ToString + "_Number"), r("round_hole" + i.ToString + "_center_distance"), r("round_hole" + i.ToString + "_diameter"), r("round_hole" + i.ToString + "_relative_X_axis_deflection_angle")， aaa.index_String(r("round_hole" + i.ToString + "_attach"), 1), aaa.index_String(r("round_hole" + i.ToString + "_attach"), 2))
                Next

                aaa.Trapezoid_slot_定制铁芯(0, 4, 7, 169, 5, 6)

                aaa.属性设置(material, r("name"), r("code"), r("material"))

                aaa.save(r("Parts_drawing_address") + r("code") + ".sldprt")
                'swapp.CloseDoc("")

                aaa.OldDrawings开始(r("Parts_drawing_address") + r("code") + ".sldprt", 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"), aaa.index_String(r("skills_requirement"), 1), aaa.index_String(r("skills_requirement"), 2), aaa.index_String(r("skills_requirement"), 3), aaa.index_String(r("skills_requirement"), 4), aaa.index_String(r("skills_requirement"), 5), aaa.index_String(r("skills_requirement"), 6))
                aaa.OldDrawings圆底槽口局部视图(0.347, 0.16, r("Local_scale_value"), 0, (r("Slot_outer_diameter") + r("Slot_inside_diameter")) / 2 / 2 / 1000, (r("Slot_outer_diameter") - r("Slot_inside_diameter")) / 2 / 2 / 1000 + 0.002, r("Slot_Relative_Y_axis_deflection_angle"))
                aaa.OldDrawings结束(r("Drawings_address") + r("code") + ".slddrw")

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()

            End Sub

            Public Sub 阻尼板(code$， Optional database$ = "定制铁芯", Optional table$ = "Roundbottomslot_roundhole_Squarehole_middlehole", Optional material$ = "红铜-钴-铍-合金，UNS C17500")
                Dim aaa As New Module_huangzilong
                aaa.Part_initialization()






                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=" + database$ + ";pooling=false")
                Dim mysqlcom As MySqlCommand
                Dim r As MySqlDataReader
                '//打开数据库连接
                mysqlcon.Open()
                '//sql查询表
                mysqlcom = New MySqlCommand("select * from " + table, mysqlcon)

                r = mysqlcom.ExecuteReader()
                r.Read()

                'MsgBox(r.FieldCount) '列数

                Do Until r("Code") = code
                    r.Read()
                Loop


                aaa.Round_table(r("Slot_outer_diameter"), r("thickness"), aaa.index_String(r("Slot_outer_diameter_Attach"), 1)， aaa.index_String(r("Slot_outer_diameter_Attach"), 2)，
                                                        aaa.index_String(r("Slot_outer_diameter_Attach"), 3)， aaa.index_String(r("Slot_outer_diameter_Attach"), 4), aaa.index_String(r("Slot_outer_diameter_Attach"), 5), aaa.index_String(r("Slot_outer_diameter_Attach"), 6),
                                                        aaa.index_String(r("Slot_outer_diameter_Attach"), 7), aaa.index_String(r("Slot_outer_diameter_Attach"), 8)， r("Proportional_value"))

                aaa.Round_bottom_slot_定制铁芯(r("Slot_Relative_Y_axis_deflection_angle"), r("Slot_number"), r("Slot_bottom_radius"), r("Slot_outer_diameter"), r("Slot_inside_diameter"), r("Slot_shoulder_width"), r("Slot_top_width"), r("Slot_one_Step_height"), r("Slot_two_steps_height"),
                                      aaa.index_String(r("Slot_Attach"), 1), aaa.index_String(r("Slot_Attach"), 2), aaa.index_String(r("Slot_Attach"), 3), aaa.index_String(r("Slot_Attach"), 4)， r("Proportional_value")) '调用画槽口模块

                If r("middle_hole") = 1 Then
                    aaa.middle_hole1(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")， 图纸比例值:=r("Proportional_value"))
                End If

                If r("middle_hole") = 2 Then
                    aaa.middle_hole2(r("middle_hole_Relative_Y_axis_deflection_angle"), r("middle_hole_diameter"), r("middle_hole_slot_width"), r("middle_hole_Left_high"), r("middle_hole_Right_high")， 图纸比例值:=r("Proportional_value"))
                End If

                For i = 1 To r("round_hole")
                    aaa.round_hole(r("round_hole" + i.ToString + "_Number"), r("round_hole" + i.ToString + "_center_distance"), r("round_hole" + i.ToString + "_diameter"), r("round_hole" + i.ToString + "_relative_X_axis_deflection_angle")， aaa.index_String(r("round_hole" + i.ToString + "_attach"), 1), aaa.index_String(r("round_hole" + i.ToString + "_attach"), 2))
                Next

                aaa.Trapezoid_slot_定制铁芯(0, 4, 7, 169, 5, 6)

                aaa.属性设置(material, r("name"), r("code"), r("material"))

                aaa.save(r("Parts_drawing_address") + r("code") + ".sldprt")
                'swapp.CloseDoc("")

                aaa.OldDrawings开始(r("Parts_drawing_address") + r("code") + ".sldprt", 0.16, 0.18, r("Proportional_value"), r("name"), r("material") + r("material_thickness") + r("material_technology") + r("material_Iron_loss"), r("Code"), aaa.index_String(r("skills_requirement"), 1), aaa.index_String(r("skills_requirement"), 2), aaa.index_String(r("skills_requirement"), 3), aaa.index_String(r("skills_requirement"), 4), aaa.index_String(r("skills_requirement"), 5), aaa.index_String(r("skills_requirement"), 6))
                aaa.OldDrawings圆底槽口局部视图(0.347, 0.16, r("Local_scale_value"), 0, (r("Slot_outer_diameter") + r("Slot_inside_diameter")) / 2 / 2 / 1000, (r("Slot_outer_diameter") - r("Slot_inside_diameter")) / 2 / 2 / 1000 + 0.002, r("Slot_Relative_Y_axis_deflection_angle"))
                aaa.OldDrawings结束(r("Drawings_address") + r("code") + ".slddrw")

                r.Close()
                mysqlcom.Dispose()
                mysqlcon.Close()
                mysqlcon.Dispose()

            End Sub


            Public Sub rotor_core_assembly()
                Dim aaa As New Module_huangzilong
                aaa.Assembly_initialization()
                aaa.rotor_core_assembly_定制铁芯()

            End Sub

        End Class
































        'Public Sub T006_27()
        '    Dim T006_27 As New Parts_drawing.rotor_lamination
        '    T006_27.圆凸台_改(347.6 / 1000, 25 / 1000)
        '    T006_27.Flat_bottom_slots(0, 16, 347.6 / 1000, 33.8 / 1000, 16 / 1000, 12 / 1000, 45 / 1000, 4 / 1000, 2 / 1000, 4 / 1000, 1 / 1000) '调用画槽口模块
        '    T006_27.中心槽孔2_改(270, 90 / 1000, 18 / 1000, 94 / 1000, 2 / 1000)
        '    T006_27.小圆底槽口_改(22.5 / 2, 16, 4.4 / 1000, 347.6 / 1000, 3 / 1000, 1.5 / 1000)
        '    T006_27.结束("E:\works\generator_parts_library\rotor_lamination\T006_27.sldprt")
        '    Dim T006_27_Drawings As New Drawings
        '    T006_27_Drawings.开始("E:\works\generator_parts_library\rotor_lamination\T006_27.sldprt", 0.16, 0.18, 0.5)
        '    T006_27_Drawings.局部视图(0.5, 0, （347.6 - 45 * 0.5） / 2 / 1000, 45 / 1000, 3， 1.5)
        '    T006_27_Drawings.结束("E:\works\generator_parts_library\rotor_lamination\T006_27.slddrw")

        'End Sub


        'Public Sub DJ28_058_05_01_05()
        '    Dim DJ28_058_05_01_05 As New Parts_drawing.rotor_lamination
        '    DJ28_058_05_01_05.圆凸台_改(398 / 1000, 25 / 1000)
        '    DJ28_058_05_01_05.中心槽孔2_改(0, 96 / 1000, 20 / 1000, 100.9 / 1000, 2 / 1000)
        '    DJ28_058_05_01_05.阵列圆孔_改(8, 266 / 2 / 1000, 10.5 / 1000, 0)
        '    DJ28_058_05_01_05.Flat_bottom_slots(11.25 / 2, 32, 398 / 1000, 20 / 1000, 12.1 / 1000, 7 / 1000, 40 / 1000, 3 / 1000, 1.5 / 1000, 4 / 1000, 2 / 1000)
        '    DJ28_058_05_01_05.小圆底槽口_改(0 / 2, 32, 4.4 / 1000, 398 / 1000, 2.7 / 1000, 1.5 / 1000)
        '    DJ28_058_05_01_05.梯形孔("平行", 0, 8, 260 / 1000, 160 / 1000, 16 / 1000, 10 / 1000, 5 / 1000, 0, 0, 0)
        '    DJ28_058_05_01_05.结束("E:\works\generator_parts_library\rotor_lamination\DJ28_058_05_01_05.sldprt")
        '    Dim DJ28_058_05_01_05_Drawings As New Drawings
        '    DJ28_058_05_01_05_Drawings.开始("E:\works\generator_parts_library\rotor_lamination\DJ28_058_05_01_05.sldprt", 0.16, 0.18, 0.5)
        '    DJ28_058_05_01_05_Drawings.局部视图(0.5, 0, (398 / 2 - 40 / 2) / 1000, 40 / 1000, 3, 1.5)
        '    DJ28_058_05_01_05_Drawings.结束("E:\works\generator_parts_library\rotor_lamination\DJ28_058_05_01_05.slddrw")



        'End Sub

        'Public Sub DJ16_040_04_05_01()
        '    Dim DJ16_040_04_05_01 As New Parts_drawing.rotor_lamination
        '    DJ16_040_04_05_01.圆凸台_改(214 / 1000, 25 / 1000)
        '    DJ16_040_04_05_01.中心槽孔1_改(0, 186 / 1000, 4 / 1000, 2.5 / 1000, 2 / 1000)
        '    DJ16_040_04_05_01.阵列圆孔_改(10, 186 / 2 / 1000, 1.5 / 1000, 0)
        '    DJ16_040_04_05_01.Flat_bottom_slots(0, 120, 214 / 1000, 2.6 / 1000, 2.2 / 1000, 1.2 / 1000, 6 / 1000, 0.5 / 1000, 0.5 / 1000, 0 / 1000, 0 / 1000)
        '    DJ16_040_04_05_01.结束("E:\works\generator_parts_library\rotor_lamination\DJ16_040_04_05_01.sldprt")
        '    Dim DJ16_040_04_05_01_Drawings As New Drawings
        '    DJ16_040_04_05_01_Drawings.开始("E:\works\generator_parts_library\rotor_lamination\DJ16_040_04_05_01.sldprt", 0.16, 0.18, 0.5)
        '    DJ16_040_04_05_01_Drawings.局部视图(0.5, 0, (214 / 2 - 6 / 2) / 1000, 6 * 3 / 1000, 4, 3)
        '    DJ16_040_04_05_01_Drawings.结束("E:\works\generator_parts_library\rotor_lamination\DJ16_040_04_05_01.slddrw")
        'End Sub


        'Public Sub T006_14()
        '    Dim T006_14 As New Parts_drawing.rotor_lamination
        '    T006_14.圆凸台_改(200.8 / 1000, 25 / 1000)
        '    T006_14.中心槽孔2_改(0, 48 / 1000, 10 / 1000, 51.6 / 1000, 2 / 1000)
        '    T006_14.小圆底槽口_改(0 / 2, 16, 4.4 / 1000, 200.8 / 1000, (4.9 - 2.2) / 1000, 1.5 / 1000)
        '    T006_14.平底加小圆底槽口(22.5 / 2, 16, 200.8 / 1000, 22.4 / 1000, 5.6 / 1000, 10 / 1000, 42.8 / 1000, 3 / 1000, 1.5 / 1000, 4 / 1000, 1 / 1000, 0.8 / 1000, 2.2 * 2 / 1000, (95.5 + 3.2 * 2 + 2.2 * 2) / 1000, 3.2 / 1000, 2 / 1000)
        '    T006_14.结束("E:\works\generator_parts_library\rotor_lamination\T006_14.sldprt")
        '    Dim T006_14_Drawings As New Drawings
        '    T006_14_Drawings.开始("E:\works\generator_parts_library\rotor_lamination\T006_14.sldprt", 0.16, 0.18, 0.5)
        '    T006_14_Drawings.局部视图(0.5, 0, (200.8 / 2 - (4.9 - 2.2)) / 1000, (4.9 - 2.2) / 1000, 3, 2)
        '    T006_14_Drawings.结束("E:\works\generator_parts_library\rotor_lamination\T006_14.slddrw")
        'End Sub










    End Class




End Class





'Imports MySql.Data.MySqlClient
'Imports SwConst
'Imports System.Math
'Public Class rotor_shaft
'    Public Class Parts_drawing
'        Public Class Shaft
'            Public Shared line001, line002, line003, line004, line005, line006, line007, line008, line009, line0010, line0011, line0012, line0013, line0014, line0015, line0016, line0017, line0018, line0019, line0020, line0021, line0022, line0023, line0024, line0025, line0026, line0027, line0028, line0029, line0030 As SldWorks.SketchLine
'            Public Shared line0001, line0002, line0003, line0004, line0005, line0006, line0007, line0008, line0009, line00010, line00011, line00012, line00013, line00014, line00015, line00016, line00017, line00018, line00019, line00020, line00021, line00022 As SldWorks.SketchLine
'            Public Shared line01_1, line01_2, line01_3, line01_4, line01_5, line01_6, line01_7, line01_8, line01_9, line01_10, line01_11, line01_12, line01_13, line01_14, line01_15, line01_16, line01_17, line01_18, line01_19, line01_20, line01_21, line01_22, line01_01, line01_02 As SldWorks.SketchLine
'            Public Shared SketchSegment001, SketchSegment002, SketchSegment003, SketchSegment004, SketchSegment005, SketchSegment006, SketchSegment007, SketchSegment008, SketchSegment009, SketchSegment0010, SketchSegment0011, SketchSegment0012, SketchSegment0013, SketchSegment0014, SketchSegment0015, SketchSegment0016, SketchSegment0017, SketchSegment0018, SketchSegment0019, SketchSegment0020, SketchSegment0021, SketchSegment0022, SketchSegment0023, SketchSegment0024, SketchSegment0025, SketchSegment0026, SketchSegment0027, SketchSegment0028, SketchSegment0029, SketchSegment0030 As SldWorks.SketchSegment
'            Public Shared Displaydimention001_01, Displaydimention001_02, Displaydimention001_03, Displaydimention002_01, Displaydimention002_02, Displaydimention002_03, Displaydimention003_01, Displaydimention003_02, Displaydimention003_03, Displaydimention004_01, Displaydimention004_02, Displaydimention004_03 As SldWorks.IDisplayDimension
'            Public Shared SketchSegment0001, SketchSegment0002, SketchSegment0003, SketchSegment0004, SketchSegment0005, SketchSegment0006, SketchSegment0007, SketchSegment0008, SketchSegment0009, SketchSegment00010, SketchSegment00011, SketchSegment00012, SketchSegment00013, SketchSegment00014, SketchSegment00015, SketchSegment00016, SketchSegment00017, SketchSegment00018, SketchSegment00019, SketchSegment00020, SketchSegment00021, SketchSegment00022 As SldWorks.SketchSegment
'            Public Shared Feature001 As SldWorks.IFeature

'            Public Class Shaft_Parts_drawing
'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                Dim OpenDoc7 As SldWorks.ModelDoc2 = swapp.OpenDoc7("C:\Users\Public\Desktop\SOLIDWORKS 2019.lnk")
'                Dim NewDocument As SldWorks.ModelDoc2 = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_part.prtdot", 0, 0, 0)
'                Dim part As SldWorks.ModelDoc2 = swapp.ActiveDoc
'                Dim SketchManager As SldWorks.SketchManager = part.SketchManager
'                Dim FeatureManager As SldWorks.FeatureManager = part.FeatureManager
'                Dim Dimension As SldWorks.Dimension
'                Dim Feature As SldWorks.IFeature
'                Dim DisplayDimension As SldWorks.DisplayDimension
'                Dim sketcher As SldWorks.Sketch
'                Dim SelectionMgr As SldWorks.SelectionMgr = part.SelectionManager
'                Public MaxValue_diameter As Double
'                Public edge001() As SldWorks.IEdge
'                Public face001(), face002() As Object
'                Public swface As SldWorks.IFace
'                Public Shared MyGlobal As Integer
'                Public Sub Step_shaft(TotalSteps#, Step1_length#, Step1_diameter#, Step2_length#, Step2_diameter#, Step3_length#, Step3_diameter#, Step4_length#, Step4_diameter#, Step5_length#, Step5_diameter#, Optional Step6_length# = 0, Optional Step6_diameter# = 0, Optional Step7_length# = 0, Optional Step7_diameter# = 0,
'                  Optional Step8_length# = 0, Optional Step8_diameter# = 0, Optional Step9_length# = 0, Optional Step9_diameter# = 0, Optional Step10_length# = 0, Optional Step10_diameter# = 0, Optional Step11_length# = 0, Optional Step11_diameter# = 0, Optional Step12_length# = 0,
'                  Optional Step12_diameter# = 0, Optional Step13_length# = 0, Optional Step13_diameter# = 0, Optional Step14_length# = 0, Optional Step14_diameter# = 0, Optional Step15_length# = 0, Optional Step15_diameter# = 0)
'                    'Step_shaft(阶梯数#, 一阶长#, 一阶直径#, 二阶长#, 二阶直径#, 三阶长#, 三阶直径#, 四阶长#, 四阶直径#, 五阶长#, 五阶直径#, Optional 六阶长# = 0, Optional 六阶直径# = 0, Optional 七阶长# = 0, Optional 七阶直径# = 0,
'                    ' Optional 八阶长# = 0, Optional 八阶直径# = 0， Optional 九阶长# = 0, Optional 九阶直径# = 0, Optional 十阶长# = 0, Optional 十阶直径# = 0, Optional 十一阶长# = 0, Optional 十一阶直径# = 0, Optional 十二阶长# = 0,
'                    'Optional 十二阶直径# = 0, Optional 十三阶长# = 0, Optional 十三阶直径# = 0, Optional 十四阶长# = 0, Optional 十四阶直径# = 0, Optional 十五阶长# = 0, Optional 十五阶直径# = 0)
'                    Step1_length = Step1_length / 1000 ： Step1_diameter = Step1_diameter / 1000 ： Step2_length = Step2_length / 1000 ： Step2_diameter = Step2_diameter / 1000 ： Step3_length = Step3_length / 1000 ： Step3_diameter = Step3_diameter / 1000 ： Step4_length = Step4_length# / 1000 ： Step4_diameter = Step4_diameter# / 1000 ： Step5_length = Step5_length / 1000
'                    Step5_diameter = Step5_diameter / 1000 ： Step6_length# = Step6_length / 1000 ： Step6_diameter = Step6_diameter / 1000 ： Step7_length = Step7_length# / 1000 ： Step7_diameter = Step7_diameter / 1000 ： Step8_length = Step8_length / 1000 ： Step8_diameter = Step8_diameter / 1000 ： Step9_length = Step9_length / 1000 ： Step9_diameter = Step9_diameter / 1000 ： Step10_length = Step10_length / 1000
'                    Step10_diameter = Step10_diameter / 1000 ： Step11_length = Step11_length / 1000 ： Step11_diameter = Step11_diameter / 1000 ： Step12_length = Step12_length / 1000 ： Step12_diameter = Step12_diameter / 1000 ： Step13_length = Step13_length# / 1000 ： Step13_diameter# = Step13_diameter / 1000 ： Step14_length = Step14_length / 1000 ： Step14_diameter = Step14_diameter# / 1000 ： Step15_length = Step15_length / 1000 ： Step15_diameter = Step15_diameter# / 1000

'                    Dim SketchSegment As SldWorks.SketchSegment
'                    Dim SketchSegments() As Object
'                    Dim Sketch As SldWorks.Sketch
'                    Dim [Boolean] As Boolean
'                    Initial_settings（0）
'                    DatumAxis（"X"）
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    Feature001 = part.SketchManager.ActiveSketch
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    line001 = part.SketchManager.CreateLine(0, 0, 0, 0, Step1_diameter / 2, 0)  '第1条线段
'                    line002 = part.SketchManager.CreateLine(0, Step1_diameter / 2, 0, Step1_length, Step1_diameter / 2, 0) '第2条线段
'                    line003 = part.SketchManager.CreateLine(Step1_length, Step1_diameter / 2, 0, Step1_length, Step2_diameter / 2, 0) '第3条线段
'                    line004 = part.SketchManager.CreateLine(Step1_length, Step2_diameter / 2, 0, Step1_length + Step2_length, Step2_diameter / 2, 0) '第4条线段
'                    line005 = part.SketchManager.CreateLine(Step1_length + Step2_length, Step2_diameter / 2, 0, Step1_length + Step2_length, Step3_diameter / 2, 0) '第5条线段
'                    line006 = part.SketchManager.CreateLine(Step1_length + Step2_length, Step3_diameter / 2, 0, Step1_length + Step2_length + Step3_length, Step3_diameter / 2, 0) '第6条线段
'                    line007 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length, Step3_diameter / 2, 0, Step1_length + Step2_length + Step3_length, Step4_diameter / 2, 0) '第7条线段
'                    line008 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length, Step4_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length, Step4_diameter / 2, 0) '第8条线段
'                    line009 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length, Step4_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length, Step5_diameter / 2, 0) '第9条线段
'                    line0010 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length, Step5_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length, Step5_diameter / 2, 0) '第10条线段
'                    If TotalSteps >= 6 Then
'                        line0011 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length, Step5_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length, Step6_diameter / 2, 0) '第11条线段
'                        line0012 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length, Step6_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length, Step6_diameter / 2, 0) '第12条线段
'                    End If
'                    If TotalSteps >= 7 Then
'                        line0013 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length, Step6_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length, Step7_diameter / 2, 0) '第13条线段
'                        line0014 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length, Step7_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length, Step7_diameter / 2, 0) '第14条线段
'                    End If
'                    If TotalSteps >= 8 Then
'                        line0015 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length, Step7_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length, Step8_diameter / 2, 0) '第15条线段
'                        line0016 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length, Step8_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length, Step8_diameter / 2, 0) '第16条线段
'                    End If
'                    If TotalSteps >= 9 Then
'                        line0017 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length, Step8_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length, Step9_diameter / 2, 0) '第17条线段
'                        line0018 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length, Step9_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length, Step9_diameter / 2, 0) '第18条线段
'                    End If
'                    If TotalSteps >= 10 Then
'                        line0019 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length, Step9_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length, Step10_diameter / 2, 0) '第19条线段
'                        line0020 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length, Step10_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length, Step10_diameter / 2, 0) '第20条线段
'                    End If
'                    If TotalSteps >= 11 Then
'                        line0021 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length, Step10_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length, Step11_diameter / 2, 0) '第21条线段
'                        line0022 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length, Step11_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length, Step11_diameter / 2, 0) '第22 条线段
'                    End If
'                    If TotalSteps >= 12 Then
'                        line0023 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length, Step11_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length, Step12_diameter / 2, 0) '第23 条线段
'                        line0024 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length, Step12_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length, Step12_diameter / 2, 0) '第24 条线段
'                    ElseIf TotalSteps >= 13 Then
'                        line0025 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length, Step12_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length, Step13_diameter / 2, 0) '第25 条线段
'                        line0026 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length, Step13_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length, Step13_diameter / 2, 0) '第26 条线段
'                    End If
'                    If TotalSteps >= 14 Then
'                        line0027 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length, Step13_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length, Step14_diameter / 2, 0) '第27条线段
'                        line0028 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length, Step14_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length, Step14_diameter / 2, 0) '第28 条线段
'                    End If
'                    If TotalSteps >= 15 Then
'                        line0029 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length, Step14_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length, Step15_diameter / 2, 0) '第29 条线段
'                        line0030 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length, Step15_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length + Step15_length, Step15_diameter / 2, 0) '第30 条线段
'                    End If
'                    SketchSegment001 = line001 ： SketchSegment002 = line002 ： SketchSegment003 = line003 ： SketchSegment004 = line004 ： SketchSegment005 = line005 ： SketchSegment006 = line006 ： SketchSegment007 = line007 ： SketchSegment008 = line008
'                    SketchSegment009 = line009 ： SketchSegment0010 = line0010 ： SketchSegment0011 = line0011 ： SketchSegment0012 = line0012 ： SketchSegment0013 = line0013 ： SketchSegment0014 = line0014 ： SketchSegment0015 = line0015
'                    SketchSegment0016 = line0016 : SketchSegment0017 = line0017 : SketchSegment0018 = line0018 : SketchSegment0019 = line0019 : SketchSegment0020 = line0020 : SketchSegment0021 = line0021 : SketchSegment0022 = line0022 : SketchSegment0023 = line0023 : SketchSegment0024 = line0024
'                    SketchSegment0025 = line0025 : SketchSegment0026 = line0026 : SketchSegment0027 = line0027 : SketchSegment0028 = line0028 : SketchSegment0029 = line0029 : SketchSegment0030 = line0030
'                    If TotalSteps = 5 Then
'                        line0001 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length， Step5_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length, 0, 0） '终止线段
'                        line0002 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length, 0, 0） '起始线段
'                    ElseIf TotalSteps = 6 Then
'                        line0003 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length, Step6_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length, 0, 0) '终止线段
'                        line0004 = part.SketchManager.CreateLine(0, 0, 0， Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 7 Then
'                        line0005 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length, Step7_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length, 0, 0) '终止线段
'                        line0006 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 8 Then
'                        line0007 = part.SketchManager.CreateLine(Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length, Step8_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length, 0, 0) '终止线段
'                        line0008 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 9 Then
'                        line0009 = part.SketchManager.CreateLine（Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length, Step9_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length, 0, 0) '终止线段
'                        line00010 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 10 Then
'                        line00011 = part.SketchManager.CreateLine（Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length， Step10_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length, 0, 0) '终止线段
'                        line00012 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 11 Then
'                        line00013 = part.SketchManager.CreateLine（Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length, Step11_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length, 0, 0) '终止线段
'                        line00014 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 12 Then
'                        line00015 = part.SketchManager.CreateLine（Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length, Step12_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length, 0, 0) '终止线段
'                        line00016 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 13 Then
'                        line00017 = part.SketchManager.CreateLine（Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length, Step13_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length, 0, 0) '终止线段
'                        line00018 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 14 Then
'                        line00019 = part.SketchManager.CreateLine（Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length, Step14_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length, 0, 0) '终止线段
'                        line00020 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length, 0, 0) '起始线段
'                    ElseIf TotalSteps = 15 Then
'                        line00021 = part.SketchManager.CreateLine（Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length + Step15_length, Step15_diameter / 2, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length + Step15_length, 0, 0) '终止线段
'                        line00022 = part.SketchManager.CreateLine(0, 0, 0, Step1_length + Step2_length + Step3_length + Step4_length + Step5_length + Step6_length + Step7_length + Step8_length + Step9_length + Step10_length + Step11_length + Step12_length + Step13_length + Step14_length + Step15_length, 0, 0) '起始线段
'                    End If
'                    SketchSegment0001 = line0001 ： SketchSegment0002 = line0002 ： SketchSegment0003 = line0003 ： SketchSegment0004 = line0004 ： SketchSegment0005 = line0005 ： SketchSegment0006 = line0006 ： SketchSegment0007 = line0007 ： SketchSegment0008 = line0008
'                    SketchSegment0009 = line0009 ： SketchSegment00010 = line00010 ： SketchSegment00011 = line00011 ： SketchSegment00012 = line00012 ： SketchSegment00013 = line00013 ： SketchSegment00014 = line00014 ： SketchSegment00015 = line00015 ： SketchSegment00016 = line00016
'                    SketchSegment00017 = line00017 ： SketchSegment00018 = line00018 ： SketchSegment00019 = line00019 ： SketchSegment00020 = line00020 ： SketchSegment00021 = line00021 ： SketchSegment00022 = line00022

'                    Sketch = SketchManager.ActiveSketch
'                    SketchSegments = Sketch.GetSketchSegments
'                    For i = 0 To UBound(SketchSegments)
'                        SketchSegment = SketchSegments(i)
'                        [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
'                        part.SketchAddConstraints("sgFIXED")
'                    Next i
'                    SketchSegment001.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, False, False, False, 0, 0, 2 * PI, 0, False, False, 0, 0, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                    MaxValue_diameter = Maximum_radius(TotalSteps)
'                End Sub
'                Public Sub Step_shaft_hollowing(Ssh_TotalSteps#, Optional Ssh_Step1_length# = 0, Optional Ssh_Step1_diameter# = 0, Optional Ssh_Step2_length# = 0, Optional Ssh_Step2_diameter# = 0, Optional Ssh_Step3_length# = 0, Optional Ssh_Step3_diameter# = 0, Optional Ssh_Step4_length# = 0, Optional Ssh_Step4_diameter# = 0, Optional Ssh_Step5_length# = 0, Optional Ssh_Step5_diameter# = 0, Optional Ssh_Step6_length# = 0,
'                       Optional Ssh_Step6_diameter# = 0, Optional Ssh_Step7_length# = 0, Optional Ssh_Step7_diameter# = 0, Optional Ssh_Step8_length# = 0, Optional Ssh_Step8_diameter# = 0， Optional Ssh_Step9_length# = 0, Optional Ssh_Step9_diameter# = 0, Optional Ssh_Step10_length# = 0, Optional Ssh_Step10_diameter# = 0, Optional Ssh_Step11_length# = 0, Optional Ssh_Step11_diameter# = 0)
'                    Ssh_Step1_length = Ssh_Step1_length / 1000 ： Ssh_Step1_diameter = Ssh_Step1_diameter / 1000 ： Ssh_Step2_length = Ssh_Step2_length / 1000 ： Ssh_Step2_diameter = Ssh_Step2_diameter / 1000 ： Ssh_Step3_length = Ssh_Step3_length# / 1000 ： Ssh_Step3_diameter = Ssh_Step3_diameter / 1000 ： Ssh_Step4_length = Ssh_Step4_length / 1000 ： Ssh_Step4_diameter = Ssh_Step4_diameter / 1000 ： Ssh_Step5_length# = Ssh_Step5_length / 1000 ： Ssh_Step5_diameter = Ssh_Step5_diameter / 1000 ： Ssh_Step6_length = Ssh_Step6_length / 1000
'                    Ssh_Step6_diameter = Ssh_Step6_diameter / 1000 ： Ssh_Step7_length = Ssh_Step7_length / 1000 ： Ssh_Step7_diameter# = Ssh_Step7_diameter / 1000 ： Ssh_Step8_length# = Ssh_Step8_length# / 1000 ： Ssh_Step8_diameter# = Ssh_Step8_diameter / 1000 ： Ssh_Step9_length# = Ssh_Step9_length / 1000 ： Ssh_Step9_diameter = Ssh_Step9_length / 1000 ： Ssh_Step10_length# = Ssh_Step10_length / 1000 ： Ssh_Step10_diameter = Ssh_Step10_diameter# / 1000 ： Ssh_Step11_length = Ssh_Step11_length / 1000 ： Ssh_Step11_diameter = Ssh_Step11_diameter# / 1000

'                    Dim line1Segment, SketchSegment As SldWorks.SketchSegment
'                    Dim SketchSegments() As Object
'                    Dim Sketch As SldWorks.Sketch
'                    Dim [Boolean] As Boolean

'                    Initial_settings（0）
'                    DatumAxis（"X"）
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    If Ssh_TotalSteps >= 1 Then
'                        line01_1 = part.SketchManager.CreateLine(0, 0, 0, 0, Ssh_Step1_diameter / 2, 0)  '第1条线段
'                        line01_2 = part.SketchManager.CreateLine(0, Ssh_Step1_diameter / 2, 0, Ssh_Step1_length, Ssh_Step1_diameter / 2, 0) '第2条线段
'                    End If
'                    If Ssh_TotalSteps >= 2 Then
'                        line01_3 = part.SketchManager.CreateLine(Ssh_Step1_length, Ssh_Step1_diameter / 2, 0, Ssh_Step1_length, Ssh_Step2_diameter / 2, 0) '第3条线段
'                        line01_4 = part.SketchManager.CreateLine(Ssh_Step1_length, Ssh_Step2_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length, Ssh_Step2_diameter / 2, 0) '第4条线段
'                    End If
'                    If Ssh_TotalSteps >= 3 Then
'                        line01_5 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length, Ssh_Step2_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length, Ssh_Step3_diameter / 2, 0) '第5条线段
'                        line01_6 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length, Ssh_Step3_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length, Ssh_Step3_diameter / 2, 0) '第6条线段
'                    End If
'                    If Ssh_TotalSteps >= 4 Then
'                        line01_7 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length, Ssh_Step3_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length, Ssh_Step4_diameter / 2, 0) '第7条线段
'                        line01_8 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length, Ssh_Step4_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length, Ssh_Step4_diameter / 2, 0) '第8条线段
'                    End If
'                    If Ssh_TotalSteps >= 5 Then
'                        line01_9 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length, Ssh_Step4_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length， Ssh_Step5_diameter / 2, 0) '第9条线段
'                        line01_10 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length, Ssh_Step5_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length, Ssh_Step5_diameter / 2, 0) '第10条线段
'                    End If
'                    If Ssh_TotalSteps >= 6 Then
'                        line01_11 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length, Ssh_Step5_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length, Ssh_Step6_diameter / 2, 0) '第11条线段
'                        line01_12 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length, Ssh_Step6_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length, Ssh_Step6_diameter / 2, 0) '第12条线段
'                    End If
'                    If Ssh_TotalSteps >= 7 Then
'                        line01_13 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length, Ssh_Step6_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length, Ssh_Step7_diameter / 2, 0) '第13条线段
'                        line01_14 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length, Ssh_Step7_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length, Ssh_Step7_diameter / 2, 0) '第14条线段
'                    End If
'                    If Ssh_TotalSteps >= 8 Then
'                        line01_15 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length, Ssh_Step7_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length, Ssh_Step8_diameter / 2, 0) '第15条线段
'                        line01_16 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length, Ssh_Step8_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length, Ssh_Step8_diameter / 2, 0) '第16条线段
'                    End If
'                    If Ssh_TotalSteps >= 9 Then
'                        line01_17 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length, Ssh_Step8_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length, Ssh_Step9_diameter / 2, 0) '第17条线段
'                        line01_18 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length, Ssh_Step9_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length, Ssh_Step9_diameter / 2, 0) '第18条线段
'                    End If
'                    If Ssh_TotalSteps >= 10 Then
'                        line01_19 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length, Ssh_Step9_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length, Ssh_Step10_diameter / 2, 0) '第19条线段
'                        line01_20 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length, Ssh_Step10_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length, Ssh_Step10_diameter / 2, 0) '第20条线段
'                    End If
'                    If Ssh_TotalSteps >= 11 Then
'                        line01_21 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length, Ssh_Step10_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length, Ssh_Step11_diameter / 2, 0) '第21条线段
'                        line01_22 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length, Ssh_Step11_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length + Ssh_Step11_length, Ssh_Step11_diameter / 2, 0) '第22 条线段
'                    End If
'                    If Ssh_TotalSteps = 1 Then
'                        line01_01 = part.SketchManager.CreateLine(Ssh_Step1_length, Ssh_Step1_diameter / 2, 0, Ssh_Step1_length, 0, 0） '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length, 0, 0） '起始线段
'                    ElseIf Ssh_TotalSteps = 2 Then
'                        line01_01 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length, Ssh_Step2_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length, 0, 0） '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length, 0, 0） '起始线段
'                    ElseIf Ssh_TotalSteps = 3 Then
'                        line01_01 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length, Ssh_Step3_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length, 0, 0） '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length, 0, 0） '起始线段
'                    ElseIf Ssh_TotalSteps = 4 Then
'                        line01_01 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length, Ssh_Step4_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length, 0, 0） '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length, 0, 0） '起始线段
'                    ElseIf Ssh_TotalSteps = 5 Then
'                        line01_01 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length, Ssh_Step5_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length, 0, 0） '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length, 0, 0） '起始线段
'                    ElseIf Ssh_TotalSteps = 6 Then
'                        line01_01 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length, Ssh_Step6_diameter / 2, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length, 0) '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0， Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length, 0, 0) '起始线段
'                    ElseIf Ssh_TotalSteps = 7 Then
'                        line01_01 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length， Ssh_Step7_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length, 0, 0) '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length, 0, 0) '起始线段
'                    ElseIf Ssh_TotalSteps = 8 Then
'                        line01_01 = part.SketchManager.CreateLine(Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length, Ssh_Step8_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length, 0, 0) '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length, 0, 0) '起始线段
'                    ElseIf Ssh_TotalSteps = 9 Then
'                        line01_01 = part.SketchManager.CreateLine（Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length, Ssh_Step9_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length, 0, 0) '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length, 0, 0) '起始线段
'                    ElseIf Ssh_TotalSteps = 10 Then
'                        line01_01 = part.SketchManager.CreateLine（Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length， Ssh_Step10_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length, 0, 0) '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length, 0, 0) '起始线段
'                    ElseIf Ssh_TotalSteps = 11 Then
'                        line01_01 = part.SketchManager.CreateLine（Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length + Ssh_Step11_length, Ssh_Step11_diameter / 2, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length + Ssh_Step11_length, 0, 0) '终止线段
'                        line01_02 = part.SketchManager.CreateLine(0, 0, 0, Ssh_Step1_length + Ssh_Step2_length + Ssh_Step3_length + Ssh_Step4_length + Ssh_Step5_length + Ssh_Step6_length + Ssh_Step7_length + Ssh_Step8_length + Ssh_Step9_length + Ssh_Step10_length + Ssh_Step11_length, 0, 0) '起始线段
'                    End If
'                    Sketch = SketchManager.ActiveSketch
'                    SketchSegments = Sketch.GetSketchSegments
'                    For i = 0 To UBound(SketchSegments)
'                        SketchSegment = SketchSegments(i)
'                        [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
'                        part.SketchAddConstraints("sgFIXED")
'                    Next i
'                    line1Segment = line01_1
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, 2 * PI, 0, False, False, 0, 0, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                End Sub
'                Public Sub Right_chamfer_cut（Rcc_Nstep_RChamfer#, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_NclassMark#, Rcc_NlayerMark#, Optional Rcc_BottomFilletRadius# = 0, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "") '0为不标注，1为" * 45°"方式标注，2为倒角长标注方式标注,3为
'                    '右倒角切除（N阶右倒角#, 倒角水平距离#, 倒角竖直距离#, 是否标注#, 标注在第N层#, Optional 底圆角半径# = 0）   '0为不标注，1为第一种方式标注，2为第二种方式标注

'                    Rcc_ChamferHorizontalDistance = Rcc_ChamferHorizontalDistance / 1000 ： Rcc_ChamferVerticalDistance = Rcc_ChamferVerticalDistance / 1000 ： Rcc_BottomFilletRadius = Rcc_BottomFilletRadius / 1000
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    Feature = part.SketchManager.ActiveSketch
'                    'MsgBox(Feature.Name)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    If Rcc_Nstep_RChamfer = 2 Then
'                        Right_chamfer_cut_Module(line004, line003, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 3 Then
'                        Right_chamfer_cut_Module(line006, line005, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 4 Then
'                        Right_chamfer_cut_Module(line008, line007, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 5 Then
'                        Right_chamfer_cut_Module(line0010, line009, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 6 Then
'                        Right_chamfer_cut_Module(line0012, line0011, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 7 Then
'                        Right_chamfer_cut_Module(line0014, line0013, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 8 Then
'                        Right_chamfer_cut_Module(line0016, line0015, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 9 Then
'                        Right_chamfer_cut_Module(line0018, line0017, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 10 Then
'                        Right_chamfer_cut_Module(line0020, line0019, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 11 Then
'                        Right_chamfer_cut_Module(line0022, line0021, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 12 Then
'                        Right_chamfer_cut_Module(line0024, line0023, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 13 Then
'                        Right_chamfer_cut_Module(line0026, line0025, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 14 Then
'                        Right_chamfer_cut_Module(line0028, line0027, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rcc_Nstep_RChamfer = 15 Then
'                        Right_chamfer_cut_Module(line0030, line0029, Rcc_ChamferHorizontalDistance#, Rcc_ChamferVerticalDistance#, Rcc_BottomFilletRadius#, Rcc_NclassMark#, Rcc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                End Sub
'                Public Sub Left_chamfer_cut（Lcc_Nstep_LChamfer#, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_NclassMark#, Lcc_NlayerMark#, Optional Lcc_BottomFilletRadius# = 0） '0为不标注，1为第一种方式标注，2为第二种方式标注
'                    '左倒角切除（N阶左倒角#, 倒角水平距离#, 倒角竖直距离#, 是否标注#, 标注在第N层#, Optional 底圆角半径# = 0）   '0为不标注，1为第一种方式标注，2为第二种方式标注 
'                    Lcc_ChamferHorizontalDistance = Lcc_ChamferHorizontalDistance / 1000 ： Lcc_ChamferVerticalDistance = Lcc_ChamferVerticalDistance / 1000 ： Lcc_BottomFilletRadius = Lcc_BottomFilletRadius / 1000
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    If Lcc_Nstep_LChamfer = 1 Then
'                        Left_chamfer_cut_Module(line002, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 2 Then
'                        Left_chamfer_cut_Module(line004, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 3 Then
'                        Left_chamfer_cut_Module(line006, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 4 Then
'                        Left_chamfer_cut_Module(line008, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 5 Then
'                        Left_chamfer_cut_Module(line0010, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 6 Then
'                        Left_chamfer_cut_Module(line0012, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 7 Then
'                        Left_chamfer_cut_Module(line0014, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 8 Then
'                        Left_chamfer_cut_Module(line0016, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 9 Then
'                        Left_chamfer_cut_Module(line0018, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 10 Then
'                        Left_chamfer_cut_Module(line0020, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 11 Then
'                        Left_chamfer_cut_Module(line0022, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 12 Then
'                        Left_chamfer_cut_Module(line0024, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 13 Then
'                        Left_chamfer_cut_Module(line0026, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    ElseIf Lcc_Nstep_LChamfer = 14 Then
'                        Left_chamfer_cut_Module(line0028, Lcc_ChamferHorizontalDistance#, Lcc_ChamferVerticalDistance#, Lcc_BottomFilletRadius#, Lcc_NclassMark#, Lcc_NlayerMark#)
'                    End If
'                End Sub
'                Public Sub Left_chamfer_Add（LcA_Nstep_LChamfer#, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#）
'                    LcA_ChamferHorizontalDistance = LcA_ChamferHorizontalDistance / 1000 ： LcA_ChamferVerticalDistance = LcA_ChamferVerticalDistance / 1000
'                    If LcA_Nstep_LChamfer = 2 Then
'                        Left_chamfer_Add_Moudle(line004, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 3 Then
'                        Left_chamfer_Add_Moudle(line006, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 4 Then
'                        Left_chamfer_Add_Moudle(line008, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 5 Then
'                        Left_chamfer_Add_Moudle(line0010, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 6 Then
'                        Left_chamfer_Add_Moudle(line0012, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 7 Then
'                        Left_chamfer_Add_Moudle(line0014, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 8 Then
'                        Left_chamfer_Add_Moudle(line0016, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 9 Then
'                        Left_chamfer_Add_Moudle(line0018, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 10 Then
'                        Left_chamfer_Add_Moudle(line0020, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 11 Then
'                        Left_chamfer_Add_Moudle(line0022, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 12 Then
'                        Left_chamfer_Add_Moudle(line0024, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 13 Then
'                        Left_chamfer_Add_Moudle(line0026, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    ElseIf LcA_Nstep_LChamfer = 14 Then
'                        Left_chamfer_Add_Moudle(line0028, LcA_ChamferHorizontalDistance#, LcA_ChamferVerticalDistance#, LcA_NclassMark#, LcA_NlayerMark#)
'                    End If
'                End Sub
'                Public Function Left_chamfer_Add_Moudle(LcAM_AddHorizontalLine As SldWorks.SketchLine, LcAM_ChamferHorizontalDistance#, LcAM_ChamferVerticalDistance#, LcAM_NclassMark#, LcAM_NlayerMark#)
'                    Dim line1, line2, line3 As SldWorks.SketchLine
'                    Dim line1Segment As SldWorks.SketchSegment
'                    Dim point1, point2, point3, point4 As SldWorks.ISketchPoint
'                    Dim edge() As Object
'                    Dim edge1() As Object
'                    Dim swface As SldWorks.Face
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Feature As SldWorks.IFeature


'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    point1 = LcAM_AddHorizontalLine.GetStartPoint2()
'                    point1.Select4(False, Nothing)
'                    line1 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X + LcAM_ChamferHorizontalDistance, point1.Y, 0)  '第1条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X, point1.Y + LcAM_ChamferVerticalDistance, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(point1.X, point1.Y + LcAM_ChamferVerticalDistance, 0, point1.X + LcAM_ChamferHorizontalDistance, point1.Y, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    point3 = LcAM_AddHorizontalLine.GetEndPoint2()
'                    point4 = part.SketchManager.CreatePoint(point3.X, point3.Y, 0)
'                    line1Segment = line1
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, False, False, False, 0, 0, PI * 2, 0, False, False, 0.01, 0.01, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                    part.ClearSelection2(True)
'                    If LcAM_NclassMark = 1 Then
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X, -MaxValue_diameter - 0.01 - LcAM_NlayerMark# * 0.01, 0)  '第一阶长标注
'                        Displaydimention.CenterText = True
'                    ElseIf LcAM_NclassMark = 2 Then
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X, -MaxValue_diameter - 0.01 - LcAM_NlayerMark# * 0.01, 0)  '第一阶长标注
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        point2 = line1.GetEndPoint2()
'                        point4.Select4(False, Nothing)
'                        point2.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point4.X - 0.002, -MaxValue_diameter - 0.03 - LcAM_NlayerMark# * 0.01, 0)
'                        Displaydimention.CenterText = True
'                    End If
'                    'point2 = line1.GetEndPoint2
'                    'LcAM_AddHorizontalLine.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(point2.X, -MaxValue_diameter - 0.01 - LcAM_NlayerMark# * 0.01, 0)  '第一阶长标注
'                    'Displaydimention.CenterText = True

'                End Function
'                Public Sub Right_rightRrapezoid_cut（Rrc_Nstep_RightRightRrapezoid#, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    'Public Sub右直角梯形切除（N阶右直角梯形#, 梯形底长#, 梯形高#, 梯形上边水平距离#, 第N类标注#, 标注在第N层#）
'                    Rrc_TrapezoidTopLineLength = Rrc_TrapezoidTopLineLength / 1000 ： Rrc_TrapezoidHeight = Rrc_TrapezoidHeight / 1000 ： Rrc_TrapezoidBaseLineLength = Rrc_TrapezoidBaseLineLength / 1000 ： TolMax = TolMax / 1000 ： TolMin = TolMin / 1000
'                    Dim point1 As SldWorks.ISketchPoint

'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    If Rrc_Nstep_RightRightRrapezoid = 2 Then
'                        Right_rightRrapezoid_cut_Moudle（line004, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 3 Then
'                        Right_rightRrapezoid_cut_Moudle（line006, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 4 Then
'                        Right_rightRrapezoid_cut_Moudle（line008, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 5 Then
'                        Right_rightRrapezoid_cut_Moudle（line0010, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 6 Then
'                        Right_rightRrapezoid_cut_Moudle（line0012, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 7 Then
'                        Right_rightRrapezoid_cut_Moudle（line0014, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 8 Then
'                        Right_rightRrapezoid_cut_Moudle（line0016, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 9 Then
'                        Right_rightRrapezoid_cut_Moudle（line0018, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 10 Then
'                        Right_rightRrapezoid_cut_Moudle（line0020, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 11 Then
'                        Right_rightRrapezoid_cut_Moudle（line0022, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 12 Then
'                        Right_rightRrapezoid_cut_Moudle（line0024, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 13 Then
'                        Right_rightRrapezoid_cut_Moudle（line0026, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 14 Then
'                        Right_rightRrapezoid_cut_Moudle（line0028, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rrc_Nstep_RightRightRrapezoid = 15 Then
'                        Right_rightRrapezoid_cut_Moudle（line0030, Rrc_TrapezoidBaseLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidTopLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                End Sub
'                Public Sub Left_rightRrapezoid_cut（Lrc_Nstep_LeftRightRrapezoid#, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    'Public Sub 左直角梯形切除（N阶左直角梯形#, 梯形底边水平距离#, 梯形竖直距离#, 梯形上边水平距离#, 第N类标注#, 标注在第N层#）
'                    Lrc_TrapezoidTopLineLength = Lrc_TrapezoidTopLineLength / 1000 ： Lrc_TrapezoidHeight = Lrc_TrapezoidHeight / 1000 ： Lrc_TrapezoidBaseLineLength = Lrc_TrapezoidBaseLineLength / 1000 ： TolMax = TolMax / 1000 ： TolMin = TolMin / 1000
'                    Dim point1 As SldWorks.ISketchPoint
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    If Lrc_Nstep_LeftRightRrapezoid# = 1 Then
'                        point1 = line002.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 2 Then
'                        point1 = line004.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 3 Then
'                        point1 = line006.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 4 Then
'                        point1 = line008.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 5 Then
'                        point1 = line0010.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 6 Then
'                        point1 = line0012.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 7 Then
'                        point1 = line0014.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 8 Then
'                        point1 = line0016.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 9 Then
'                        point1 = line0018.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 10 Then
'                        point1 = line0020.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 11 Then
'                        point1 = line0022.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 12 Then
'                        point1 = line0024.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 13 Then
'                        point1 = line0026.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lrc_Nstep_LeftRightRrapezoid# = 14 Then
'                        point1 = line0028.GetStartPoint2()
'                        Left_rightRrapezoid_cut_Moudle（point1, Lrc_TrapezoidBaseLineLength#, Lrc_TrapezoidHeight#, Lrc_TrapezoidTopLineLength#, Lrc_NclassMark#, Lrc_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                End Sub
'                Public Sub Standard_circle_cut(Scc_NstepCut#, Scc_NstepCut_Width#, Scc_NstepCut_Depth#, Scc_FilletRadius#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ' Public Sub 标准环切圆(N阶环切#, N阶环切宽#, N阶环切深度#, 圆角半径#, 是否标注#, 标注在第N层#)
'                    Scc_NstepCut_Width = Scc_NstepCut_Width / 1000 ： Scc_NstepCut_Depth = Scc_NstepCut_Depth / 1000 ： Scc_FilletRadius = Scc_FilletRadius / 1000
'                    Dim point1, point2 As SldWorks.ISketchPoint

'                    If Scc_NstepCut = 1 Then
'                        point1 = line002.GetEndPoint2()
'                        point2 = line003.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#, Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 2 Then
'                        point1 = line004.GetEndPoint2()
'                        point2 = line005.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 3 Then
'                        point1 = line006.GetEndPoint2()
'                        point2 = line007.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 4 Then
'                        point1 = line008.GetEndPoint2()
'                        point2 = line009.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 5 Then
'                        point1 = line0010.GetEndPoint2()
'                        point2 = line0011.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 6 Then
'                        point1 = line0012.GetEndPoint2()
'                        point2 = line0013.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 7 Then
'                        point1 = line0014.GetEndPoint2()
'                        point2 = line0015.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 8 Then
'                        point1 = line0016.GetEndPoint2()
'                        point2 = line0017.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 9 Then
'                        point1 = line0018.GetEndPoint2()
'                        point2 = line0019.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 10 Then
'                        point1 = line0020.GetEndPoint2()
'                        point2 = line0021.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 11 Then
'                        point1 = line0022.GetEndPoint2()
'                        point2 = line0023.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 12 Then
'                        point1 = line0024.GetEndPoint2()
'                        point2 = line0025.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 13 Then
'                        point1 = line0026.GetEndPoint2()
'                        point2 = line0027.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    ElseIf Scc_NstepCut = 14 Then
'                        point1 = line0028.GetEndPoint2()
'                        point2 = line0029.GetEndPoint2()
'                        If point1.Y < point2.Y Then
'                            Standard_circle_cut_Module(point1, point1, False, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        ElseIf point1.Y > point2.Y Then
'                            Standard_circle_cut_Module(point2, point1, True, Scc_NstepCut_Width#, Scc_NstepCut_Depth#)
'                        End If
'                        Standard_circle_cut_FilletAndChamfer_Module(Scc_FilletRadius#， Scc_NstepCut_Width#, point1, Scc_NstepCut_Depth#, Scc_NclassMark#, Scc_NlayerMark#)
'                    End If
'                End Sub
'                Public Sub Nonstandard_circle_cut_Left(NccL_NstepCut#, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_BottomFilletRadius#, NccL_NclassMark#, NccL_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "", Optional NccL_TopChamfer# = 0, Optional NccL_TopChamferLength# = 0) '切除方向1为左边，2为右边。非标准环切圆左为距离N阶终点点处开始。上倒角为左轴肩的倒角。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                    ' Public Sub 非标准环切圆(N阶处#, 距N阶起点距离#, N阶环切宽#, N阶环切深度#, 切除方向#, 底圆角半径#, 第N类标注#, 标注在第N层#, Optional 上倒角# = 0, Optional 上倒角半径# = 0) '切除方向1为左边，2为右边。非标准环切圆左为距离N阶终点点处开始。上倒角为左轴肩的倒角。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                    NccL_DistanceFromNstepStartPoint = NccL_DistanceFromNstepStartPoint / 1000 ： NccL_NstepCut_Width = NccL_NstepCut_Width / 1000 ： NccL_NstepCut_Depth = NccL_NstepCut_Depth / 1000 ： NccL_BottomFilletRadius = NccL_BottomFilletRadius / 1000 ： TolMax = TolMax / 1000 ： TolMin = TolMin / 1000 ： NccL_TopChamferLength = NccL_TopChamferLength / 1000
'                    If NccL_NstepCut = 1 Then
'                        Nonstandard_circle_cut_Left_Module(line002, SketchSegment001, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 2 Then
'                        Nonstandard_circle_cut_Left_Module(line004, SketchSegment003, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 3 Then
'                        Nonstandard_circle_cut_Left_Module(line006, SketchSegment005, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 4 Then
'                        Nonstandard_circle_cut_Left_Module(line008, SketchSegment007, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 5 Then
'                        Nonstandard_circle_cut_Left_Module(line0010, SketchSegment009, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 6 Then
'                        Nonstandard_circle_cut_Left_Module(line0012, SketchSegment0011, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 7 Then
'                        Nonstandard_circle_cut_Left_Module(line0014, SketchSegment0013, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 8 Then
'                        Nonstandard_circle_cut_Left_Module(line0016, SketchSegment0015, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 9 Then
'                        Nonstandard_circle_cut_Left_Module(line0018, SketchSegment0017, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 10 Then
'                        Nonstandard_circle_cut_Left_Module(line0020, SketchSegment0019, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 11 Then
'                        Nonstandard_circle_cut_Left_Module(line0022, SketchSegment0021, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 12 Then
'                        Nonstandard_circle_cut_Left_Module(line0024, SketchSegment0023, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 13 Then
'                        Nonstandard_circle_cut_Left_Module(line0026, SketchSegment0025, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 14 Then
'                        Nonstandard_circle_cut_Left_Module(line0028, SketchSegment0027, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccL_NstepCut = 15 Then
'                        Nonstandard_circle_cut_Left_Module(line0030, SketchSegment0029, NccL_DistanceFromNstepStartPoint#, NccL_NstepCut_Width#, NccL_NstepCut_Depth#, NccL_CutDirection#, NccL_NclassMark#, NccL_NlayerMark#, NccL_BottomFilletRadius#, NccL_TopChamfer#, NccL_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                End Sub
'                Public Sub Nonstandard_circle_cut_Right(NccR_NstepCut#, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_BottomFilletRadius#, NccR_NclassMark#, NccR_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "", Optional NccR_TopChamfer# = 0, Optional NccR_TopChamferLength# = 0) '切除方向1为左边，2为右边。非标准环切圆左为距离N阶终点点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。第N类标注有三类是位置不同，层数为调整上下位置
'                    'Public Sub 非标准环切圆右(N阶处#, 距N阶终点距离#, N阶环切宽#, N阶环切深度#, 切除方向#, 底圆角半径#, 第N类标注#, 标注在第N层#, Optional 上倒角# = 0, Optional 上倒角半径# = 0) '切除方向1为左边，2为右边。非标准环切圆左为距离N阶终点点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。第N类标注有三类是位置不同，层数为调整上下位置
'                    NccR_DistanceFromNstepEndPoint = NccR_DistanceFromNstepEndPoint / 1000 ： NccR_NstepCut_Width = NccR_NstepCut_Width / 1000 ： NccR_NstepCut_Depth# = NccR_NstepCut_Depth / 1000 ： NccR_BottomFilletRadius = NccR_BottomFilletRadius# / 1000 ： TolMax = TolMax / 1000 ： TolMin = TolMin / 1000 ： NccR_TopChamferLength = NccR_TopChamferLength / 1000
'                    If NccR_NstepCut = 1 Then
'                        Nonstandard_circle_cut_Right_Module(line002, SketchSegment003, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 2 Then
'                        Nonstandard_circle_cut_Right_Module(line004, SketchSegment005, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 3 Then
'                        Nonstandard_circle_cut_Right_Module(line006, SketchSegment007, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 4 Then
'                        Nonstandard_circle_cut_Right_Module(line008, SketchSegment009, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 5 Then
'                        Nonstandard_circle_cut_Right_Module(line0010, SketchSegment0011, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 6 Then
'                        Nonstandard_circle_cut_Right_Module(line0012, SketchSegment0013, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 7 Then
'                        Nonstandard_circle_cut_Right_Module(line0014, SketchSegment0015, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 8 Then
'                        Nonstandard_circle_cut_Right_Module(line0016, SketchSegment0017, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 9 Then
'                        Nonstandard_circle_cut_Right_Module(line0018, SketchSegment0019, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 10 Then
'                        Nonstandard_circle_cut_Right_Module(line0020, SketchSegment0021, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 11 Then
'                        Nonstandard_circle_cut_Right_Module(line0022, SketchSegment0023, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 12 Then
'                        Nonstandard_circle_cut_Right_Module(line0024, SketchSegment0025, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 13 Then
'                        Nonstandard_circle_cut_Right_Module(line0026, SketchSegment0027, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NccR_NstepCut = 14 Then
'                        Nonstandard_circle_cut_Right_Module(line0028, SketchSegment0029, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                End Sub
'                Public Sub Circle_cutAndNstep_keyway(CcK_NstepCut#, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_BottomFilletRadius#, NccR_NclassMark#, NccR_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "", Optional NccR_TopChamfer# = 0, Optional NccR_TopChamferLength# = 0)
'                    If CcK_NstepCut# = 1 Then
'                        Nonstandard_circle_cut_Right_Module(line002, SketchSegment003, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 2 Then
'                        Nonstandard_circle_cut_Right_Module(line004, SketchSegment005, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 3 Then
'                        Nonstandard_circle_cut_Right_Module(line006, SketchSegment007, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 4 Then
'                        Nonstandard_circle_cut_Right_Module(line008, SketchSegment009, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 5 Then
'                        Nonstandard_circle_cut_Right_Module(line0010, SketchSegment0011, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 6 Then
'                        Nonstandard_circle_cut_Right_Module(line0012, SketchSegment0013, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 7 Then
'                        Nonstandard_circle_cut_Right_Module(line0014, SketchSegment0015, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 8 Then
'                        Nonstandard_circle_cut_Right_Module(line0016, SketchSegment0017, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 9 Then
'                        Nonstandard_circle_cut_Right_Module(line0018, SketchSegment0019, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 10 Then
'                        Nonstandard_circle_cut_Right_Module(line0020, SketchSegment0021, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 11 Then
'                        Nonstandard_circle_cut_Right_Module(line0022, SketchSegment0023, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 12 Then
'                        Nonstandard_circle_cut_Right_Module(line0024, SketchSegment0025, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 13 Then
'                        Nonstandard_circle_cut_Right_Module(line0026, SketchSegment0027, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf CcK_NstepCut# = 14 Then
'                        Nonstandard_circle_cut_Right_Module(line0028, SketchSegment0029, NccR_DistanceFromNstepEndPoint#, NccR_NstepCut_Width#, NccR_NstepCut_Depth#, NccR_CutDirection#, NccR_NclassMark#, NccR_NlayerMark#, NccR_BottomFilletRadius#, NccR_TopChamfer#, NccR_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If


'                End Sub

'                'Public Function Circle_cutAndNstep_keyway_Module(CckM_NstepHorizontalLine As SldWorks.SketchLine, CckM_NstepAfterVerticalLine As SldWorks.SketchSegment, NccRM_DistanceFromNstepEndpoint#, NccRM_NstepCut_Width#, NccRM_NstepCut_Depth#, NccRM_CutDirection#, NccRM_NclassMark#, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                '    'Public Function 非标准环切圆右模块(N阶水平线 As SldWorks.SketchLine, N阶后竖直线 As SldWorks.SketchSegment, 距N阶终点距离#, N阶环切宽#, N阶环切深度#, 切除方向#, 第N类标注#, 标注在第N层#, 底圆角半径#, 上倒角#, 上倒角半径#)

'                '    Dim arc1Segment As SldWorks.SketchSegment
'                '    Dim point1 As SldWorks.ISketchPoint
'                '    Dim 基准面1 As SldWorks.Feature

'                '    point1 = CckM_NstepHorizontalLine.GetEndPoint2
'                '    基准面1 = DatumPlane("右视", 8, point1.X - NccRM_DistanceFromNstepEndpoint, 0, 0, 0)
'                '    基准面1.Select2(False, 2)
'                '    SketchManager.InsertSketch(True)
'                '    基准面1.Select2(False, 2)
'                '    part.BlankRefGeom()
'                '    arc1Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, point1.Y - NccRM_NstepCut_Depth)
'                '    SketchManager.InsertSketch(True)
'                '    arc1Segment.Select4(False, Nothing)
'                '    If NccRM_CutDirection = 1 Then
'                '        Feature = part.FeatureManager.FeatureCut4(True, True, False, 0, 0, NccRM_NstepCut_Width, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)  '反向切除
'                '        Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                '        face002 = Feature.GetFaces()
'                '        part.ClearSelection2(True)
'                '        If NccRM_NclassMark = 0 Then
'                '            Nonstandard_circle_cut_Right_DimensionModule_2(NccRM_NstepCut_Width#, point1, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#)
'                '        ElseIf NccRM_NclassMark = 1 Then
'                '            Nonstandard_circle_cut_Right_DimensionModule_0(NccRM_NstepCut_Width#, point1, arc1Segment, CckM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                '        ElseIf NccRM_NclassMark = 2 Then    'point1.X - 距N阶终点距离 - N阶环切宽 - 标注在第N层# * 0.015
'                '            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, CckM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, point1.X - NccRM_DistanceFromNstepEndpoint - NccRM_NstepCut_Width - NccRM_NlayerMark# * 0.003, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                '        ElseIf NccRM_NclassMark = 3 Then    'point1.X - 距N阶终点距离 + 标注在第N层# * 0.015
'                '            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, CckM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, point1.X - NccRM_DistanceFromNstepEndpoint + NccRM_NlayerMark# * 0.003, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                '        ElseIf NccRM_NclassMark = 4 Then

'                '        End If
'                '        ElseIf NccRM_CutDirection = 2 Then
'                '            Feature = part.FeatureManager.FeatureCut4(True, True, True, 0, 0, NccRM_NstepCut_Width, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False) '反向切除
'                '        Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                '        face002 = Feature.GetFaces()
'                '        part.ClearSelection2(True)
'                '        If NccRM_NclassMark = 1 Then
'                '            Nonstandard_circle_cut_Right_DimensionModule_0(NccRM_NstepCut_Width#, point1, arc1Segment, CckM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                '        ElseIf NccRM_NclassMark = 2 Then    'point1.X - 距N阶终点距离 - N阶环切宽 - 标注在第N层# * 0.015
'                '            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, CckM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, point1.X - NccRM_DistanceFromNstepEndpoint - NccRM_NstepCut_Width - NccRM_NlayerMark# * 0.015, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                '        ElseIf NccRM_NclassMark = 3 Then    'point1.X - 距N阶终点距离 + 标注在第N层# * 0.015
'                '            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, CckM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, point1.X - NccRM_DistanceFromNstepEndpoint + NccRM_NlayerMark# * 0.015, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                '        End If
'                '    End If
'                'End Function
'                Public Sub Left_overstep_keyway(Lok_NstepLeftOverstep#, Lok_DistanceBetweenKeywayDomeAndNstep#, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    'Public Sub 左越阶键槽(N阶处左越阶#, 越阶圆顶距越阶距离#, 越阶圆半径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    Lok_DistanceBetweenKeywayDomeAndNstep = Lok_DistanceBetweenKeywayDomeAndNstep / 1000 ： Lok_KeywayCircleDiameter = Lok_KeywayCircleDiameter / 1000 ： Lok_KeywayLength = Lok_KeywayLength / 1000 ： Lok_ReducingGrooveDepthDiameter = Lok_ReducingGrooveDepthDiameter / 1000
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    If Lok_NstepLeftOverstep = 2 Then
'                        point1 = line004.GetStartPoint2()
'                        point2 = line002.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 3 Then
'                        point1 = line006.GetStartPoint2()
'                        point2 = line004.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 4 Then
'                        point1 = line008.GetStartPoint2()
'                        point2 = line006.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 5 Then
'                        point1 = line0010.GetStartPoint2()
'                        point2 = line008.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 6 Then
'                        point1 = line0012.GetStartPoint2()
'                        point2 = line0010.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 7 Then
'                        point1 = line0014.GetStartPoint2()
'                        point2 = line0012.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 8 Then
'                        point1 = line0016.GetStartPoint2()
'                        point2 = line0014.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 9 Then
'                        point1 = line0018.GetStartPoint2()
'                        point2 = line0016.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 10 Then
'                        point1 = line0020.GetStartPoint2()
'                        point2 = line0018.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 11 Then
'                        point1 = line0022.GetStartPoint2()
'                        point2 = line0020.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 12 Then
'                        point1 = line0024.GetStartPoint2()
'                        point2 = line0022.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 13 Then
'                        point1 = line0026.GetStartPoint2()
'                        point2 = line0024.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 14 Then
'                        point1 = line0028.GetStartPoint2()
'                        point2 = line0026.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    ElseIf Lok_NstepLeftOverstep = 15 Then
'                        point1 = line0030.GetStartPoint2()
'                        point2 = line0028.GetEndPoint2()
'                        Left_overstep_keyway_Module(Lok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Lok_KeywayCircleDiameter#, Lok_KeywayLength#, Lok_ReducingGrooveDepthDiameter#, Lok_NclassMark#, Lok_NlayerMark#)
'                    End If
'                End Sub
'                Public Sub Right_overstep_keyway(Rok_NstepRightOverstep#, Rok_DistanceBetweenKeywayDomeAndNstep#, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    'Public Sub 右越阶键槽(N阶处右越阶#, 越阶圆顶距越阶距离#, 越阶圆半径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    Rok_DistanceBetweenKeywayDomeAndNstep = Rok_DistanceBetweenKeywayDomeAndNstep / 1000 ： Rok_KeywayCircleRadius = Rok_KeywayCircleRadius / 1000 ： Rok_KeywayLength = Rok_KeywayLength / 1000 ： Rok_ReducingGrooveDepthDiameter = Rok_ReducingGrooveDepthDiameter / 1000
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    If Rok_NstepRightOverstep# = 2 Then
'                        point1 = line004.GetEndPoint2()
'                        point2 = line006.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 3 Then
'                        point1 = line006.GetEndPoint2()
'                        point2 = line008.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 4 Then
'                        point1 = line008.GetEndPoint2()
'                        point2 = line0010.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 5 Then
'                        point1 = line0010.GetEndPoint2()
'                        point2 = line0012.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 6 Then
'                        point1 = line0012.GetEndPoint2()
'                        point2 = line0014.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 7 Then
'                        point1 = line0014.GetEndPoint2()
'                        point2 = line0016.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 8 Then
'                        point1 = line0016.GetEndPoint2()
'                        point2 = line0018.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 9 Then
'                        point1 = line0018.GetEndPoint2()
'                        point2 = line0020.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 10 Then
'                        point1 = line0020.GetEndPoint2()
'                        point2 = line0022.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 11 Then
'                        point1 = line0022.GetEndPoint2()
'                        point2 = line0024.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 12 Then
'                        point1 = line0024.GetEndPoint2()
'                        point2 = line0026.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 13 Then
'                        point1 = line0026.GetEndPoint2()
'                        point2 = line0028.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    ElseIf Rok_NstepRightOverstep# = 14 Then
'                        point1 = line0028.GetEndPoint2()
'                        point2 = line0030.GetStartPoint2()
'                        Right_overstep_keyway_Module(Rok_DistanceBetweenKeywayDomeAndNstep#, point1, point2, Rok_KeywayCircleRadius#, Rok_KeywayLength#, Rok_ReducingGrooveDepthDiameter#, Rok_NclassMark#, Rok_NlayerMark#)
'                    End If
'                End Sub
'                Public Sub Nstep_keyway_Right(NkR_Nstep#, NkR_DistanceBetweenKeywayDomeRAndNstepR#, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                    'Public Sub N阶键槽右（N阶处#, 右侧圆顶距N阶右侧距离#, 圆直径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    NkR_DistanceBetweenKeywayDomeRAndNstepR = NkR_DistanceBetweenKeywayDomeRAndNstepR / 1000 ： NkR_KeywayCircleDiameter = NkR_KeywayCircleDiameter / 1000 ： NkR_KeywayLength = NkR_KeywayLength / 1000 ： NkR_ReducingGrooveDepthDiameter = NkR_ReducingGrooveDepthDiameter / 1000
'                    Dim point1 As SldWorks.ISketchPoint
'                    Select Case NkR_Nstep
'                        Case 1
'                            point1 = line002.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 2
'                            point1 = line004.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 3
'                            point1 = line006.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 4
'                            point1 = line008.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 5
'                            point1 = line0010.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 6
'                            point1 = line0012.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 7
'                            point1 = line0014.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 8
'                            point1 = line0016.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 9
'                            point1 = line0018.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 10
'                            point1 = line0020.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 11
'                            point1 = line0022.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 12
'                            point1 = line0024.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 13
'                            point1 = line0026.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                        Case 14
'                            point1 = line0028.GetEndPoint2()
'                            Nstep_keyway_Right_Module(NkR_DistanceBetweenKeywayDomeRAndNstepR#, point1, NkR_KeywayCircleDiameter#, NkR_KeywayLength#, NkR_ReducingGrooveDepthDiameter#, NkR_NclassMark#, NkR_NlayerMark#)
'                    End Select
'                End Sub
'                Public Sub Nstep_keyway_Left（NkL_Nstep#, NkL_DistanceBetweenKeywayDomeLAndNstepL#, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                    'Public Sub N阶键槽左（N阶处#, 左侧圆顶距N阶左侧距离#, 圆直径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    NkL_DistanceBetweenKeywayDomeLAndNstepL = NkL_DistanceBetweenKeywayDomeLAndNstepL / 1000 ： NkL_KeywayCircleDiameter = NkL_KeywayCircleDiameter / 1000 ： NkL_KeywayLength = NkL_KeywayLength / 1000 ： NkL_ReducingGrooveDepthDiameter = NkL_ReducingGrooveDepthDiameter / 1000
'                    Dim point1 As SldWorks.ISketchPoint
'                    Select Case NkL_Nstep
'                        Case 2
'                            point1 = line004.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 3
'                            point1 = line006.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 4
'                            point1 = line008.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 5
'                            point1 = line0010.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 6
'                            point1 = line0012.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 7
'                            point1 = line0014.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 8
'                            point1 = line0016.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 9
'                            point1 = line0018.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 10
'                            point1 = line0020.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 11
'                            point1 = line0022.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 12
'                            point1 = line0024.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 13
'                            point1 = line0026.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                        Case 14
'                            point1 = line0028.GetStartPoint2()
'                            Nstep_keyway_Left_Module(NkL_DistanceBetweenKeywayDomeLAndNstepL#, point1, NkL_KeywayCircleDiameter#, NkL_KeywayLength#, NkL_ReducingGrooveDepthDiameter#, NkL_NclassMark#, NkL_NlayerMark#)
'                    End Select
'                End Sub
'                Public Sub NstepKeyway_NonCircleCut_ChamferCut(NNC_Nstep#, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")

'                    NNC_ChamferHorizontalDistance = NNC_ChamferHorizontalDistance / 1000 : NNC_ChamferVerticalDistance = NNC_ChamferVerticalDistance / 1000 : NNC_Distance_ChamferHorEndPointAndNonCircle = NNC_Distance_ChamferHorEndPointAndNonCircle / 1000 : NNC_NstepCut_Width = NNC_NstepCut_Width / 1000 : NNC_NstepCut_Depth = NNC_NstepCut_Depth / 1000 : NNC_Distance_NonCircleLAndKeywayDomeR = NNC_Distance_NonCircleLAndKeywayDomeR / 1000
'                    NNC_KeywayCircleDiameter = NNC_KeywayCircleDiameter / 1000 : NNC_KeywayLength = NNC_KeywayLength / 1000 : NNC_ReducingGrooveDepthDiameter = NNC_ReducingGrooveDepthDiameter / 1000 ： TolMax = TolMax / 1000 ： TolMin = TolMin / 1000

'                    If NNC_Nstep = 1 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line002, line005, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 2 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line004, line007, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 3 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line006, line009, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 4 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line008, line0011, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 5 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0010, line0013, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 6 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0012, line0015, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 7 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0014, line0017, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 8 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0016, line0019, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 9 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0018, line0021, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 10 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0020, line0023, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 11 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0022, line0025, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 12 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0024, line0027, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf NNC_Nstep = 13 Then
'                        NstepKeyway_NonCircleCut_ChamferCut_Module(line0026, line0029, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomeR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If

'                End Sub
'                Public Function NstepKeyway_NonCircleCut_ChamferCut_Module(NNC_NstepHorizontalLine As SldWorks.SketchLine, NNCM_NstepAfterVerticalLine As SldWorks.SketchLine, NNC_ChamferHorizontalDistance#, NNC_ChamferVerticalDistance#, NNC_Distance_ChamferHorEndPointAndNonCircle#, NNC_NstepCut_Width#, NNC_NstepCut_Depth#, NNC_Distance_NonCircleLAndKeywayDomerR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "", Optional NccL_TopChamfer# = 0, Optional NccL_TopChamferLength# = 0)
'                    Dim point1, point2, point3, point01 As SldWorks.ISketchPoint
'                    Dim line1, line2, line3 As SldWorks.SketchLine
'                    Dim line1Segment, arc1Segment As SldWorks.SketchSegment
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim 基准面1 As SldWorks.Feature
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    Feature = part.SketchManager.ActiveSketch
'                    'MsgBox(Feature.Name)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    point1 = NNC_NstepHorizontalLine.GetEndPoint2()
'                    point1.Select4(False, Nothing)
'                    line1 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X - NNC_ChamferHorizontalDistance#, point1.Y, 0)  '第1条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X, point1.Y - NNC_ChamferVerticalDistance#, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(point1.X, point1.Y - NNC_ChamferVerticalDistance#, 0, point1.X - NNC_ChamferHorizontalDistance#, point1.Y, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line1Segment = line1
'                    line1Segment.Select4(False, Nothing)
'                    Displaydimention = part.AddDimension2(point1.X + 0.005, -MaxValue_diameter - 0.006, 0) '倒角长标注
'                    part.ClearSelection2(True)
'                    line1Segment = line1
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, PI * 2, 0, False, False, 0, 0, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False

'                    point2 = line1.GetEndPoint2
'                    基准面1 = DatumPlane("右视", 8, point2.X - NNC_Distance_ChamferHorEndPointAndNonCircle#, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    point3 = part.SketchManager.CreatePoint(0, point1.Y, 0)
'                    arc1Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, point1.Y - NNC_NstepCut_Depth#)
'                    SketchManager.InsertSketch(True)
'                    arc1Segment.Select4(False, Nothing)
'                    Feature = part.FeatureManager.FeatureCut4(True, True, False, 0, 0, NNC_NstepCut_Width#, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)  '反向切除
'                    Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                    face002 = Feature.GetFaces()
'                    part.ClearSelection2(True)
'                    Nonstandard_circle_cut_Right_DimensionModule_2(NNC_NstepCut_Width#, point1, NNC_NstepCut_Depth#, NNC_NlayerMark#, NNC_ChamferHorizontalDistance# + NNC_Distance_ChamferHorEndPointAndNonCircle#)

'                    point2.Select4(False, Nothing)
'                    point3.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(point2.X + 0.015, -MaxValue_diameter - 0.014, 0)
'                    point01 = NNC_NstepHorizontalLine.GetStartPoint2()
'                    NstepKeyway_NonCircleCut_ChamferCut_Module1(NNC_ChamferHorizontalDistance + NNC_NstepCut_Width + NNC_Distance_NonCircleLAndKeywayDomerR# + NNC_Distance_ChamferHorEndPointAndNonCircle#, point1, NNCM_NstepAfterVerticalLine, point01, arc1Segment, NNC_Distance_NonCircleLAndKeywayDomerR#, NNC_KeywayCircleDiameter#, NNC_KeywayLength#, NNC_ReducingGrooveDepthDiameter#, NNC_NclassMark#, NNC_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)

'                End Function
'                Public Function NstepKeyway_NonCircleCut_ChamferCut_Module1(NNCM_DistanceBetweenKeywayDomeRAndNstepR#, NNCM_NstepHorizontalLineEndpoint As SldWorks.SketchPoint, NNCM_NstepAfterVerticalLine As SldWorks.SketchLine, NNCM_NstepHorizontalLineStartpoint As SldWorks.SketchPoint, NNCM_NstepNonCirCutR As SldWorks.SketchSegment, NNCM_Distance_NonCircleLAndKeywayDomerR#, NNCM_KeywayCircleDiameter#, NNCM_KeywayLength#, NNCM_ReducingGrooveDepthDiameter#, NNCM_NclassMark#, NNCM_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    Dim line1, line2 As SldWorks.SketchLine
'                    Dim arc01Segment, arc02Segment, line1Segment, line2Segment, line3Segment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6, point7, point8, point9, point10 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim SketchArc1, SketchArc2, SketchArc3 As SldWorks.SketchArc
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object


'                    基准面1 = DatumPlane("前视", 8, NNCM_ReducingGrooveDepthDiameter - NNCM_NstepHorizontalLineEndpoint.Y, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    Feature = part.SketchManager.ActiveSketch
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    line1 = part.SketchManager.CreateLine(NNCM_NstepHorizontalLineEndpoint.X - NNCM_DistanceBetweenKeywayDomeRAndNstepR - NNCM_KeywayCircleDiameter / 2, NNCM_KeywayCircleDiameter / 2, 0, NNCM_NstepHorizontalLineEndpoint.X - NNCM_DistanceBetweenKeywayDomeRAndNstepR - NNCM_KeywayLength + NNCM_KeywayCircleDiameter / 2, NNCM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(NNCM_NstepHorizontalLineEndpoint.X - NNCM_DistanceBetweenKeywayDomeRAndNstepR - NNCM_KeywayCircleDiameter / 2, -NNCM_KeywayCircleDiameter / 2, 0, NNCM_NstepHorizontalLineEndpoint.X - NNCM_DistanceBetweenKeywayDomeRAndNstepR - NNCM_KeywayLength + NNCM_KeywayCircleDiameter / 2, -NNCM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc01Segment = part.SketchManager.CreateTangentArc(NNCM_NstepHorizontalLineEndpoint.X - NNCM_DistanceBetweenKeywayDomeRAndNstepR - NNCM_KeywayCircleDiameter / 2, NNCM_KeywayCircleDiameter / 2, 0, NNCM_NstepHorizontalLineEndpoint.X - NNCM_DistanceBetweenKeywayDomeRAndNstepR - NNCM_KeywayCircleDiameter / 2, -NNCM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc02Segment = part.SketchManager.CreateTangentArc(NNCM_NstepHorizontalLineEndpoint.X - NNCM_DistanceBetweenKeywayDomeRAndNstepR - NNCM_KeywayLength + NNCM_KeywayCircleDiameter / 2, NNCM_KeywayCircleDiameter / 2, 0, NNCM_NstepHorizontalLineEndpoint.X - NNCM_DistanceBetweenKeywayDomeRAndNstepR - NNCM_KeywayLength + NNCM_KeywayCircleDiameter / 2, -NNCM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    SketchArc1 = arc01Segment
'                    SketchArc2 = arc02Segment
'                    point3 = SketchArc1.GetCenterPoint2
'                    point4 = SketchArc2.GetCenterPoint2
'                    point5 = part.SketchManager.CreatePoint(point3.X + NNCM_KeywayCircleDiameter / 2, 0, 0)
'                    point6 = part.SketchManager.CreatePoint(point5.X + NNCM_Distance_NonCircleLAndKeywayDomerR#, 0, 0)
'                    point5.Select4(True, Nothing)
'                    Select Case NNCM_NclassMark
'                        Case 1
'                            Displaydimention = part.AddDimension2(point3.X + NNCM_KeywayCircleDiameter / 2 + NNCM_Distance_NonCircleLAndKeywayDomerR# + 0.01, -MaxValue_diameter - 0.02, 0)
'                            Displaydimention.CenterText = True
'                    End Select
'                    part.ClearSelection2(True)
'                    point7 = part.SketchManager.CreatePoint(point4.X - NNCM_KeywayCircleDiameter / 2, 0, 0)
'                    point5.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.01 - NNCM_NlayerMark# * 0.005, 0)
'                    Displaydimention.CenterText = True

'                    arc01Segment.Select4(False, Nothing)
'                    arc02Segment.Select4(True, Nothing)
'                    line1Segment = line1
'                    line2Segment = line2
'                    line1Segment.Select4(True, Nothing)
'                    line2Segment.Select4(True, Nothing)
'                    part.FeatureManager.FeatureCut4(True, False, True, 1, 0, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    point8 = part.SketchManager.CreatePoint(NNCM_NstepHorizontalLineStartpoint.X, 0, 0)
'                    part.ClearSelection2(True)
'                    SketchArc3 = NNCM_NstepNonCirCutR
'                    point9 = SketchArc3.GetCenterPoint2
'                    SketchManager.InsertSketch(True)
'                    point9.Select4(False, Nothing)
'                    point8.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(point8.X, -MaxValue_diameter - 0.03 - NNCM_NlayerMark# * 0.01, 0) '第一阶长标注
'                    part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                    Displaydimention.CenterText = True   '自动居中
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)

'                    line3Segment = NNCM_NstepAfterVerticalLine

'                    point9.Select4(False, Nothing)
'                    line3Segment.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(NNCM_NstepHorizontalLineEndpoint.X, -MaxValue_diameter - 0.03 - NNCM_NlayerMark# * 0.01, 0) '第一阶长标注
'                    Displaydimention.CenterText = True   '自动居中
'                    part.ClearSelection2(True)
'                End Function
'                Public Sub Right_halfKeyway（Rh_Nstep#, Rh_KeywayCircleDiameter#, Rh_KeywayLength#, Rh_ReducingGrooveDepthDiameter#, Rh_NclassMark#, Rh_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    'Public Sub 右半键槽（N阶处#, 圆直径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    Rh_KeywayCircleDiameter = Rh_KeywayCircleDiameter / 1000 ： Rh_KeywayLength = Rh_KeywayLength / 1000 ： Rh_ReducingGrooveDepthDiameter = Rh_ReducingGrooveDepthDiameter / 1000 ： TolMax = TolMax / 1000 ： TolMin = TolMin / 1000
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    If Rh_Nstep = 1 Then
'                        point1 = line002.GetStartPoint2()
'                        point2 = line002.GetEndPoint2()
'                        Right_halfKeyway_Moudle（point1, point2, Rh_KeywayCircleDiameter#, Rh_KeywayLength#, Rh_ReducingGrooveDepthDiameter#, Rh_NclassMark#, Rh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rh_Nstep = 2 Then
'                        point1 = line004.GetStartPoint2()
'                        point2 = line004.GetEndPoint2()
'                        Right_halfKeyway_Moudle（point1, point2, Rh_KeywayCircleDiameter#, Rh_KeywayLength#, Rh_ReducingGrooveDepthDiameter#, Rh_NclassMark#, Rh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Rh_Nstep = 3 Then
'                        point1 = line006.GetStartPoint2()
'                        point2 = line006.GetEndPoint2()
'                        Right_halfKeyway_Moudle（point1, point2, Rh_KeywayCircleDiameter#, Rh_KeywayLength#, Rh_ReducingGrooveDepthDiameter#, Rh_NclassMark#, Rh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                End Sub
'                Public Sub Left_halfKeyway（Lh_Nstep#, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    'Public Sub 左半键槽（N阶处#, 圆直径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    Lh_KeywayCircleDiameter = Lh_KeywayCircleDiameter / 1000 ： Lh_KeywayLength = Lh_KeywayLength / 1000 ： Lh_ReducingGrooveDepthDiameter = Lh_ReducingGrooveDepthDiameter / 1000 ： TolMax = TolMax / 1000 ： TolMin = TolMin / 1000
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    If Lh_Nstep = 5 Then
'                        point1 = line0010.GetEndPoint2()
'                        point2 = line0010.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 6 Then
'                        point1 = line0012.GetEndPoint2()
'                        point2 = line0012.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 7 Then
'                        point1 = line0014.GetEndPoint2()
'                        point2 = line0014.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 8 Then
'                        point1 = line0016.GetEndPoint2()
'                        point2 = line0016.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 9 Then
'                        point1 = line0018.GetEndPoint2()
'                        point2 = line0018.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 10 Then
'                        point1 = line0020.GetEndPoint2()
'                        point2 = line0020.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 11 Then
'                        point1 = line0022.GetEndPoint2()
'                        point2 = line0022.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 12 Then
'                        point1 = line0024.GetEndPoint2()
'                        point2 = line0024.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 13 Then
'                        point1 = line0026.GetEndPoint2()
'                        point2 = line0026.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 14 Then
'                        point1 = line0028.GetEndPoint2()
'                        point2 = line0028.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf Lh_Nstep = 15 Then
'                        point1 = line0030.GetEndPoint2()
'                        point2 = line0030.GetStartPoint2()
'                        Left_halfKeyway_Moudle（point1, point2, Lh_KeywayCircleDiameter#, Lh_KeywayLength#, Lh_ReducingGrooveDepthDiameter#, Lh_NclassMark#, Lh_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                End Sub
'                Public Sub Hollowing_Left_chamfer_cut（Hlcc_Nstep_LChamfer#, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ' Public Sub 镂空左倒角切除（N阶左倒角#, 倒角水平距离#, 倒角竖直距离#, 第N类标注#, 标注在第N层#)
'                    Hlcc_ChamferHorizontalDistance = Hlcc_ChamferHorizontalDistance / 1000 ： Hlcc_ChamferVerticalDistance = Hlcc_ChamferVerticalDistance / 1000
'                    Dim point1 As SldWorks.ISketchPoint
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    If Hlcc_Nstep_LChamfer = 1 Then
'                        point1 = line01_2.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 2 Then
'                        point1 = line01_4.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 3 Then
'                        point1 = line01_6.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 4 Then
'                        point1 = line01_8.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 5 Then
'                        point1 = line01_10.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 6 Then
'                        point1 = line01_12.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 7 Then
'                        point1 = line01_14.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 8 Then
'                        point1 = line01_16.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 9 Then
'                        point1 = line01_18.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    ElseIf Hlcc_Nstep_LChamfer = 10 Then
'                        point1 = line01_20.GetStartPoint2()
'                        镂空左倒角切除模块（point1, Hlcc_ChamferHorizontalDistance#, Hlcc_ChamferVerticalDistance#, Hlcc_NclassMark#, Hlcc_NlayerMark#)
'                    End If
'                End Sub
'                Public Sub Hollowing_Right_chamfer_cut（HRcc_Nstep_RChamfer#, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    'Public Sub 镂空右倒角切除（N阶右倒角#, 倒角水平距离#, 倒角竖直距离#, 第N类标注#, 标注在第N层#)
'                    HRcc_ChamferHorizontalDistance = HRcc_ChamferHorizontalDistance / 1000 ： HRcc_ChamferVerticalDistance = HRcc_ChamferVerticalDistance / 1000
'                    Dim point1 As SldWorks.ISketchPoint
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    If HRcc_Nstep_RChamfer = 2 Then
'                        point1 = line01_4.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 3 Then
'                        point1 = line01_6.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 4 Then
'                        point1 = line01_8.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 5 Then
'                        point1 = line01_10.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 6 Then
'                        point1 = line01_12.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 7 Then
'                        point1 = line01_14.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 8 Then
'                        point1 = line01_16.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 9 Then
'                        point1 = line01_18.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 10 Then
'                        point1 = line01_20.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    ElseIf HRcc_Nstep_RChamfer = 11 Then
'                        point1 = line01_22.GetEndPoint2()
'                        镂空右倒角切除模块（point1, HRcc_ChamferHorizontalDistance#, HRcc_ChamferVerticalDistance#, HRcc_NclassMark#, HRcc_NlayerMark#)
'                    End If
'                End Sub
'                Public Sub Punch(P_HoleShape, P_BigHoleDia, P_SmallHoleDia, P_BigHoleDis, P_SmallHoleDis, P_TotLegStep)
'                    Dim line1, line2, line3, line4, line5, line01, line02 As SldWorks.SketchLine
'                    Dim SketchArc1 As SldWorks.SketchArc
'                    Dim arc1Segment, line1Segment, line2Segment, line3Segment, line4Segment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object



'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    'Feature001 = part.SketchManager.ActiveSketch
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    'swapp.SetUserPreferenceToggle(swUserPreferenceToggle_e.swSketchInference, True)
'                    If P_HoleShape = 0 Then
'                        line1Segment = part.SketchManager.CreateLine(0, 0, 0, 0, P_BigHoleDia / 2, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                        line2Segment = part.SketchManager.CreateLine(0, P_BigHoleDia / 2, 0, P_BigHoleDis, P_SmallHoleDia / 2, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                        line3Segment = part.SketchManager.CreateLine(P_BigHoleDis, P_SmallHoleDia / 2, 0, P_SmallHoleDis + P_BigHoleDis, P_SmallHoleDia / 2, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                        line4Segment = part.SketchManager.CreateLine(P_SmallHoleDis + P_BigHoleDis, P_SmallHoleDia / 2, 0, P_SmallHoleDis + P_BigHoleDis + P_SmallHoleDia / 2 * Math.Tan(PI / 6), 0, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                        line01 = part.SketchManager.CreateLine(0, 0, 0, P_SmallHoleDis + P_BigHoleDis + P_SmallHoleDia / 2 * Math.Tan(PI / 6), 0, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                    End If
'                    If P_HoleShape = 1 Then
'                        line1Segment = part.SketchManager.CreateLine(0, 0, 0, 0, P_BigHoleDia / 2, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                        line2Segment = part.SketchManager.CreateLine(0, P_BigHoleDia / 2, 0, P_BigHoleDis, P_SmallHoleDia / 2, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                        line4Segment = part.SketchManager.CreateLine(P_BigHoleDis, P_SmallHoleDia / 2, 0, P_SmallHoleDis + P_SmallHoleDia / 2 * Math.Tan(PI / 6), 0, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                        line01 = part.SketchManager.CreateLine(0, 0, 0, P_SmallHoleDis + P_SmallHoleDia / 2 * Math.Tan(PI / 6), 0, 0)
'                        part.SketchAddConstraints("sgFIXED")
'                    End If
'                    part.ClearSelection2(True)

'                    '基准面1 = DatumPlane("右视", 8, P_TotLegStep / 2 * 0.001, 0, 0, 0)
'                    part.SketchManager.CreateCenterLine(P_TotLegStep / 2 * 0.001, 0.1, 0, P_TotLegStep / 2 * 0.001, -0.1, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line1Segment.SelectChain(True, Nothing)
'                    part.SketchMirror()

'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, False, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, 2 * PI, 0, False, False, 0.01, 0.01, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                End Sub
'                Public Sub Offset_Punch(OP_OffsetCenterDis, OP_NumHole, P_SizeHole)
'                    Dim line1, line2, line3, line4, line5, line01, line02 As SldWorks.SketchLine
'                    Dim SketchArc1 As SldWorks.SketchArc
'                    Dim arc1Segment, line1Segment, line2Segment, line3Segment, line4Segment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object


'                    DatumPlane("前视", 8, OP_OffsetCenterDis, 0, 0, 0)
'                    'part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    'part.SketchManager.InsertSketch(True)
'                    ''Feature001 = part.SketchManager.ActiveSketch
'                    'part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    'part.BlankRefGeom()
'                    'swapp.SetUserPreferenceToggle(swUserPreferenceToggle_e.swSketchInference, True)
'                    'line1Segment = part.SketchManager.CreateLine(0, 0, 0, 0, P_BigHoleDia / 2, 0)
'                    'part.SketchAddConstraints("sgFIXED")
'                    'line2Segment = part.SketchManager.CreateLine(0, P_BigHoleDia / 2, 0, P_BigHoleDis, P_SmallHoleDia / 2, 0)
'                    'part.SketchAddConstraints("sgFIXED")
'                    'line3Segment = part.SketchManager.CreateLine(P_BigHoleDis, P_SmallHoleDia / 2, 0, P_SmallHoleDis + P_BigHoleDis, P_SmallHoleDia / 2, 0)
'                    'part.SketchAddConstraints("sgFIXED")
'                    'line4Segment = part.SketchManager.CreateLine(P_SmallHoleDis + P_BigHoleDis, P_SmallHoleDia / 2, 0, P_SmallHoleDis + P_BigHoleDis + P_SmallHoleDia / 2 * Math.Tan(PI / 6), 0, 0)
'                    'part.SketchAddConstraints("sgFIXED")
'                    'line01 = part.SketchManager.CreateLine(0, 0, 0, P_SmallHoleDis + P_BigHoleDis + P_SmallHoleDia / 2 * Math.Tan(PI / 6), 0, 0)

'                    'line02 = part.SketchManager.CreateCenterLine(P_TotLegStep / 2, 0.01, 0, P_TotLegStep / 2, -0.01, 0)
'                    'part.SketchAddConstraints("sgFIXED")
'                    'line1Segment.SelectChain(True, Nothing)
'                    'part.SketchMirror()

'                    'part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, False, 16, Nothing, 0)
'                    'part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, 2 * PI, 0, False, False, 0.01, 0.01, 0, 0, 0, True, True, True)
'                    'part.SelectionManager.EnableContourSelection = False
'                End Sub












'                Public Function DatumPlane(ReferencePlane$, Constraint#, Distance_or_angle#, X#, Y#, Z#) As SldWorks.Feature
'                    If Constraint = 16 Then
'                        Distance_or_angle = Distance_or_angle * PI / 180
'                    End If
'                    '基准面(参考基准面，约束，距离或角度，X，Y，Z)
'                    Dim refplane As SldWorks.Feature
'                    If ReferencePlane = "前视" Then
'                        part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        refplane = part.FeatureManager.InsertRefPlane(Constraint, Distance_or_angle#, 0, 0, 0, 0)
'                    ElseIf ReferencePlane = "上视" Then
'                        part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        refplane = part.FeatureManager.InsertRefPlane(Constraint, Distance_or_angle#, 0, 0, 0, 0)
'                    ElseIf ReferencePlane = "右视" Then
'                        part.Extension.SelectByID2("右视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        refplane = part.FeatureManager.InsertRefPlane(Constraint, Distance_or_angle#, 0, 0, 0, 0)
'                    ElseIf ReferencePlane = "" Then
'                        part.Extension.SelectByID2("", "FACE", X, Y, Z, False, 0, Nothing, 0)
'                        refplane = part.FeatureManager.InsertRefPlane(Constraint, Distance_or_angle#, 0, 0, 0, 0)
'                    End If

'                    DatumPlane = refplane
'                End Function
'                Public Function Maximum_radius(Mr_Number_steps#)
'                    '最大半径(阶梯数#)
'                    Dim MaxValue1, MaxValue2, MaxValue3, MaxValue4, MaxValue5, MaxValue6, MaxValue7, MaxValue8, MaxValue9, MaxValue10, MaxValue11, MaxValue12, MaxValue13, MaxValue As Double
'                    Select Case Mr_Number_steps
'                        Case 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
'                            MaxValue1 = Max(line002.GetStartPoint2.Y, line004.GetStartPoint2.Y)
'                            MaxValue2 = Max(MaxValue1, line006.GetStartPoint2.Y)
'                            MaxValue3 = Max(MaxValue2, line008.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 5
'                                    MaxValue = Max(MaxValue3, line0010.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue4 = Max(MaxValue3, line0010.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 6
'                                    MaxValue = Max(MaxValue4, line0012.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue5 = Max(MaxValue4, line0012.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 7
'                                    MaxValue = Max(MaxValue5, line0014.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue6 = Max(MaxValue5, line0014.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 8
'                                    MaxValue = Max(MaxValue6, line0016.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue7 = Max(MaxValue6, line0016.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 9
'                                    MaxValue = Max(MaxValue7, line0018.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue8 = Max(MaxValue7, line0018.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 10
'                                    MaxValue = Max(MaxValue8, line0020.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue9 = Max(MaxValue8, line0020.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 11
'                                    MaxValue = Max(MaxValue9, line0022.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue10 = Max(MaxValue9, line0022.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 12
'                                    MaxValue = Max(MaxValue10, line0024.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue11 = Max(MaxValue10, line0024.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 13
'                                    MaxValue = Max(MaxValue11, line0026.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue12 = Max(MaxValue11, line0026.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 14
'                                    MaxValue = Max(MaxValue12, line0028.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                            MaxValue13 = Max(MaxValue12, line0028.GetStartPoint2.Y)
'                            Select Case Mr_Number_steps
'                                Case 15
'                                    MaxValue = Max(MaxValue13, line0030.GetStartPoint2.Y)
'                                    Maximum_radius = MaxValue
'                                    Exit Function
'                            End Select
'                    End Select
'                End Function
'                Public Function DatumAxis(Datum$) As SldWorks.Feature
'                    'Public Function 基准轴(基准$) As SldWorks.Feature
'                    Dim AXIS As SldWorks.Feature
'                    Dim line1 As SldWorks.SketchLine
'                    Dim line1Segment As SldWorks.SketchSegment
'                    If Datum = "Z" Then
'                        part.Extension.SelectByID2("上视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        part.SketchManager.InsertSketch(True)
'                        line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, -0.01, 0)
'                        line1Segment = line1
'                        part.InsertSketch2(True)
'                        line1Segment.Select4(False, Nothing)
'                        part.InsertAxis2(True)
'                        AXIS = SelectionMgr.GetSelectedObject6(1, -1)
'                        AXIS.Select2(False, Nothing)
'                    End If
'                    If Datum = "一阶直径" Then
'                        part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        part.SketchManager.InsertSketch(True)
'                        line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0, 0.01, 0)
'                        line1Segment = line1
'                        part.InsertSketch2(True)
'                        line1Segment.Select4(False, Nothing)
'                        part.InsertAxis2(True)
'                        AXIS = SelectionMgr.GetSelectedObject6(1, -1)
'                        AXIS.Select2(False, Nothing)
'                    End If
'                    If Datum = "X" Then
'                        part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        part.SketchManager.InsertSketch(True)
'                        line1 = part.SketchManager.CreateCenterLine(0, 0, 0, 0.01, 0, 0)
'                        line1Segment = line1
'                        part.InsertSketch2(True)
'                        line1Segment.Select4(False, Nothing)
'                        part.InsertAxis2(True)
'                        AXIS = SelectionMgr.GetSelectedObject6(1, -1)
'                        AXIS.Select2(False, Nothing)
'                    End If
'                    AXIS = SelectionMgr.GetSelectedObject6(1, -1)
'                    DatumAxis = AXIS
'                End Function
'                Public Function Ratio_of_two_numbers(fz#, fm#) As String   '两数之比
'                    Dim fz1, fm1 As Double
'                    Dim fs As String
'                    fz1 = fz ： fm1 = fm
'                    Do
'                        If fz1 < fm1 Then fm1 -= fz1
'                        If fz1 > fm1 Then fz1 -= fm1
'                    Loop Until fz1 = fm1 '约分bai
'                    fz /= fz1
'                    fm /= fm1
'                    fs = fz & ":" & fm '此处的FZ为约分后的分子,FM为分母
'                    Ratio_of_two_numbers = fs
'                End Function
'                Public Function Initial_settings(Type#)
'                    ' Public Function 初始设置(类型#)
'                    If Type = 0 Then '关闭捕捉
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, False) '捕捉
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
'                    ElseIf Type = 1 Then '激活捕捉,打开端点和草图点
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, False) '靠近
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
'                    ElseIf Type = 2 Then '激活捕捉,打开端点和草图点
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, True) '靠近
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
'                    ElseIf Type = 3 Then '激活捕捉,打开端点和草图点
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInference, True) '捕捉
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, True)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsCenterPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsMidPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsQuadrantPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsIntersections, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsNearest, False) '靠近
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsTangent, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsPerpendicular, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsParallel, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVLines, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsHVPoints, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsLength, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsGrid, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapsAngle, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchInferFromModel, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchAutomaticRelations, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swSketchSnapToGridIfDisplayed, False)
'                        swapp.SetUserPreferenceToggle(SwConst.swUserPreferenceToggle_e.swInputDimValOnCreate, False) '取消输入尺寸值
'                    End If

'                End Function
'                Public Function Left_chamfer_cut_Module(LccM_CutHorizontalLine As SldWorks.SketchLine, LccM_ChamferHorizontalDistance#, LccM_ChamferVerticalDistance#, LccM_BottomFilletRadius#, LccM_NclassMark#, LccM_NlayerMark#)
'                    ' Public Function 左倒角切除模块(切除起点 As SldWorks.SketchLine, 倒角水平距离#, 倒角竖直距离#, 底圆角半径#, 是否标注#, 标注在第N层#)
'                    Dim line1, line2, line3 As SldWorks.SketchLine
'                    Dim line1Segment, line2Segment As SldWorks.SketchSegment
'                    Dim point1, point2, point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim edge() As Object
'                    Dim edge1() As Object
'                    Dim swface As SldWorks.Face
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Feature As SldWorks.IFeature

'                    point1 = LccM_CutHorizontalLine.GetStartPoint2()
'                    point1.Select4(False, Nothing)
'                    line1 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X + LccM_ChamferHorizontalDistance, point1.Y, 0)  '第1条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X, point1.Y - LccM_ChamferVerticalDistance, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(point1.X, point1.Y - LccM_ChamferVerticalDistance, 0, point1.X + LccM_ChamferHorizontalDistance, point1.Y, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line1Segment = line1
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, PI * 2, 0, False, False, 0.01, 0.01, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                    part.ClearSelection2(True)
'                    If Not LccM_BottomFilletRadius = 0 Then
'                        Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                        edge = Feature.GetFaces()
'                        part.ClearSelection2(True)
'                        SelectionMgr.AddSelectionListObject(edge(0), Nothing)
'                        swface = SelectionMgr.GetSelectedObject6(1, -1)
'                        edge1 = swface.GetEdges()
'                        SelectionMgr.AddSelectionListObject(edge1(1), Nothing)
'                        part.FeatureManager.FeatureFillet3(195, LccM_BottomFilletRadius, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) '遍历找边倒圆角
'                        part.ClearSelection2(True)
'                    End If
'                    If LccM_NclassMark = 1 Then
'                        Dim number As String
'                        Dim myNote As Object
'                        Dim myAnno As Object
'                        point3 = line1.GetEndPoint2()
'                        point4 = line2.GetEndPoint2()
'                        point2 = line004.GetStartPoint2()
'                        line3.select2(False, Nothing)
'                        'lineSegment3 = line3
'                        'part.Extension.SelectByID2(lineSegment3.GetName, "SKETCHSEGMENT", (point3.X + point4.X) / 2, （point3.Y + point4.Y） / 2, 0, False, 0, Nothing, 0)
'                        number = LccM_ChamferVerticalDistance * 1000 & " * 45°"
'                        myNote = part.InsertNote(number)
'                        myNote.GetAnnotation().SetPosition(-0.03 + point1.X, point1.Y + 0.04, 0)
'                        myAnno = myNote.GetAnnotation()
'                        myAnno.SetLeader3(3, 0, True, False, False, False)
'                        myAnno.SetLeaderAttachmentPointAtIndex(0, (point3.X + point4.X) / 2, （point3.Y + point4.Y） / 2, 0) '加注释引导线
'                        myNote.SetHeight(0.008)
'                    ElseIf LccM_NclassMark = 3 Then
'                        line1Segment = line1
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X, -MaxValue_diameter - 0.01 - LccM_NlayerMark# * 0.01, 0) '第一阶长标注
'                        Displaydimention.CenterText = True
'                    ElseIf LccM_NclassMark = 5 Then
'                        line1Segment = line1
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X, -MaxValue_diameter - 0.01 - LccM_NlayerMark# * 0.01, 0) '第一阶长标注
'                        Displaydimention.CenterText = True
'                        line2Segment = line2
'                        point5 = line2.GetEndPoint2
'                        point6 = part.SketchManager.CreatePoint(point5.X, -point5.Y, 0)
'                        point5.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point5.X - 0.02, -MaxValue_diameter - 0.005 - LccM_NlayerMark# * 0.01, 0)
'                    ElseIf LccM_NclassMark = 2 Then
'                        Dim number As String
'                        Dim myNote As Object
'                        Dim myAnno As Object
'                        point3 = line1.GetEndPoint2()
'                        point4 = line2.GetEndPoint2()
'                        point2 = line004.GetStartPoint2()
'                        line3.select2(False, Nothing)
'                        'lineSegment3 = line3
'                        'part.Extension.SelectByID2(lineSegment3.GetName, "SKETCHSEGMENT", (point3.X + point4.X) / 2, （point3.Y + point4.Y） / 2, 0, False, 0, Nothing, 0)
'                        number = " C" & LccM_ChamferVerticalDistance * 1000
'                        myNote = part.InsertNote(number)
'                        myNote.GetAnnotation().SetPosition(-0.03 + point1.X, point1.Y + 0.04, 0)
'                        myAnno = myNote.GetAnnotation()
'                        myAnno.SetLeader3(3, 0, True, False, False, False)
'                        myAnno.SetLeaderAttachmentPointAtIndex(0, (point3.X + point4.X) / 2, （point3.Y + point4.Y） / 2, 0)
'                        myNote.SetHeight(0.008)
'                    End If
'                    part.ClearSelection2(True)
'                End Function
'                Public Function Right_chamfer_cut_Module(RccM_CutHorizontalLine As SldWorks.SketchLine, RccM_NstepStartline As SldWorks.SketchLine, RccM_ChamferHorizontalDistance#, RccM_ChamferVerticalDistance#, RccM_BottomFilletRadius#, RccM_NclassMark#, RccM_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    'Public Function 右倒角切除模块(切除起点线 As SldWorks.SketchLine, 倒角阶起点线 As SldWorks.SketchLine, 倒角水平距离#, 倒角竖直距离#, 底圆角半径#, 是否标注#, 标注在第N层#)
'                    Dim line1, line2, line3 As SldWorks.SketchLine
'                    Dim line1Segment, line2Segment As SldWorks.SketchSegment
'                    Dim point1, point2, point3, point4, point5, point6, point7 As SldWorks.ISketchPoint
'                    Dim edge() As Object
'                    Dim edge1() As Object
'                    Dim swface As SldWorks.Face
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Feature As SldWorks.IFeature
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object

'                    point1 = RccM_CutHorizontalLine.GetEndPoint2()
'                    point1.Select4(False, Nothing)
'                    line1 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X - RccM_ChamferHorizontalDistance, point1.Y, 0)  '第1条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X, point1.Y - RccM_ChamferVerticalDistance, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(point1.X, point1.Y - RccM_ChamferVerticalDistance, 0, point1.X - RccM_ChamferHorizontalDistance, point1.Y, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line1Segment = line1
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, PI * 2, 0, False, False, 0, 0, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                    If Not RccM_BottomFilletRadius = 0 Then
'                        Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                        edge = Feature.GetFaces()
'                        part.ClearSelection2(True)
'                        SelectionMgr.AddSelectionListObject(edge(0), Nothing)
'                        swface = SelectionMgr.GetSelectedObject6(1, -1)
'                        edge1 = swface.GetEdges()
'                        SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
'                        part.FeatureManager.FeatureFillet3(195, RccM_BottomFilletRadius, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
'                        part.ClearSelection2(True)
'                    End If
'                    If RccM_NclassMark = 2 Then
'                        Dim number As String
'                        Dim myNote As Object
'                        Dim myAnno As Object
'                        Dim myTextFormat As Object
'                        point3 = line1.GetEndPoint2()
'                        point4 = line2.GetEndPoint2()
'                        point2 = line004.GetStartPoint2()
'                        line3.select2(False, Nothing)
'                        number = "C" & RccM_ChamferVerticalDistance * 1000
'                        myNote = part.InsertNote(number)
'                        myNote.GetAnnotation().SetPosition(0.02 + point1.X, point1.Y + 0.04, 0)
'                        myAnno = myNote.GetAnnotation()
'                        myAnno.SetLeader3(3, 0, True, False, False, False)
'                        myAnno.SetLeaderAttachmentPointAtIndex(0, (point3.X + point4.X) / 2, （point3.Y + point4.Y） / 2, 0)     '加注释引导线
'                        myNote.SetHeight(0.008)
'                    ElseIf RccM_NclassMark = 3 Then
'                        line1Segment = line1
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X, -MaxValue_diameter - 0.005 - RccM_NlayerMark# * 0.01, 0) '倒角长标注
'                        Displaydimention.CenterText = True
'                    ElseIf RccM_NclassMark = 4 Then
'                        line1Segment = line1
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X + RccM_ChamferHorizontalDistance# + RccM_NlayerMark# * 0.01, -MaxValue_diameter - 0.005 - RccM_NlayerMark# * 0.01, 0) '倒角长标注
'                        Displaydimention.CenterText = True
'                    ElseIf RccM_NclassMark = 5 Then
'                        line1Segment = line1
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X, -MaxValue_diameter - 0.005 - RccM_NlayerMark# * 0.01, 0) '倒角长标注
'                        Displaydimention.CenterText = True
'                        point5 = line2.GetEndPoint2
'                        part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        part.SketchManager.InsertSketch(True)
'                        Feature001 = part.SketchManager.ActiveSketch
'                        part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        part.BlankRefGeom()
'                        point6 = part.SketchManager.CreatePoint(point5.X, -point5.Y, 0)
'                        part.SketchManager.InsertSketch(True)
'                        point6.Select4(False, Nothing)
'                        point5.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point5.X + 0.02, -MaxValue_diameter - 0.005 - RccM_NlayerMark# * 0.01, 0)
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                        Dimension = Displaydimention.GetDimension2(0)
'                        DimensionTolerance = Dimension.Tolerance
'                        DimensionTolerance.Type = TolType
'                        DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    ElseIf RccM_NclassMark = 6 Then
'                        part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        part.SketchManager.InsertSketch(True)
'                        Feature001 = part.SketchManager.ActiveSketch
'                        part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                        part.BlankRefGeom()
'                        point5 = line2.GetEndPoint2
'                        point6 = part.SketchManager.CreatePoint(point5.X, -point5.Y, 0)
'                        part.SketchManager.InsertSketch(True)
'                        point5.Select4(False, Nothing)
'                        point6.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point5.X + 0.02, -MaxValue_diameter - 0.005 - RccM_NlayerMark# * 0.01, 0)
'                        part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
'                    ElseIf RccM_NclassMark = 1 Then
'                        Dim number As String
'                        Dim myNote As Object
'                        Dim myAnno As Object
'                        Dim myTextFormat As Object
'                        point3 = line1.GetEndPoint2()
'                        point4 = line2.GetEndPoint2()
'                        point2 = line004.GetStartPoint2()
'                        line3.select2(False, Nothing)
'                        number = RccM_ChamferVerticalDistance * 1000 & " * 45°"
'                        myNote = part.InsertNote(number)
'                        myNote.GetAnnotation().SetPosition(0.02 + point1.X, point1.Y + 0.04, 0)
'                        myAnno = myNote.GetAnnotation()
'                        myAnno.SetLeader3(3, 0, True, False, False, False)
'                        myAnno.SetLeaderAttachmentPointAtIndex(0, (point3.X + point4.X) / 2, （point3.Y + point4.Y） / 2, 0)
'                        myNote.SetHeight(0.008)

'                        'point3 = line1.GetEndPoint2()
'                        'point3.Select4(False, Nothing)
'                        'line1Segment = RccM_NstepStartline
'                        'line1Segment.Select4(True, Nothing)
'                        'Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.005 - RccM_NlayerMark# * 0.01, 0) '倒角左边标注
'                        'Displaydimention.CenterText = True
'                        'line1Segment = line1
'                        'line1Segment.Select4(False, Nothing)
'                        'Displaydimention = part.AddDimension2(point1.X, -MaxValue_diameter - 0.005 - RccM_NlayerMark# * 0.01, 0) '倒角中间标注
'                        'Displaydimention.CenterText = True
'                    End If
'                    'part.SketchManager.InsertSketch(True)

'                End Function
'                Public Function Standard_circle_cut_FilletAndChamfer_Module(SccFM_FilletRadius#, SccFM_NstepCut_Width#, SccFM_CutStartpoint As SldWorks.SketchPoint, SccFM_NstepCut_Depth#, SccFM_NclassMark#, SccFM_NlayerMark#)
'                    'Public Function 标准环切圆倒圆角和标注模块(圆角半径#, N阶环切宽#, 切除起点 As SldWorks.SketchPoint, N阶环切深度#, 是否标注#, 标注在第N层#)
'                    Dim edge(), edge1(), edge2() As Object
'                    SelectionMgr.AddSelectionListObject(face001(1), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge1 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(face001(2), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge2 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
'                    SelectionMgr.AddSelectionListObject(edge2(1), Nothing)
'                    If SccFM_NclassMark = 1 Then
'                        part.AddDimension2(SccFM_CutStartpoint.X + SccFM_NstepCut_Width * 4, MaxValue_diameter + 0.005 + SccFM_NlayerMark# * 0.003, 0) '倒角中间标注
'                    ElseIf SccFM_NclassMark = 2 Then
'                        part.AddDimension2(SccFM_CutStartpoint.X - SccFM_NstepCut_Width * 3, MaxValue_diameter + 0.005 + SccFM_NlayerMark# * 0.003, 0) '倒角中间标注
'                    ElseIf SccFM_NclassMark = 4 Then
'                        part.AddDimension2(SccFM_CutStartpoint.X + SccFM_NstepCut_Width * 4, -MaxValue_diameter - 0.005 - SccFM_NlayerMark# * 0.003, 0) '倒角中间标注
'                    ElseIf SccFM_NclassMark = 3 Then
'                        part.AddDimension2(SccFM_CutStartpoint.X + SccFM_NstepCut_Width * 4, SccFM_CutStartpoint.Y / 2, 0) '倒角中间标注
'                    End If
'                    part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "", "*" & SccFM_NstepCut_Depth * 1000, True, "", "", True)
'                    If Not SccFM_FilletRadius = 0 Then
'                        part.ClearSelection2(True)
'                        SelectionMgr.AddSelectionListObject(face001(0), Nothing)
'                        swface = SelectionMgr.GetSelectedObject6(1, -1)
'                        edge = swface.GetEdges()
'                        SelectionMgr.AddSelectionListObject(edge(0), Nothing)
'                        SelectionMgr.AddSelectionListObject(edge(1), Nothing)
'                        part.FeatureManager.FeatureFillet3(195, SccFM_FilletRadius, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

'                        part.ClearSelection2(True)
'                    End If

'                End Function
'                Public Function Standard_circle_cut_Module(SccM_CutStartpoint1 As SldWorks.SketchPoint, SccM_CutStartpoint As SldWorks.SketchPoint, SccM_CutDirection As Boolean, SccM_NstepCut_Width#, SccM_NstepCut_Depth#)
'                    'Public Function 标准环切圆模块(切除起点阶梯高 As SldWorks.SketchPoint, 切除起点 As SldWorks.SketchPoint, 切除方向 As Boolean, N阶环切宽#, N阶环切深度#)
'                    Dim arc1Segment As SldWorks.SketchSegment
'                    Dim DatumPlane1 As SldWorks.Feature
'                    Dim Feature As SldWorks.IFeature

'                    DatumPlane1 = DatumPlane("右视", 8, SccM_CutStartpoint.X, 0, 0, 0)
'                    DatumPlane1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    DatumPlane1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    arc1Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, SccM_CutStartpoint1.Y - SccM_NstepCut_Depth)
'                    SketchManager.InsertSketch(True)
'                    arc1Segment.Select4(False, Nothing)
'                    part.FeatureManager.FeatureCut4(True, True, SccM_CutDirection, 0, 0, SccM_NstepCut_Width, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False) '反向切除
'                    Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                    face001 = Feature.GetFaces()
'                    part.ClearSelection2(True)
'                End Function
'                Public Function Nonstandard_circle_cut_Right_DimensionModule_0(NccRD_NstepCut_Width#, NccRD_NstepEndpoint As SldWorks.SketchPoint, NccRD_circle As SldWorks.SketchSegment, NccRD_NstepAfterVerticalLine As SldWorks.SketchSegment, NccRD_NstepCut_Depth#, NccRD_NlayerMark#, NccR_DistanceFromNstepEndpoint#, NccRD_BottomFilletRadius#, NccRD_TopChamfer#, NccRD_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ' Public Function 非标准环切圆右标注模块0(N阶环切宽#, N阶终点 As SldWorks.SketchPoint, 环切圆 As SldWorks.SketchSegment, N阶后竖直线 As SldWorks.SketchSegment, N阶环切深度#, 标注在第N层#, 距N阶终点距离#, 底圆角半径#, 上倒角#, 上倒角半径#)
'                    Dim edge1() As Object
'                    Dim edge2() As Object
'                    Dim swface As SldWorks.Face
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object

'                    SelectionMgr.AddSelectionListObject(face002(1), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge1 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(face002(2), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge2 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
'                    SelectionMgr.AddSelectionListObject(edge2(1), Nothing)
'                    Displaydimention = part.AddDimension2(NccRD_NstepEndpoint.X - NccR_DistanceFromNstepEndpoint + NccRD_NstepCut_Width * 4, NccRD_NstepEndpoint.Y + 0.01 + NccRD_NlayerMark# * 0.003, 0) '倒角中间标注
'                    part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "", "*" & NccRD_NstepCut_Depth * 1000, True, "", "", True)
'                    Displaydimention.CenterText = True
'                    NccRD_circle.Select4(False, Nothing)
'                    NccRD_NstepAfterVerticalLine.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(NccRD_NstepEndpoint.X, -MaxValue_diameter - 0.02 - NccRD_NlayerMark# * 0.005, 0)
'                    part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                    Displaydimention.CenterText = True   '自动居中
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    Nonstandard_circle_cut_Right_FilletAndChamfer_Module(NccRD_BottomFilletRadius#, NccRD_TopChamfer#, NccRD_TopChamferLength#)
'                End Function
'                Public Function Nonstandard_circle_cut_Right_DimensionModule_2(NccRD_NstepCut_Width#, NccRD_NstepEndpoint As SldWorks.SketchPoint, NccRD_circle As SldWorks.SketchSegment, NccRD_NstepAfterVerticalLine As SldWorks.SketchSegment, NccRD_NstepCut_Depth#, NccRD_NlayerMark#, NccR_DistanceFromNstepEndpoint#, NccRD_BottomFilletRadius#, NccRD_TopChamfer#, NccRD_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ' Public Function 非标准环切圆右标注模块0(N阶环切宽#, N阶终点 As SldWorks.SketchPoint, 环切圆 As SldWorks.SketchSegment, N阶后竖直线 As SldWorks.SketchSegment, N阶环切深度#, 标注在第N层#, 距N阶终点距离#, 底圆角半径#, 上倒角#, 上倒角半径#)
'                    Dim edge1() As Object
'                    Dim edge2() As Object
'                    Dim swface As SldWorks.Face
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object

'                    SelectionMgr.AddSelectionListObject(face002(1), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge1 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(face002(2), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge2 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
'                    SelectionMgr.AddSelectionListObject(edge2(1), Nothing)
'                    Displaydimention = part.AddDimension2(NccRD_NstepEndpoint.X - NccR_DistanceFromNstepEndpoint + NccRD_NstepCut_Width * 4, NccRD_NstepEndpoint.Y + 0.01 + NccRD_NlayerMark# * 0.003, 0) '倒角中间标注
'                    part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "*" & NccRD_NstepCut_Depth * 1000, True, "", "", True)
'                    Displaydimention.CenterText = True
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    NccRD_circle.Select4(False, Nothing)
'                    NccRD_NstepAfterVerticalLine.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(NccRD_NstepEndpoint.X, -MaxValue_diameter - 0.02 - NccRD_NlayerMark# * 0.005, 0)
'                    Displaydimention.CenterText = True
'                    Nonstandard_circle_cut_Right_FilletAndChamfer_Module(NccRD_BottomFilletRadius#, NccRD_TopChamfer#, NccRD_TopChamferLength#)
'                End Function
'                Public Function Nonstandard_circle_cut_Right_DimensionModule_2(NccRD_NstepCut_Width#, NccRD_NstepEndpoint As SldWorks.SketchPoint, NccRD_NstepCut_Depth#, NccRD_NlayerMark#, NccR_DistanceFromNstepEndpoint#)
'                    ' Public Function 非标准环切圆右标注模块0(N阶环切宽#, N阶终点 As SldWorks.SketchPoint, 环切圆 As SldWorks.SketchSegment, N阶后竖直线 As SldWorks.SketchSegment, N阶环切深度#, 标注在第N层#, 距N阶终点距离#, 底圆角半径#, 上倒角#, 上倒角半径#)
'                    Dim edge1() As Object
'                    Dim edge2() As Object
'                    Dim swface As SldWorks.Face
'                    Dim Displaydimention As SldWorks.DisplayDimension

'                    SelectionMgr.AddSelectionListObject(face002(1), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge1 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(face002(2), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge2 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
'                    SelectionMgr.AddSelectionListObject(edge2(1), Nothing)
'                    Displaydimention = part.AddDimension2(NccRD_NstepEndpoint.X - NccR_DistanceFromNstepEndpoint + NccRD_NstepCut_Width * 4, NccRD_NstepEndpoint.Y + 0.01 + NccRD_NlayerMark# * 0.003, 0) '倒角中间标注
'                    part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "", "*" & NccRD_NstepCut_Depth * 1000, True, "", "", True)
'                    Displaydimention.CenterText = True
'                End Function
'                Public Function Nonstandard_circle_cut_Right_DimensionModule_1(NccRD1_NstepEndpoint As SldWorks.SketchPoint, NccRD1_circle As SldWorks.SketchSegment, NccRD1_NstepAfterVerticalLine As SldWorks.SketchSegment, NccRD1_NstepCut_Depth#, NccRD1_abscissa#, NccRD1_NlayerMark#, NccRD1_BottomFilletRadius#, NccRD1_TopChamfer#, NccRD1_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ' Public Function 非标准环切圆右标注模块1(N阶终点 As SldWorks.SketchPoint, 环切圆 As SldWorks.SketchSegment, N阶后竖直线 As SldWorks.SketchSegment, N阶环切深度#, 标注横坐标#, 标注在第N层#, 底圆角半径#, 上倒角#, 上倒角半径#)
'                    Dim edge1() As Object
'                    Dim edge2() As Object
'                    Dim swface As SldWorks.Face
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object

'                    SelectionMgr.AddSelectionListObject(face002(1), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge1 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(face002(2), Nothing)
'                    swface = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge2 = swface.GetEdges()
'                    part.ClearSelection2(True)
'                    SelectionMgr.AddSelectionListObject(edge1(0), Nothing)
'                    SelectionMgr.AddSelectionListObject(edge2(1), Nothing)
'                    part.AddDimension2(NccRD1_abscissa, -MaxValue_diameter - 0.005 - NccRD1_NlayerMark# * 0.003, 0) '倒角中间标注
'                    part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "", "*" & NccRD1_NstepCut_Depth * 1000, True, "", "", True)  'N阶终点.X - 距N阶终点距离 - N阶环切宽 - 标注在第N层# * 0.015
'                    NccRD1_circle.Select4(False, Nothing)
'                    NccRD1_NstepAfterVerticalLine.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(NccRD1_NstepEndpoint.X, -MaxValue_diameter - 0.02 - NccRD1_NlayerMark# * 0.005, 0)
'                    part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                    Displaydimention.CenterText = True   '自动居中
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    Nonstandard_circle_cut_Right_FilletAndChamfer_Module(NccRD1_BottomFilletRadius#, NccRD1_TopChamfer#, NccRD1_TopChamferLength#)
'                End Function
'                Public Function Nonstandard_circle_cut_Right_FilletAndChamfer_Module(NccRFM_BottomFilletRadius#, NccRFM_TopChamfer#, NccRFM_TopChamferLength#) '切除方向1为左边，2为右边。非标准环切圆左为距离N阶终点点处开始。上倒角为左轴肩的倒角。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                    ' Public Function 非标准环切圆右圆角倒角模块(底圆角半径#, 上倒角#, 上倒角半径#) '切除方向1为左边，2为右边。非标准环切圆左为距离N阶终点点处开始。上倒角为左轴肩的倒角。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                    Dim edge() As Object
'                    Dim edge2() As Object
'                    Dim swface As SldWorks.Face

'                    Feature.Select2(False, Nothing)
'                    Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                    edge = Feature.GetFaces()
'                    If NccRFM_TopChamfer = 2 Then
'                        part.ClearSelection2(True)
'                        SelectionMgr.AddSelectionListObject(edge(1), Nothing)
'                        swface = SelectionMgr.GetSelectedObject6(1, -1)
'                        edge2 = swface.GetEdges()
'                        SelectionMgr.AddSelectionListObject(edge2(0), Nothing)
'                        part.FeatureManager.InsertFeatureChamfer(10, 1, NccRFM_TopChamferLength, PI / 4, 0, 0, 0, 0)
'                        part.ClearSelection2(True)
'                    ElseIf NccRFM_TopChamfer = 1 Then
'                        part.ClearSelection2(True)
'                        SelectionMgr.AddSelectionListObject(edge(2), Nothing)
'                        swface = SelectionMgr.GetSelectedObject6(1, -1)
'                        edge2 = swface.GetEdges()
'                        SelectionMgr.AddSelectionListObject(edge2(1), Nothing)
'                        part.FeatureManager.InsertFeatureChamfer(10, 1, NccRFM_TopChamferLength, PI / 4, 0, 0, 0, 0)
'                        part.ClearSelection2(True)
'                    End If
'                    If Not NccRFM_BottomFilletRadius = 0 Then
'                        part.ClearSelection2(True)
'                        SelectionMgr.AddSelectionListObject(edge(0), Nothing)
'                        swface = SelectionMgr.GetSelectedObject6(1, -1)
'                        edge = swface.GetEdges()
'                        SelectionMgr.AddSelectionListObject(edge(0), Nothing)
'                        SelectionMgr.AddSelectionListObject(edge(1), Nothing)
'                        part.FeatureManager.FeatureFillet3(195 - 16, NccRFM_BottomFilletRadius, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
'                        part.ClearSelection2(True)
'                    End If
'                End Function
'                Public Function Nonstandard_circle_cut_Right_Module(NccRM_NstepHorizontalLine As SldWorks.SketchLine, NccRM_NstepAfterVerticalLine As SldWorks.SketchSegment, NccRM_DistanceFromNstepEndpoint#, NccRM_NstepCut_Width#, NccRM_NstepCut_Depth#, NccRM_CutDirection#, NccRM_NclassMark#, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    'Public Function 非标准环切圆右模块(N阶水平线 As SldWorks.SketchLine, N阶后竖直线 As SldWorks.SketchSegment, 距N阶终点距离#, N阶环切宽#, N阶环切深度#, 切除方向#, 第N类标注#, 标注在第N层#, 底圆角半径#, 上倒角#, 上倒角半径#)

'                    Dim arc1Segment As SldWorks.SketchSegment
'                    Dim point1 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature

'                    point1 = NccRM_NstepHorizontalLine.GetEndPoint2
'                    基准面1 = DatumPlane("右视", 8, point1.X - NccRM_DistanceFromNstepEndpoint, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    arc1Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, point1.Y - NccRM_NstepCut_Depth)
'                    SketchManager.InsertSketch(True)
'                    arc1Segment.Select4(False, Nothing)
'                    If NccRM_CutDirection = 1 Then
'                        Feature = part.FeatureManager.FeatureCut4(True, True, False, 0, 0, NccRM_NstepCut_Width, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)  '反向切除
'                        Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                        face002 = Feature.GetFaces()
'                        part.ClearSelection2(True)
'                        If NccRM_NclassMark = 0 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_2(NccRM_NstepCut_Width#, point1, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#)
'                        ElseIf NccRM_NclassMark = 1 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_0(NccRM_NstepCut_Width#, point1, arc1Segment, NccRM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccRM_NclassMark = 2 Then    'point1.X - 距N阶终点距离 - N阶环切宽 - 标注在第N层# * 0.015
'                            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, NccRM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, point1.X - NccRM_DistanceFromNstepEndpoint - NccRM_NstepCut_Width - NccRM_NlayerMark# * 0.005, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccRM_NclassMark = 3 Then    'point1.X - 距N阶终点距离 + 标注在第N层# * 0.015
'                            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, NccRM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, point1.X - NccRM_DistanceFromNstepEndpoint + NccRM_NlayerMark# * 0.005, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccRM_NclassMark = 4 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_2(NccRM_NstepCut_Width#, point1, arc1Segment, NccRM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf NccRM_CutDirection = 2 Then
'                        Feature = part.FeatureManager.FeatureCut4(True, True, True, 0, 0, NccRM_NstepCut_Width, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False) '反向切除
'                        Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                        face002 = Feature.GetFaces()
'                        part.ClearSelection2(True)
'                        If NccRM_NclassMark = 0 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_2(NccRM_NstepCut_Width#, point1, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#)
'                        ElseIf NccRM_NclassMark = 1 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_0(NccRM_NstepCut_Width#, point1, arc1Segment, NccRM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccRM_NclassMark = 2 Then    'point1.X - 距N阶终点距离 - N阶环切宽 - 标注在第N层# * 0.015
'                            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, NccRM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, point1.X - NccRM_DistanceFromNstepEndpoint - NccRM_NstepCut_Width - NccRM_NlayerMark# * 0.005, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccRM_NclassMark = 3 Then    'point1.X - 距N阶终点距离 + 标注在第N层# * 0.015
'                            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, NccRM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, point1.X - NccRM_DistanceFromNstepEndpoint + NccRM_NlayerMark# * 0.005, NccRM_NlayerMark#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccRM_NclassMark = 4 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_2(NccRM_NstepCut_Width#, point1, arc1Segment, NccRM_NstepAfterVerticalLine, NccRM_NstepCut_Depth#, NccRM_NlayerMark#, NccRM_DistanceFromNstepEndpoint#, NccRM_BottomFilletRadius#, NccRM_TopChamfer#, NccRM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    End If
'                End Function
'                Public Function Nonstandard_circle_cut_Left_Module(NccLM_NstepHorizontalLine As SldWorks.SketchLine, NccLM_NstepAfterVerticalLine As SldWorks.SketchSegment, NccLM_DistanceFromNstepEndpoint#, NccLM_NstepCut_Width#, NccLM_NstepCut_Depth#, NccLM_CutDirection#, NccLM_NclassMark#, NccLM_NlayerMark#, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    'Public Function 非标准环切圆左模块(N阶水平线 As SldWorks.SketchLine, N阶前竖直线 As SldWorks.SketchSegment, 距N阶起点距离#, N阶环切宽#, N阶环切深度#, 切除方向#, 第N类标注#, 标注在第N层#, 底圆角半径#, 上倒角#, 上倒角半径#)

'                    Dim arc1Segment As SldWorks.SketchSegment
'                    Dim point1 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim SketchSegment As SldWorks.SketchSegment
'                    Dim SketchSegments() As Object
'                    Dim Sketch As SldWorks.Sketch
'                    Dim [Boolean] As Boolean

'                    point1 = NccLM_NstepHorizontalLine.GetStartPoint2
'                    基准面1 = DatumPlane("右视", 8, point1.X + NccLM_DistanceFromNstepEndpoint, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    arc1Segment = part.SketchManager.CreateCircleByRadius(0, 0, 0, point1.Y - NccLM_NstepCut_Depth)
'                    Sketch = SketchManager.ActiveSketch
'                    SketchSegments = Sketch.GetSketchSegments
'                    For i = 0 To UBound(SketchSegments)
'                        SketchSegment = SketchSegments(i)
'                        [Boolean] = SketchSegment.Select4(False, Nothing) : Debug.Assert([Boolean])
'                        part.SketchAddConstraints("sgFIXED")
'                    Next i
'                    SketchManager.InsertSketch(True)
'                    arc1Segment.Select4(False, Nothing)
'                    If NccLM_CutDirection = 1 Then
'                        Feature = part.FeatureManager.FeatureCut4(True, True, False, 0, 0, NccLM_NstepCut_Width, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)  '反向切除
'                        Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                        face002 = Feature.GetFaces()
'                        part.ClearSelection2(True)
'                        If NccLM_NclassMark = 0 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_2(NccLM_NstepCut_Width#, point1, NccLM_NstepCut_Depth#, NccLM_NlayerMark#, NccLM_DistanceFromNstepEndpoint)
'                        ElseIf NccLM_NclassMark = 1 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_0(NccLM_NstepCut_Width#, point1, arc1Segment, NccLM_NstepAfterVerticalLine, NccLM_NstepCut_Depth#, NccLM_NlayerMark#, NccLM_DistanceFromNstepEndpoint, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccLM_NclassMark = 2 Then    'point1.X - 距N阶终点距离 - N阶环切宽 - 标注在第N层# * 0.015
'                            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, NccLM_NstepAfterVerticalLine, NccLM_NstepCut_Depth#, point1.X + NccLM_DistanceFromNstepEndpoint - NccLM_NstepCut_Width - NccLM_NlayerMark# * 0.005, NccLM_NlayerMark#, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccLM_NclassMark = 3 Then    'point1.X - 距N阶终点距离 + 标注在第N层# * 0.015
'                            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, NccLM_NstepAfterVerticalLine, NccLM_NstepCut_Depth#, point1.X + NccLM_DistanceFromNstepEndpoint + NccLM_NlayerMark# * 0.005, NccLM_NlayerMark#, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccLM_NclassMark = 4 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_2(NccLM_NstepCut_Width#, point1, arc1Segment, NccLM_NstepAfterVerticalLine, NccLM_NstepCut_Depth#, NccLM_NlayerMark#, NccLM_DistanceFromNstepEndpoint, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf NccLM_CutDirection = 2 Then
'                        Feature = part.FeatureManager.FeatureCut4(True, True, True, 0, 0, NccLM_NstepCut_Width, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False) '反向切除
'                        Feature = SelectionMgr.GetSelectedObject6(1, -1)
'                        face002 = Feature.GetFaces()
'                        part.ClearSelection2(True)
'                        If NccLM_NclassMark = 0 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_2(NccLM_NstepCut_Width#, point1, NccLM_NstepCut_Depth#, NccLM_NlayerMark#, NccLM_DistanceFromNstepEndpoint)
'                        ElseIf NccLM_NclassMark = 1 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_0(NccLM_NstepCut_Width#, point1, arc1Segment, NccLM_NstepAfterVerticalLine, NccLM_NstepCut_Depth#, NccLM_NlayerMark#, NccLM_DistanceFromNstepEndpoint, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccLM_NclassMark = 2 Then    'point1.X - 距N阶终点距离 - N阶环切宽 - 标注在第N层# * 0.015
'                            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, NccLM_NstepAfterVerticalLine, NccLM_NstepCut_Depth#, point1.X + NccLM_DistanceFromNstepEndpoint - NccLM_NstepCut_Width - NccLM_NlayerMark# * 0.005, NccLM_NlayerMark#, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccLM_NclassMark = 3 Then    'point1.X - 距N阶终点距离 + 标注在第N层# * 0.015
'                            Nonstandard_circle_cut_Right_DimensionModule_1(point1, arc1Segment, NccLM_NstepAfterVerticalLine, NccLM_NstepCut_Depth#, point1.X + NccLM_DistanceFromNstepEndpoint + NccLM_NlayerMark# * 0.005, NccLM_NlayerMark#, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf NccLM_NclassMark = 4 Then
'                            Nonstandard_circle_cut_Right_DimensionModule_2(NccLM_NstepCut_Width#, point1, arc1Segment, NccLM_NstepAfterVerticalLine, NccLM_NstepCut_Depth#, NccLM_NlayerMark#, NccLM_DistanceFromNstepEndpoint, NccLM_BottomFilletRadius#, NccLM_TopChamfer#, NccLM_TopChamferLength#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    End If
'                End Function
'                Public Function Left_overstep_keyway_Module(LokM_DistanceBetweenKeywayDomeAndNstep#, LokM_NstepStartpoint As SldWorks.SketchPoint, LokM_Nstep_PreviousOneStepEndpoint As SldWorks.SketchPoint, LokM_KeywayCircleDiameter#, LokM_KeywayLength#, LokM_ReducingGrooveDepthDiameter#, LokM_NclassMark#, LokM_NlayerMark#)
'                    'Public Function 左越阶模块(越阶圆顶距N阶距离#, N阶起点 As SldWorks.SketchPoint, N阶前一阶终点 As SldWorks.SketchPoint, 越阶圆半径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    Dim line1, line2 As SldWorks.SketchLine
'                    Dim SketchArc1, SketchArc2 As SldWorks.SketchArc
'                    Dim arc1Segment, arc2Segment, line1Segment, line2Segment, SketchSegment As SldWorks.SketchSegment
'                    Dim point1, point2, point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim 基准面1, 基准面2 As SldWorks.Feature
'                    Dim Displaydimention As SldWorks.DisplayDimension

'                    基准面1 = DatumPlane("前视", 8, LokM_ReducingGrooveDepthDiameter - LokM_NstepStartpoint.Y, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    line1 = part.SketchManager.CreateLine(LokM_Nstep_PreviousOneStepEndpoint.X - LokM_DistanceBetweenKeywayDomeAndNstep + LokM_KeywayCircleDiameter / 2, LokM_KeywayCircleDiameter / 2, 0, LokM_Nstep_PreviousOneStepEndpoint.X - LokM_DistanceBetweenKeywayDomeAndNstep + LokM_KeywayLength - LokM_KeywayCircleDiameter / 2, LokM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(LokM_Nstep_PreviousOneStepEndpoint.X - LokM_DistanceBetweenKeywayDomeAndNstep + LokM_KeywayCircleDiameter / 2, -LokM_KeywayCircleDiameter / 2, 0, LokM_Nstep_PreviousOneStepEndpoint.X - LokM_DistanceBetweenKeywayDomeAndNstep + LokM_KeywayLength - LokM_KeywayCircleDiameter / 2, -LokM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc1Segment = part.SketchManager.CreateTangentArc(LokM_Nstep_PreviousOneStepEndpoint.X - LokM_DistanceBetweenKeywayDomeAndNstep + LokM_KeywayCircleDiameter / 2, LokM_KeywayCircleDiameter / 2, 0, LokM_Nstep_PreviousOneStepEndpoint.X - LokM_DistanceBetweenKeywayDomeAndNstep + LokM_KeywayCircleDiameter / 2, -LokM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc2Segment = part.SketchManager.CreateTangentArc(LokM_Nstep_PreviousOneStepEndpoint.X - LokM_DistanceBetweenKeywayDomeAndNstep + LokM_KeywayLength - LokM_KeywayCircleDiameter / 2, LokM_KeywayCircleDiameter / 2, 0, LokM_Nstep_PreviousOneStepEndpoint.X - LokM_DistanceBetweenKeywayDomeAndNstep + LokM_KeywayLength - LokM_KeywayCircleDiameter / 2, -LokM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")

'                    SketchArc1 = arc1Segment
'                    SketchArc2 = arc2Segment
'                    point3 = SketchArc1.GetCenterPoint2
'                    point4 = SketchArc2.GetCenterPoint2
'                    point5 = part.SketchManager.CreatePoint(point3.X - LokM_KeywayCircleDiameter / 2, 0, 0)
'                    point3.Select4(True, Nothing)
'                    If LokM_NclassMark = 1 Then
'                        Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.005 - LokM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        point6 = part.SketchManager.CreatePoint(point4.X + LokM_KeywayCircleDiameter / 2, 0, 0)
'                        point5.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X, LokM_KeywayCircleDiameter, 0)
'                        Displaydimention.CenterText = True
'                    ElseIf LokM_NclassMark = 2 Then
'                        part.AddDimension2(point3.X - LokM_KeywayCircleDiameter, -MaxValue_diameter - 0.005 - LokM_NlayerMark# * 0.005, 0)
'                        point6 = part.SketchManager.CreatePoint(point4.X + LokM_KeywayCircleDiameter / 2, 0, 0)
'                        point5.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.01 - LokM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                    End If
'                    arc1Segment.Select4(False, Nothing)
'                    arc2Segment.Select4(True, Nothing)
'                    line1Segment = line1
'                    line2Segment = line2
'                    line1Segment.Select4(True, Nothing)
'                    line2Segment.Select4(True, Nothing)
'                    part.FeatureManager.FeatureCut4(True, False, True, 1, 0, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)

'                    '基准面2 = 基准面("右视", 8, N阶处起点.X + 键长 / 2, 0, 0, 0)
'                    '基准面2.Select2(False, 2)
'                    'SketchManager.InsertSketch(True)
'                    '基准面2.Select2(False, 2)
'                    'part.BlankRefGeom()
'                    'point1 = part.SketchManager.CreatePoint(0, N阶处起点.Y, 0)
'                    'point2 = part.SketchManager.CreatePoint(0, -N阶处起点.Y, 0)
'                    'point1.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, 0, -(N阶处起点.Y + 0.01 + 标注在第N层# * 0.005))
'                    'Displaydimention.CenterText = True

'                    'point3 = part.SketchManager.CreatePoint(N阶处起点.Y, 0, 0)
'                    'point4 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处起点.Y, 0, 0)
'                    'point4.Select4(False, Nothing)
'                    'point3.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, -N阶处起点.Y - 0.005 - 标注在第N层# * 0.005, 0)
'                    'Displaydimention.CenterText = True

'                    'point5 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处起点.Y, 越阶圆半径, 0)
'                    'point6 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处起点.Y, -越阶圆半径, 0)
'                    'point5.Select4(False, Nothing)
'                    'point6.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, 0, N阶处起点.Y + 0.01 + 标注在第N层# * 0.005)
'                    'Displaydimention.CenterText = True
'                    'SketchManager.InsertSketch(True)
'                End Function
'                Public Function Right_overstep_keyway_Module(RokM_DistanceBetweenKeywayDomeAndNstep#, RokM_NstepEndpoint As SldWorks.SketchPoint, RokM_Nstep_AfterOneStepStartpoint As SldWorks.SketchPoint, RokM_KeywayCircleDiameter#, RokM_KeywayLength#, RokM_ReducingGrooveDepthDiameter#, RokM_NclassMark#, RokM_NlayerMark#)
'                    'Public Function 右越阶键槽模块(越阶圆顶距越阶距离#, N阶处终点 As SldWorks.SketchPoint, N阶后一阶起点 As SldWorks.SketchPoint, 越阶圆半径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    Dim line1, line2 As SldWorks.SketchLine
'                    Dim SketchArc1, SketchArc2 As SldWorks.SketchArc
'                    Dim arc1Segment, arc2Segment, line1Segment, line2Segment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim Displaydimention As SldWorks.DisplayDimension

'                    基准面1 = DatumPlane("前视", 8, RokM_ReducingGrooveDepthDiameter - RokM_NstepEndpoint.Y, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    line1 = part.SketchManager.CreateLine(RokM_Nstep_AfterOneStepStartpoint.X + RokM_DistanceBetweenKeywayDomeAndNstep - RokM_KeywayCircleDiameter / 2, RokM_KeywayCircleDiameter / 2, 0, RokM_Nstep_AfterOneStepStartpoint.X + RokM_DistanceBetweenKeywayDomeAndNstep - RokM_KeywayLength + RokM_KeywayCircleDiameter / 2, RokM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(RokM_Nstep_AfterOneStepStartpoint.X + RokM_DistanceBetweenKeywayDomeAndNstep - RokM_KeywayCircleDiameter / 2, -RokM_KeywayCircleDiameter / 2, 0, RokM_Nstep_AfterOneStepStartpoint.X + RokM_DistanceBetweenKeywayDomeAndNstep - RokM_KeywayLength + RokM_KeywayCircleDiameter / 2, -RokM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc1Segment = part.SketchManager.CreateTangentArc(RokM_Nstep_AfterOneStepStartpoint.X + RokM_DistanceBetweenKeywayDomeAndNstep - RokM_KeywayCircleDiameter / 2, RokM_KeywayCircleDiameter / 2, 0, RokM_Nstep_AfterOneStepStartpoint.X + RokM_DistanceBetweenKeywayDomeAndNstep - RokM_KeywayCircleDiameter / 2, -RokM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc2Segment = part.SketchManager.CreateTangentArc(RokM_Nstep_AfterOneStepStartpoint.X + RokM_DistanceBetweenKeywayDomeAndNstep - RokM_KeywayLength + RokM_KeywayCircleDiameter / 2, -RokM_KeywayCircleDiameter / 2, 0, RokM_Nstep_AfterOneStepStartpoint.X + RokM_DistanceBetweenKeywayDomeAndNstep - RokM_KeywayLength + RokM_KeywayCircleDiameter / 2, RokM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    SketchArc1 = arc1Segment
'                    SketchArc2 = arc2Segment
'                    point3 = SketchArc1.GetCenterPoint2
'                    point4 = SketchArc2.GetCenterPoint2
'                    point5 = part.SketchManager.CreatePoint(point3.X + RokM_KeywayCircleDiameter / 2, 0, 0)
'                    point3.Select4(True, Nothing)
'                    If RokM_NclassMark = 1 Then
'                        Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.005 - RokM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        point6 = part.SketchManager.CreatePoint(point4.X - RokM_KeywayCircleDiameter / 2, 0, 0)
'                        point5.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X, RokM_KeywayCircleDiameter, 0)
'                        Displaydimention.CenterText = True
'                    ElseIf RokM_NclassMark = 2 Then
'                        part.AddDimension2(point3.X + RokM_KeywayCircleDiameter, -MaxValue_diameter - 0.005 - RokM_NlayerMark# * 0.005, 0)
'                        point6 = part.SketchManager.CreatePoint(point4.X - RokM_KeywayCircleDiameter / 2, 0, 0)
'                        point5.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.01 - RokM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                    End If
'                    arc1Segment.Select4(False, Nothing)
'                    arc2Segment.Select4(True, Nothing)
'                    line1Segment = line1
'                    line2Segment = line2
'                    line1Segment.Select4(True, Nothing)
'                    line2Segment.Select4(True, Nothing)
'                    part.FeatureManager.FeatureCut4(True, False, True, 1, 0, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
'                End Function
'                Public Function Nstep_keyway_Right_Module(NkRM_DistanceBetweenKeywayDomeRAndNstepR#, NkRM_NstepHorizontalLineEndpoint As SldWorks.SketchPoint, NkRM_KeywayCircleDiameter#, NkRM_KeywayLength#, NkRM_ReducingGrooveDepthDiameter#, NkRM_NclassMark#, NkRM_NlayerMark#)
'                    'Public Function N阶键槽右模块(右侧圆顶距N阶右侧距离#, N阶水平线终点 As SldWorks.SketchPoint, 圆直径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    Dim line1, line2 As SldWorks.SketchLine
'                    Dim arc1Segment, arc2Segment, line1Segment, line2Segment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6, point7, pointDimension As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim SketchArc1, SketchArc2 As SldWorks.SketchArc
'                    Dim Displaydimention As SldWorks.DisplayDimension

'                    基准面1 = DatumPlane("前视", 8, NkRM_ReducingGrooveDepthDiameter - NkRM_NstepHorizontalLineEndpoint.Y, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    line1 = part.SketchManager.CreateLine(NkRM_NstepHorizontalLineEndpoint.X - NkRM_DistanceBetweenKeywayDomeRAndNstepR - NkRM_KeywayCircleDiameter / 2, NkRM_KeywayCircleDiameter / 2, 0, NkRM_NstepHorizontalLineEndpoint.X - NkRM_DistanceBetweenKeywayDomeRAndNstepR - NkRM_KeywayLength + NkRM_KeywayCircleDiameter / 2, NkRM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(NkRM_NstepHorizontalLineEndpoint.X - NkRM_DistanceBetweenKeywayDomeRAndNstepR - NkRM_KeywayCircleDiameter / 2, -NkRM_KeywayCircleDiameter / 2, 0, NkRM_NstepHorizontalLineEndpoint.X - NkRM_DistanceBetweenKeywayDomeRAndNstepR - NkRM_KeywayLength + NkRM_KeywayCircleDiameter / 2, -NkRM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc1Segment = part.SketchManager.CreateTangentArc(NkRM_NstepHorizontalLineEndpoint.X - NkRM_DistanceBetweenKeywayDomeRAndNstepR - NkRM_KeywayCircleDiameter / 2, NkRM_KeywayCircleDiameter / 2, 0, NkRM_NstepHorizontalLineEndpoint.X - NkRM_DistanceBetweenKeywayDomeRAndNstepR - NkRM_KeywayCircleDiameter / 2, -NkRM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc2Segment = part.SketchManager.CreateTangentArc(NkRM_NstepHorizontalLineEndpoint.X - NkRM_DistanceBetweenKeywayDomeRAndNstepR - NkRM_KeywayLength + NkRM_KeywayCircleDiameter / 2, NkRM_KeywayCircleDiameter / 2, 0, NkRM_NstepHorizontalLineEndpoint.X - NkRM_DistanceBetweenKeywayDomeRAndNstepR - NkRM_KeywayLength + NkRM_KeywayCircleDiameter / 2, -NkRM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    SketchArc1 = arc1Segment
'                    SketchArc2 = arc2Segment
'                    point3 = SketchArc1.GetCenterPoint2
'                    point4 = SketchArc2.GetCenterPoint2
'                    point5 = part.SketchManager.CreatePoint(point3.X + NkRM_KeywayCircleDiameter / 2, 0, 0)
'                    point6 = part.SketchManager.CreatePoint(point5.X + NkRM_DistanceBetweenKeywayDomeRAndNstepR, 0, 0)
'                    point5.Select4(True, Nothing)
'                    Select Case NkRM_NclassMark
'                        Case 2
'                            Displaydimention = part.AddDimension2(point3.X + NkRM_KeywayCircleDiameter / 2 + NkRM_DistanceBetweenKeywayDomeRAndNstepR, -MaxValue_diameter - 0.005 - NkRM_NlayerMark# * 0.005, 0)
'                            Displaydimention.CenterText = True
'                        Case 3
'                            part.AddDimension2(point3.X + NkRM_KeywayCircleDiameter / 2 + NkRM_DistanceBetweenKeywayDomeRAndNstepR * 2, -MaxValue_diameter - 0.005 - NkRM_NlayerMark# * 0.005, 0)
'                        Case 1
'                            part.AddDimension2(point3.X + NkRM_KeywayCircleDiameter / 2 - NkRM_DistanceBetweenKeywayDomeRAndNstepR, -MaxValue_diameter - 0.005 - NkRM_NlayerMark# * 0.005, 0)
'                        Case 4
'                            part.AddDimension2(point3.X + NkRM_KeywayCircleDiameter / 2 + NkRM_DistanceBetweenKeywayDomeRAndNstepR * 2, -NkRM_KeywayCircleDiameter, 0)
'                    End Select
'                    part.ClearSelection2(True)
'                    point7 = part.SketchManager.CreatePoint(point4.X - NkRM_KeywayCircleDiameter / 2, 0, 0)
'                    point5.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.01 - NkRM_NlayerMark# * 0.005, 0)
'                    Displaydimention.CenterText = True
'                    arc1Segment.Select4(False, Nothing)
'                    arc2Segment.Select4(True, Nothing)
'                    line1Segment = line1
'                    line2Segment = line2
'                    line1Segment.Select4(True, Nothing)
'                    line2Segment.Select4(True, Nothing)
'                    part.FeatureManager.FeatureCut4(True, False, True, 1, 0, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
'                End Function
'                Public Function Nstep_keyway_Left_Module(NkLM_DistanceBetweenKeywayDomeLAndNstepL#, NkLM_NstepHorizontalLineStartpoint As SldWorks.SketchPoint, NkLM_KeywayCircleDiameter#, NkLM_KeywayLength#, NkLM_ReducingGrooveDepthDiameter#, NkLM_NclassMark#, NkLM_NlayerMark#)
'                    'Public Function N阶键槽左模块(左侧圆顶距N阶左侧距离#, N阶水平线起点 As SldWorks.SketchPoint, 圆直径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)

'                    Dim line1, line2 As SldWorks.SketchLine
'                    Dim arc1Segment, arc2Segment, line1Segment, line2Segment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6, point7 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim SketchArc1, SketchArc2 As SldWorks.SketchArc
'                    Dim Displaydimention As SldWorks.DisplayDimension

'                    基准面1 = DatumPlane("前视", 8, NkLM_ReducingGrooveDepthDiameter - NkLM_NstepHorizontalLineStartpoint.Y, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    line1 = part.SketchManager.CreateLine(NkLM_NstepHorizontalLineStartpoint.X + NkLM_DistanceBetweenKeywayDomeLAndNstepL + NkLM_KeywayCircleDiameter / 2, NkLM_KeywayCircleDiameter / 2, 0, NkLM_NstepHorizontalLineStartpoint.X + NkLM_DistanceBetweenKeywayDomeLAndNstepL + NkLM_KeywayLength - NkLM_KeywayCircleDiameter / 2, NkLM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(NkLM_NstepHorizontalLineStartpoint.X + NkLM_DistanceBetweenKeywayDomeLAndNstepL + NkLM_KeywayCircleDiameter / 2, -NkLM_KeywayCircleDiameter / 2, 0, NkLM_NstepHorizontalLineStartpoint.X + NkLM_DistanceBetweenKeywayDomeLAndNstepL + NkLM_KeywayLength - NkLM_KeywayCircleDiameter / 2, -NkLM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc1Segment = part.SketchManager.CreateTangentArc(NkLM_NstepHorizontalLineStartpoint.X + NkLM_DistanceBetweenKeywayDomeLAndNstepL + NkLM_KeywayCircleDiameter / 2, NkLM_KeywayCircleDiameter / 2, 0, NkLM_NstepHorizontalLineStartpoint.X + NkLM_DistanceBetweenKeywayDomeLAndNstepL + NkLM_KeywayCircleDiameter / 2, -NkLM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc2Segment = part.SketchManager.CreateTangentArc(NkLM_NstepHorizontalLineStartpoint.X + NkLM_DistanceBetweenKeywayDomeLAndNstepL + NkLM_KeywayLength - NkLM_KeywayCircleDiameter / 2, NkLM_KeywayCircleDiameter / 2, 0, NkLM_NstepHorizontalLineStartpoint.X + NkLM_DistanceBetweenKeywayDomeLAndNstepL + NkLM_KeywayLength - NkLM_KeywayCircleDiameter / 2, -NkLM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")

'                    SketchArc1 = arc1Segment
'                    SketchArc2 = arc2Segment
'                    point3 = SketchArc1.GetCenterPoint2
'                    point4 = SketchArc2.GetCenterPoint2
'                    point5 = part.SketchManager.CreatePoint(point3.X - NkLM_KeywayCircleDiameter / 2, 0, 0)
'                    point6 = part.SketchManager.CreatePoint(point5.X - NkLM_DistanceBetweenKeywayDomeLAndNstepL, 0, 0)
'                    point5.Select4(True, Nothing)
'                    Select Case NkLM_NclassMark
'                        Case 2
'                            Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.005 - NkLM_NlayerMark# * 0.005, 0)
'                            Displaydimention.CenterText = True
'                        Case 1
'                            part.AddDimension2(point3.X - NkLM_KeywayCircleDiameter / 2 - NkLM_DistanceBetweenKeywayDomeLAndNstepL * 2, -MaxValue_diameter - 0.005 - NkLM_NlayerMark# * 0.005, 0)
'                        Case 3
'                            part.AddDimension2(point3.X - NkLM_KeywayCircleDiameter / 2 + NkLM_DistanceBetweenKeywayDomeLAndNstepL, -MaxValue_diameter - 0.005 - NkLM_NlayerMark# * 0.005, 0)
'                        Case 4
'                            part.AddDimension2(point3.X - NkLM_KeywayCircleDiameter / 2 - NkLM_DistanceBetweenKeywayDomeLAndNstepL * 2, -NkLM_KeywayCircleDiameter, 0)
'                    End Select
'                    point7 = part.SketchManager.CreatePoint(point4.X + NkLM_KeywayCircleDiameter / 2, 0, 0)
'                    point5.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.01 - NkLM_NlayerMark# * 0.005, 0)
'                    Displaydimention.CenterText = True

'                    arc1Segment.Select4(False, Nothing)
'                    arc2Segment.Select4(True, Nothing)
'                    line1Segment = line1
'                    line2Segment = line2
'                    line1Segment.Select4(True, Nothing)
'                    line2Segment.Select4(True, Nothing)
'                    part.FeatureManager.FeatureCut4(True, False, True, 1, 0, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)
'                End Function
'                Public Function Right_halfKeyway_Moudle（RhM_NstepStartpoint As SldWorks.SketchPoint, RhM_NstepEndpoint As SldWorks.SketchPoint, RhM_KeywayCircleDiameter#, RhM_KeywayLength#, RhM_ReducingGrooveDepthDiameter#, RhM_NclassMark#, RhM_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    'Public Function 右半键槽模块（N阶处起点 As SldWorks.SketchPoint, N阶处终点 As SldWorks.SketchPoint, 圆直径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)

'                    Dim line1, line2, line3 As SldWorks.SketchLine
'                    Dim SketchArc1 As SldWorks.SketchArc
'                    Dim arc1Segment, line1Segment, line2Segment, line3Segment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object
'                    基准面1 = DatumPlane("前视", 8, RhM_ReducingGrooveDepthDiameter - RhM_NstepStartpoint.Y, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    line1 = part.SketchManager.CreateLine(RhM_NstepStartpoint.X, RhM_KeywayCircleDiameter / 2, 0, RhM_NstepStartpoint.X + RhM_KeywayLength - RhM_KeywayCircleDiameter / 2, RhM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(RhM_NstepStartpoint.X, -RhM_KeywayCircleDiameter / 2, 0, RhM_NstepStartpoint.X + RhM_KeywayLength - RhM_KeywayCircleDiameter / 2, -RhM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(RhM_NstepStartpoint.X, RhM_KeywayCircleDiameter / 2, 0, RhM_NstepStartpoint.X, -RhM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    'arc1Segment = part.SketchManager.CreateTangentArc(RhM_NstepStartpoint.X + RhM_KeywayLength - RhM_KeywayCircleDiameter / 2, RhM_NstepStartpoint.X + RhM_KeywayCircleDiameter / 2, 0, RhM_KeywayLength - RhM_KeywayCircleDiameter / 2, -RhM_KeywayCircleDiameter / 2, 0, 1)
'                    arc1Segment = part.SketchManager.CreateTangentArc(RhM_NstepStartpoint.X + RhM_KeywayLength - RhM_KeywayCircleDiameter / 2, RhM_KeywayCircleDiameter / 2, 0, RhM_NstepStartpoint.X + RhM_KeywayLength - RhM_KeywayCircleDiameter / 2, -RhM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")
'                    SketchArc1 = arc1Segment
'                    point3 = SketchArc1.GetCenterPoint2
'                    point4 = part.SketchManager.CreatePoint(point3.X + RhM_KeywayCircleDiameter / 2, 0, 0)
'                    point5 = part.SketchManager.CreatePoint(RhM_NstepStartpoint.X, 0, 0)
'                    point4.Select4(True, Nothing)
'                    If RhM_NclassMark = 1 Then
'                        Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.01 - RhM_NlayerMark# * 0.005, 0)
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                        Displaydimention.CenterText = True   '自动居中
'                        Dimension = Displaydimention.GetDimension2(0)
'                        DimensionTolerance = Dimension.Tolerance
'                        DimensionTolerance.Type = TolType
'                        DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    ElseIf RhM_NclassMark = 2 Then
'                        point6 = part.SketchManager.CreatePoint(RhM_NstepEndpoint.X, 0, 0)
'                        point4.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(RhM_NstepEndpoint.X - 3 * (RhM_NstepEndpoint.X - point4.X) / 4, RhM_KeywayCircleDiameter, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                    End If
'                    arc1Segment.Select4(False, Nothing)
'                    line1Segment = line1
'                    line2Segment = line2
'                    line3Segment = line3
'                    line1Segment.Select4(True, Nothing)
'                    line2Segment.Select4(True, Nothing)
'                    line3Segment.Select4(True, Nothing)
'                    part.FeatureManager.FeatureCut4(True, False, True, 1, 0, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)

'                    '基准面2 = 基准面("右视", 8, N阶处起点.X + 键长 / 2, 0, 0, 0)
'                    '基准面2.Select2(False, 2)
'                    'SketchManager.InsertSketch(True)
'                    '基准面2.Select2(False, 2)
'                    'part.BlankRefGeom()
'                    'point1 = part.SketchManager.CreatePoint(0, N阶处起点.Y, 0)
'                    'point2 = part.SketchManager.CreatePoint(0, -N阶处起点.Y, 0)
'                    'point1.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, 0, -(N阶处起点.Y + 0.01 + 标注在第N层# * 0.005))
'                    'Displaydimention.CenterText = True

'                    'point3 = part.SketchManager.CreatePoint(N阶处起点.Y, 0, 0)
'                    'point4 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处起点.Y, 0, 0)
'                    'point4.Select4(False, Nothing)
'                    'point3.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, -N阶处起点.Y - 0.005 - 标注在第N层# * 0.005, 0)
'                    'Displaydimention.CenterText = True

'                    'point5 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处起点.Y, 圆直径 / 2, 0)
'                    'point6 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处起点.Y, -圆直径 / 2, 0)
'                    'point5.Select4(False, Nothing)
'                    'point6.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, 0, N阶处起点.Y + 0.01 + 标注在第N层# * 0.005)
'                    'Displaydimention.CenterText = True
'                    'SketchManager.InsertSketch(True)
'                End Function
'                Public Function Left_halfKeyway_Moudle（LhM_NstepEndpoint As SldWorks.SketchPoint, LhM_NstepStartpoint As SldWorks.SketchPoint, LhM_KeywayCircleDiameter#, LhM_KeywayLength#, LhM_ReducingGrooveDepthDiameter#, LhM_NclassMark#, LhM_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    'Public Function 左半键槽模块（N阶处终点 As SldWorks.SketchPoint, N阶处起点 As SldWorks.SketchPoint, 圆直径#, 键长#, 去槽深直径#, 第N类标注#, 标注在第N层#)
'                    Dim line1, line2, line3 As SldWorks.SketchLine
'                    Dim SketchArc1 As SldWorks.SketchArc
'                    Dim arc1Segment, line1Segment, line2Segment, line3Segment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim 基准面1 As SldWorks.Feature
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object

'                    基准面1 = DatumPlane("前视", 8, LhM_ReducingGrooveDepthDiameter - LhM_NstepEndpoint.Y, 0, 0, 0)
'                    基准面1.Select2(False, 2)
'                    SketchManager.InsertSketch(True)
'                    基准面1.Select2(False, 2)
'                    part.BlankRefGeom()
'                    line1 = part.SketchManager.CreateLine(LhM_NstepEndpoint.X, LhM_KeywayCircleDiameter / 2, 0, LhM_NstepEndpoint.X - LhM_KeywayLength + LhM_KeywayCircleDiameter / 2, LhM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(LhM_NstepEndpoint.X, -LhM_KeywayCircleDiameter / 2, 0, LhM_NstepEndpoint.X - LhM_KeywayLength + LhM_KeywayCircleDiameter / 2, -LhM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(LhM_NstepEndpoint.X, LhM_KeywayCircleDiameter / 2, 0, LhM_NstepEndpoint.X, -LhM_KeywayCircleDiameter / 2, 0)
'                    part.SketchAddConstraints("sgFIXED")
'                    arc1Segment = part.SketchManager.CreateTangentArc(LhM_NstepEndpoint.X - LhM_KeywayLength + LhM_KeywayCircleDiameter / 2, LhM_KeywayCircleDiameter / 2, 0, LhM_NstepEndpoint.X - LhM_KeywayLength + LhM_KeywayCircleDiameter / 2, -LhM_KeywayCircleDiameter / 2, 0, 1)
'                    part.SketchAddConstraints("sgFIXED")

'                    SketchArc1 = arc1Segment
'                    point3 = SketchArc1.GetCenterPoint2
'                    point4 = part.SketchManager.CreatePoint(point3.X - LhM_KeywayCircleDiameter / 2, 0, 0)
'                    point5 = part.SketchManager.CreatePoint(LhM_NstepEndpoint.X, 0, 0)
'                    point4.Select4(True, Nothing)
'                    If LhM_NclassMark = 1 Then
'                        Displaydimention = part.AddDimension2(point3.X, -MaxValue_diameter - 0.01 - LhM_NlayerMark# * 0.005, 0)
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                        Displaydimention.CenterText = True   '自动居中
'                        Dimension = Displaydimention.GetDimension2(0)
'                        DimensionTolerance = Dimension.Tolerance
'                        DimensionTolerance.Type = TolType
'                        DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    ElseIf LhM_NclassMark = 2 Then
'                        point6 = part.SketchManager.CreatePoint(LhM_NstepStartpoint.X, 0, 0)
'                        point4.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(LhM_NstepStartpoint.X - 3 * (LhM_NstepStartpoint.X - point4.X) / 4, LhM_KeywayCircleDiameter, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                    End If
'                    arc1Segment.Select4(False, Nothing)
'                    line1Segment = line1
'                    line2Segment = line2
'                    line3Segment = line3
'                    line1Segment.Select4(True, Nothing)
'                    line2Segment.Select4(True, Nothing)
'                    line3Segment.Select4(True, Nothing)
'                    part.FeatureManager.FeatureCut4(True, False, True, 1, 0, 0, 0, False, False, False, False, 0, 0, False, False, False, False, False, True, True, True, True, False, 0, 0, False, False)

'                    '基准面2 = 基准面("右视", 8, N阶处终点.X - 键长 / 2, 0, 0, 0)
'                    '基准面2.Select2(False, 2)
'                    'SketchManager.InsertSketch(True)
'                    '基准面2.Select2(False, 2)
'                    'part.BlankRefGeom()
'                    'point1 = part.SketchManager.CreatePoint(0, N阶处终点.Y, 0)
'                    'point2 = part.SketchManager.CreatePoint(0, -N阶处终点.Y, 0)
'                    'point1.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, 0, -(N阶处终点.Y + 0.01 + 标注在第N层# * 0.005))
'                    'Displaydimention.CenterText = True

'                    'point3 = part.SketchManager.CreatePoint(N阶处终点.Y, 0, 0)
'                    'point4 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处终点.Y, 0, 0)
'                    'point4.Select4(False, Nothing)
'                    'point3.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, -N阶处终点.Y - 0.005 - 标注在第N层# * 0.005, 0)
'                    'Displaydimention.CenterText = True

'                    'point5 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处终点.Y, 圆直径 / 2, 0)
'                    'point6 = part.SketchManager.CreatePoint(-去槽深直径 + N阶处终点.Y, -圆直径 / 2, 0)
'                    'point5.Select4(False, Nothing)
'                    'point6.Select4(True, Nothing)
'                    'Displaydimention = part.AddDimension2(0, 0, N阶处终点.Y + 0.01 + 标注在第N层# * 0.005)
'                    'Displaydimention.CenterText = True
'                    'SketchManager.InsertSketch(True)
'                End Function
'                Public Function Right_rightRrapezoid_cut_Moudle（RrcM_NstepHorizontalLine As SldWorks.SketchLine, RrcM_TrapezoidBaseLineLength#, RrcM_TrapezoidHeight#, RrcM_TrapezoidTopLineLength#, RrcM_NclassMark#, RrcM_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ' Public Function 右直角梯形切除模块（N阶水平线终点 As SldWorks.SketchPoint, 梯形底边水平距离#, 梯形竖直距离#, 梯形上边水平距离#, 第N类标注#, 标注在第N层#）
'                    'Public Sub Right_rightRrapezoid_cut（Rrc_Nstep_RightRightRrapezoid#, Rrc_TrapezoidTopLineLength#, Rrc_TrapezoidHeight#, Rrc_TrapezoidBaseLineLength#, Rrc_NclassMark#, Rrc_NlayerMark#）
'                    Dim line1, line2, line3, line4 As SldWorks.SketchLine
'                    Dim line1Segment, line3Segment, SketchSegment As SldWorks.SketchSegment
'                    Dim point1, point2, point3, point4, point5, point6, point7, point8, point9 As SldWorks.ISketchPoint
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object


'                    point1 = RrcM_NstepHorizontalLine.GetEndPoint2()
'                    point2 = RrcM_NstepHorizontalLine.GetStartPoint2()
'                    line1 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X - RrcM_TrapezoidBaseLineLength#, point1.Y, 0)  '第1条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(point1.X, point1.Y, 0, point1.X, point1.Y - RrcM_TrapezoidHeight, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(point1.X, point1.Y - RrcM_TrapezoidHeight, 0, point1.X - RrcM_TrapezoidTopLineLength, point1.Y - RrcM_TrapezoidHeight, 0)  '第3条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line4 = part.SketchManager.CreateLine(point1.X - RrcM_TrapezoidTopLineLength, point1.Y - RrcM_TrapezoidHeight, 0, point1.X - RrcM_TrapezoidBaseLineLength#, point1.Y, 0） '第4条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    point3 = line4.GetStartPoint2
'                    point4 = line4.IGetEndPoint2
'                    point3.Select4(False, Nothing)
'                    part.Extension.SelectByID2("", "SKETCHPOINT", point1.X - RrcM_TrapezoidBaseLineLength#, point1.Y, 0, True, 0, Nothing, 0)
'                    If RrcM_NclassMark = 1 Then
'                        Displaydimention = part.AddHorizontalDimension2(point4.X, -MaxValue_diameter - 0.005 - RrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        SketchSegment = line3
'                        SketchSegment.Select4(False, Nothing)
'                        Displaydimention = part.AddHorizontalDimension2(point4.X + RrcM_TrapezoidTopLineLength * 2.5, -MaxValue_diameter - 0.015 - RrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        point5 = line3.GetEndPoint2()
'                        point6 = part.SketchManager.CreatePoint(point1.X - RrcM_TrapezoidTopLineLength / 2, -point5.Y, 0)
'                        line3Segment = line3
'                        point6.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point5.X + RrcM_TrapezoidTopLineLength / 2, MaxValue_diameter + 0.01 + RrcM_NlayerMark# * 0.005, 0) '第一阶长标注
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", True)
'                    ElseIf RrcM_NclassMark = 2 Then
'                        Displaydimention = part.AddDimension2(point4.X - RrcM_TrapezoidBaseLineLength# + RrcM_TrapezoidTopLineLength, -MaxValue_diameter - 0.005 - RrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        SketchSegment = line3
'                        SketchSegment.Select4(False, Nothing)
'                        Displaydimention = part.AddHorizontalDimension2(point4.X + RrcM_TrapezoidTopLineLength * 2.5, -MaxValue_diameter - 0.015 - RrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        point5 = line3.GetEndPoint2()
'                        point6 = part.SketchManager.CreatePoint(point1.X + RrcM_TrapezoidBaseLineLength / 2, -point5.Y, 0)
'                        line3Segment = line3
'                        point6.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X + RrcM_TrapezoidBaseLineLength / 2, MaxValue_diameter + 0.01 + RrcM_NlayerMark# * 0.005, 0) '第一阶长标注
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", True)
'                    ElseIf RrcM_NclassMark = 3 Then
'                        'Displaydimention = part.AddDimension2(point4.X - RrcM_TrapezoidTopLineLength# + RrcM_TrapezoidBaseLineLength, -MaxValue_diameter - 0.005 - RrcM_NlayerMark# * 0.005, 0)
'                        'Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        SketchSegment = line3
'                        SketchSegment.Select4(False, Nothing)
'                        Displaydimention = part.AddHorizontalDimension2(point3.X, -MaxValue_diameter - 0.015 - RrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", True)
'                        part.ClearSelection2(True)
'                        point4.Select4(False, Nothing)
'                        point1.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point4.X, -MaxValue_diameter - 0.03 - RrcM_NlayerMark# * 0.01, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        point7 = RrcM_NstepHorizontalLine.GetStartPoint2()
'                        point4.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point4.X, -MaxValue_diameter - 0.03 - RrcM_NlayerMark# * 0.01, 0)
'                        part.ClearSelection2(True)
'                        point5 = line3.GetEndPoint2()
'                        point6 = part.SketchManager.CreatePoint(point1.X + RrcM_TrapezoidBaseLineLength / 2, -point5.Y, 0)
'                        part.SketchManager.InsertSketch(True)
'                        point4.Select4(False, Nothing)
'                        point2.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point4.X, -MaxValue_diameter - 0.03 - RrcM_NlayerMark# * 0.01, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        line3Segment = line3
'                        point6.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point1.X + RrcM_TrapezoidBaseLineLength / 2, MaxValue_diameter + 0.01 + RrcM_NlayerMark# * 0.005, 0)
'                    End If
'                    line1Segment = line1
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    part.ClearSelection2(True)
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, PI * 2, 0, False, False, 0, 0, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                End Function
'                Public Function Left_rightRrapezoid_cut_Moudle（LrcM_NstepHorizontalLineStartpoint As SldWorks.SketchPoint, LrcM_TrapezoidTopLineLength#, LrcM_TrapezoidHeight#, LrcM_TrapezoidBaseLineLength#, LrcM_NclassMark#, LrcM_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    'Public Function 左直角梯形切除模块（N阶水平线起点 As SldWorks.SketchPoint, 梯形底边水平距离#, 梯形竖直距离#, 梯形上边水平距离#, 第N类标注#, 标注在第N层#）
'                    'Public Function Right_rightRrapezoid_cut_Moudle（RrcM_NstepHorizontalLineStartpoint As SldWorks.SketchPoint, RrcM_TrapezoidBaseLineLength#, RrcM_TrapezoidHeight#, RrcM_TrapezoidTopLineLength#, RrcM_NclassMark#, RrcM_NlayerMark#）
'                    Dim line1, line2, line3, line4 As SldWorks.SketchLine
'                    Dim line1Segment, line3Segment, SketchSegment As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object

'                    LrcM_NstepHorizontalLineStartpoint.Select4(False, Nothing)
'                    line1 = part.SketchManager.CreateLine(LrcM_NstepHorizontalLineStartpoint.X, LrcM_NstepHorizontalLineStartpoint.Y, 0, LrcM_NstepHorizontalLineStartpoint.X + LrcM_TrapezoidBaseLineLength, LrcM_NstepHorizontalLineStartpoint.Y, 0)  '第1条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(LrcM_NstepHorizontalLineStartpoint.X, LrcM_NstepHorizontalLineStartpoint.Y, 0, LrcM_NstepHorizontalLineStartpoint.X, LrcM_NstepHorizontalLineStartpoint.Y - LrcM_TrapezoidHeight, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(LrcM_NstepHorizontalLineStartpoint.X, LrcM_NstepHorizontalLineStartpoint.Y - LrcM_TrapezoidHeight, 0, LrcM_NstepHorizontalLineStartpoint.X + LrcM_TrapezoidTopLineLength, LrcM_NstepHorizontalLineStartpoint.Y - LrcM_TrapezoidHeight, 0)  '第3条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line4 = part.SketchManager.CreateLine（LrcM_NstepHorizontalLineStartpoint.X + LrcM_TrapezoidTopLineLength, LrcM_NstepHorizontalLineStartpoint.Y - LrcM_TrapezoidHeight, 0, LrcM_NstepHorizontalLineStartpoint.X + LrcM_TrapezoidBaseLineLength, LrcM_NstepHorizontalLineStartpoint.Y, 0)  '第4条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    point3 = line4.GetStartPoint2
'                    point4 = line4.GetEndPoint2
'                    part.Extension.SelectByID2("", "SKETCHPOINT", LrcM_NstepHorizontalLineStartpoint.X + LrcM_TrapezoidBaseLineLength, LrcM_NstepHorizontalLineStartpoint.Y, 0, False, 0, Nothing, 0)
'                    part.Extension.SelectByID2("", "SKETCHPOINT", LrcM_NstepHorizontalLineStartpoint.X + LrcM_TrapezoidTopLineLength, LrcM_NstepHorizontalLineStartpoint.Y - LrcM_TrapezoidHeight, 0, True, 0, Nothing, 0)
'                    If LrcM_NclassMark = 1 Then
'                        Displaydimention = part.AddDimension2(point4.X, -MaxValue_diameter - 0.005 - LrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        SketchSegment = line3
'                        SketchSegment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point4.X, -MaxValue_diameter - 0.01 - LrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        point5 = line3.GetEndPoint2()
'                        point6 = part.SketchManager.CreatePoint(LrcM_NstepHorizontalLineStartpoint.X + LrcM_TrapezoidTopLineLength / 2, -point5.Y, 0)
'                        line3Segment = line3
'                        point6.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(LrcM_NstepHorizontalLineStartpoint.X + LrcM_TrapezoidTopLineLength / 2, 0, 0) '第一阶长标注
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                        Displaydimention.CenterText = True   '自动居中
'                    ElseIf LrcM_NclassMark = 2 Then
'                        Displaydimention = part.AddDimension2(point4.X - LrcM_TrapezoidTopLineLength / 2, -MaxValue_diameter - 0.005 - LrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        SketchSegment = line3
'                        SketchSegment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point4.X - LrcM_TrapezoidTopLineLength * 2, -MaxValue_diameter - 0.01 - LrcM_NlayerMark# * 0.005, 0)
'                        Displaydimention.CenterText = True
'                        point5 = line3.GetEndPoint2()
'                        point6 = part.SketchManager.CreatePoint(LrcM_NstepHorizontalLineStartpoint.X - LrcM_TrapezoidTopLineLength / 2, -point5.Y, 0)
'                        line3Segment = line3
'                        point6.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(LrcM_NstepHorizontalLineStartpoint.X - LrcM_TrapezoidTopLineLength / 2, MaxValue_diameter + 0.01 + LrcM_NlayerMark# * 0.005, 0) '第一阶长标注
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                    End If
'                    line1Segment = line1
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    part.ClearSelection2(True)
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, PI * 2, 0, False, False, 0, 0, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                End Function
'                Public Function 镂空左倒角切除模块（切除起点 As SldWorks.SketchPoint, 倒角水平距离#, 倒角竖直距离#, 第N类标注#, 标注在第N层#)
'                    Dim line1, line2, line3, line4, line5, line6, line7, line8, line9, line10, line11, line12, line13, line14, line15, line16, line17, line18, line19, line20, line01, line02 As SldWorks.SketchLine
'                    Dim line1Segment, line4Segment, line3Segment, line5Segment, SketchSegment, pointDimension As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim Displaydimention As SldWorks.DisplayDimension

'                    切除起点.Select4(False, Nothing)
'                    line1 = part.SketchManager.CreateLine(切除起点.X, 切除起点.Y, 0, 切除起点.X + 倒角水平距离, 切除起点.Y, 0)  '第1条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(切除起点.X, 切除起点.Y, 0, 切除起点.X, 切除起点.Y + 倒角竖直距离, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(切除起点.X, 切除起点.Y + 倒角竖直距离, 0, 切除起点.X + 倒角水平距离, 切除起点.Y, 0)  '第3条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    point3 = line1.GetEndPoint2()
'                    point4 = line2.GetEndPoint2()
'                    point5 = part.SketchManager.CreatePoint(point3.X, -point3.Y, 0)
'                    point6 = part.SketchManager.CreatePoint(point4.X, -point4.Y, 0)
'                    line4 = part.SketchManager.CreateCenterLine(point4.X, point4.Y, 0, point4.X, point4.Y + 0.00001, 0)
'                    line5 = part.SketchManager.CreateCenterLine(切除起点.X, -切除起点.Y - 倒角竖直距离, 0, 切除起点.X + 倒角水平距离, -切除起点.Y, 0)
'                    line3Segment = line3
'                    line1Segment = line1
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, PI * 2, 0, False, False, 0, 0, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                    If 第N类标注# = 0 Then
'                        'Dim number As String
'                        'Dim myNote As Object
'                        'Dim myAnno As Object
'                        'line3Segment.Select4(False, Nothing)
'                        'number = 两数之比(倒角竖直距离 * 2, 倒角水平距离)
'                        'myNote = part.InsertNote(number)
'                        'myAnno = myNote.GetAnnotation()
'                        'myAnno.SetPosition(-切除起点.X, 0, 0)
'                        'myAnno.SetLeader3(3, 0, True, False, False, False)
'                        'myAnno.SetLeaderAttachmentPointAtIndex(0, (point3.X + point4.X) / 2, （point3.Y + point4.Y） / 2, 0)     '加注释引导
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X, point4.Y + 0.004 + 标注在第N层# * 0.002, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        point5.Select4(False, Nothing)
'                        point3.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X - 标注在第N层# * 0.005, 0, 0)
'                        part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 1, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
'                        Displaydimention.CenterText = True
'                        Displaydimention.LeaderVisibility = 2
'                        point6.Select4(False, Nothing)
'                        point4.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(切除起点.X - 标注在第N层# * 0.005, 0, 0)
'                        part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 1, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
'                        Displaydimention.CenterText = True
'                        Displaydimention.LeaderVisibility = 2
'                    ElseIf 第N类标注# = 1 Then
'                        line4Segment = line4
'                        line4Segment.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X + 标注在第N层# * 0.005, point4.Y + 标注在第N层# * 0.005, 0) '倒角长标注
'                        Displaydimention.CenterText = True
'                    ElseIf 第N类标注# = 2 Then
'                        line5Segment = line5
'                        line5Segment.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(切除起点.X - 标注在第N层# * 0.005, 0, 0) '倒角左边标注
'                        Displaydimention.CenterText = True
'                    End If
'                End Function
'                Public Function 镂空右倒角切除模块（切除起点 As SldWorks.SketchPoint, 倒角水平距离#, 倒角竖直距离#, 第N类标注#, 标注在第N层#)
'                    Dim line1, line2, line3, line4, line5, line6, line7, line8, line9, line10, line11, line12, line13, line14, line15, line16, line17, line18, line19, line20, line01, line02 As SldWorks.SketchLine
'                    Dim line1Segment, line4Segment, line3Segment, line5Segment, SketchSegment, pointDimension As SldWorks.SketchSegment
'                    Dim point3, point4, point5, point6 As SldWorks.ISketchPoint
'                    Dim Displaydimention As SldWorks.DisplayDimension

'                    切除起点.Select4(False, Nothing)
'                    line1 = part.SketchManager.CreateLine(切除起点.X, 切除起点.Y, 0, 切除起点.X - 倒角水平距离, 切除起点.Y, 0)  '第1条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line2 = part.SketchManager.CreateLine(切除起点.X, 切除起点.Y, 0, 切除起点.X, 切除起点.Y + 倒角竖直距离, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    line3 = part.SketchManager.CreateLine(切除起点.X, 切除起点.Y - 倒角竖直距离, 0, 切除起点.X + 倒角水平距离, 切除起点.Y, 0)  '第2条线段
'                    part.SketchAddConstraints("sgFIXED")
'                    point3 = line1.GetEndPoint2()
'                    point4 = line2.GetEndPoint2()
'                    point5 = part.SketchManager.CreatePoint(point3.X, -point3.Y, 0)
'                    point6 = part.SketchManager.CreatePoint(point4.X, -point4.Y, 0)
'                    line4 = part.SketchManager.CreateCenterLine(point4.X, point4.Y, 0, point4.X, point4.Y + 0.00001, 0)
'                    line5 = part.SketchManager.CreateCenterLine(切除起点.X, -切除起点.Y - 倒角竖直距离, 0, 切除起点.X + 倒角水平距离, -切除起点.Y, 0)
'                    line1Segment = line1
'                    line3Segment = line3
'                    line1Segment.Select4(False, Nothing)
'                    part.Extension.SelectByID2("基准轴1", "AXIS", 0, 0, 0, True, 16, Nothing, 0)
'                    part.FeatureManager.FeatureRevolve2(True, True, False, True, False, False, 0, 0, PI * 2, 0, False, False, 0, 0, 0, 0, 0, True, True, True)
'                    part.SelectionManager.EnableContourSelection = False
'                    If 第N类标注# = 0 Then
'                        'Dim number As String
'                        'Dim myNote As Object
'                        'Dim myAnno As Object
'                        'line3Segment.Select4(False, Nothing)
'                        'number = 两数之比(倒角竖直距离 * 2, 倒角水平距离)
'                        'myNote = part.InsertNote(number)
'                        'myAnno = myNote.GetAnnotation()
'                        'myAnno.SetPosition(-切除起点.X, 0, 0)
'                        'myAnno.SetLeader3(3, 0, True, False, False, False)
'                        'myAnno.SetLeaderAttachmentPointAtIndex(0, (point3.X + point4.X) / 2, （point3.Y + point4.Y） / 2, 0)     '加注释引导
'                        line1Segment.Select4(False, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X, point4.Y + 0.004 + 标注在第N层# * 0.002, 0)
'                        Displaydimention.CenterText = True
'                        part.ClearSelection2(True)
'                        point5.Select4(False, Nothing)
'                        point3.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X - 标注在第N层# * 0.005, 0, 0)
'                        part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 1, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
'                        Displaydimention.CenterText = True
'                        Displaydimention.LeaderVisibility = 2
'                        point6.Select4(False, Nothing)
'                        point4.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(切除起点.X - 标注在第N层# * 0.005, 0, 0)
'                        part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 1, True, 12, 12, "<MOD-DIAM>", "", True, "", "", False)
'                        Displaydimention.CenterText = True
'                        Displaydimention.LeaderVisibility = 2
'                    ElseIf 第N类标注# = 1 Then
'                        line4Segment = line4
'                        line4Segment.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(point3.X + 标注在第N层# * 0.005, point4.Y + 标注在第N层# * 0.005, 0) '倒角长标注
'                        Displaydimention.CenterText = True
'                    ElseIf 第N类标注# = 2 Then
'                        line5Segment = line5
'                        line5Segment.Select4(False, Nothing)
'                        line3Segment.Select4(True, Nothing)
'                        Displaydimention = part.AddDimension2(切除起点.X - 标注在第N层# * 0.005, 0, 0) '倒角左边标注
'                        Displaydimention.CenterText = True
'                    End If
'                End Function
'                Public Sub Stepshaft_length_Dimension（SlD_TotalSteps#, SlD_N_vertical_line#, SlD_M_vertical_line#, SlD_NclassMark#, SlD_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "") '标注在第N层#意思是使标注分层，可填1,2,3,4,5
'                    'Public Sub 阶梯轴水平距离标注（阶梯数#, 第N条竖直线#, 第M条竖直线#, 标注在第N层#） '标注在第N层#意思是使标注分层，可填1,2,3,4,5
'                    TolMax = TolMax / 1000 ： TolMin = TolMin / 1000
'                    If SlD_N_vertical_line = 1 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment001, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 2 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment003, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 3 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment005, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 4 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment007, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 5 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment009, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 6 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0011, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 7 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0013, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 8 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0015, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 9 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0017, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 10 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0019, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 11 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0021, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 12 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0023, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 13 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0025, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SlD_N_vertical_line = 14 Then
'                        阶梯轴水平距离标注总模块(SlD_M_vertical_line#, SlD_TotalSteps#, SlD_NlayerMark#, SketchSegment0027, SlD_NclassMark, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                End Sub
'                Public Function 阶梯轴水平距离标注总模块(第M条竖直线#, 阶梯数#, 标注在第N层#, 线3 As SldWorks.SketchSegment, SlD_NclassMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    If 第M条竖直线 = 1 Then
'                        阶梯轴水平距离标注分模块1(line002, SketchSegment001, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf 第M条竖直线 = 2 Then
'                        阶梯轴水平距离标注分模块1(line002, SketchSegment003, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf 第M条竖直线 = 3 Then
'                        阶梯轴水平距离标注分模块1(line004, SketchSegment005, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf 第M条竖直线 = 4 Then
'                        阶梯轴水平距离标注分模块1(line006, SketchSegment007, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf 第M条竖直线 = 5 Then
'                        阶梯轴水平距离标注分模块1(line008, SketchSegment009, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf 第M条竖直线 = 6 Then
'                        If Not 阶梯数 = 5 Then
'                            阶梯轴水平距离标注分模块1(line0010, SketchSegment0011, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 5 Then
'                            阶梯轴水平距离标注分模块1(line0010, SketchSegment0001, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 7 Then
'                        If Not 阶梯数 = 6 Then
'                            阶梯轴水平距离标注分模块1(line0012, SketchSegment0013, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 6 Then
'                            阶梯轴水平距离标注分模块1(line0012, SketchSegment0003, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 8 Then
'                        If Not 阶梯数 = 7 Then
'                            阶梯轴水平距离标注分模块1(line0014, SketchSegment0015, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 7 Then
'                            阶梯轴水平距离标注分模块1(line0014, SketchSegment0005, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 9 Then
'                        If Not 阶梯数 = 8 Then
'                            阶梯轴水平距离标注分模块1(line0016, SketchSegment0017, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 8 Then
'                            阶梯轴水平距离标注分模块1(line0016, SketchSegment0007, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 10 Then
'                        If Not 阶梯数 = 9 Then
'                            阶梯轴水平距离标注分模块1(line0018, SketchSegment0019, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 9 Then
'                            阶梯轴水平距离标注分模块1(line0018, SketchSegment0009, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 11 Then
'                        If Not 阶梯数 = 10 Then
'                            阶梯轴水平距离标注分模块1(line0020, SketchSegment0021, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 10 Then
'                            阶梯轴水平距离标注分模块1(line0020, SketchSegment00011, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 12 Then
'                        If Not 阶梯数 = 11 Then
'                            阶梯轴水平距离标注分模块1(line0022, SketchSegment0023, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 11 Then
'                            阶梯轴水平距离标注分模块1(line0022, SketchSegment00013, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 13 Then
'                        If Not 阶梯数 = 12 Then
'                            阶梯轴水平距离标注分模块1(line0024, SketchSegment0025, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 12 Then
'                            阶梯轴水平距离标注分模块1(line0024, SketchSegment00015, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 14 Then
'                        If Not 阶梯数 = 13 Then
'                            阶梯轴水平距离标注分模块1(line0026, SketchSegment0027, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 13 Then
'                            阶梯轴水平距离标注分模块1(line0026, SketchSegment00017, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    ElseIf 第M条竖直线 = 15 Then
'                        If Not 阶梯数 = 14 Then
'                            阶梯轴水平距离标注分模块1(line0028, SketchSegment0029, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        ElseIf 阶梯数 = 14 Then
'                            阶梯轴水平距离标注分模块1(line0028, SketchSegment00019, 线3, SlD_NclassMark, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                        End If
'                    End If
'                End Function
'                Public Function 阶梯轴水平距离标注分模块1(线1 As SldWorks.SketchLine, 线2 As SldWorks.SketchSegment, 线3 As SldWorks.SketchSegment, SlD_NclassMark#, 标注在第N层#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    Dim point1 As SldWorks.ISketchPoint
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object
'                    point1 = 线1.GetStartPoint2
'                    线3.Select4(False, Nothing)
'                    线2.Select4(True, Nothing)
'                    If SlD_NclassMark# = 1 Then
'                        Displaydimention = part.AddDimension2(point1.X, -MaxValue_diameter - 0.03 - 标注在第N层# * 0.01, 0) '第一阶长标注
'                    ElseIf SlD_NclassMark# = 2 Then
'                        Displaydimention = part.AddDimension2(point1.X, MaxValue_diameter + 0.03 + 标注在第N层# * 0.01, 0) '第一阶长标注
'                    End If
'                    part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                    Displaydimention.CenterText = True   '自动居中
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                End Function
'                Public Sub Stepshaft_diameter_Dimension(SdD_Nstep#, SdD_MarkPosition#, SdD_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    'Public Sub 阶梯轴直径距离标注(第N阶#, 标注位置#, 标注在第N层#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    TolMax = TolMax / 1000 ： TolMin = TolMin / 1000
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    If SdD_Nstep# = 1 Then
'                        阶梯轴直径距离标注分模块1(line002, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 2 Then
'                        阶梯轴直径距离标注分模块1(line004, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 3 Then
'                        阶梯轴直径距离标注分模块1(line006, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 4 Then
'                        阶梯轴直径距离标注分模块1(line008, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 5 Then
'                        阶梯轴直径距离标注分模块1(line0010, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 6 Then
'                        阶梯轴直径距离标注分模块1(line0012, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 7 Then
'                        阶梯轴直径距离标注分模块1(line0014, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 8 Then
'                        阶梯轴直径距离标注分模块1(line0016, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 9 Then
'                        阶梯轴直径距离标注分模块1(line0018, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 10 Then
'                        阶梯轴直径距离标注分模块1(line0020, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 11 Then
'                        阶梯轴直径距离标注分模块1(line0022, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 12 Then
'                        阶梯轴直径距离标注分模块1(line0024, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 13 Then
'                        阶梯轴直径距离标注分模块1(line0026, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 14 Then
'                        阶梯轴直径距离标注分模块1(line0028, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    ElseIf SdD_Nstep# = 15 Then
'                        阶梯轴直径距离标注分模块1(line0030, SdD_MarkPosition#, SdD_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    End If
'                    part.SketchManager.InsertSketch(True)
'                End Sub
'                Public Function 阶梯轴直径距离标注分模块1(第N阶水平线 As SldWorks.SketchLine, 标注位置#, 标注在第N层#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                    Dim point1, point2, point3 As SldWorks.ISketchPoint
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object
'                    point1 = 第N阶水平线.GetStartPoint2
'                    point2 = 第N阶水平线.GetEndPoint2
'                    point3 = part.SketchManager.CreatePoint(point1.X, -point1.Y, 0)
'                    point1.Select4(True, Nothing)
'                    If 标注在第N层 = 0 Then
'                        If 标注位置 = 1 Then
'                            Displaydimention = part.AddDimension2((point1.X + point2.X) / 2, 0, 0) '第一阶长标注
'                        ElseIf 标注位置 = 2 Then
'                            Displaydimention = part.AddDimension2((3 * point1.X + point2.X) / 4, 0, 0) '第一阶长标注
'                        ElseIf 标注位置 = 3 Then
'                            Displaydimention = part.AddDimension2((point1.X + 3 * point2.X) / 4, 0, 0) '第一阶长标注
'                        ElseIf 标注位置 = 4 Then
'                            Displaydimention = part.AddDimension2(point1.X - 0.02, 0, 0) '第一阶长标注
'                        ElseIf 标注位置 = 5 Then
'                            Displaydimention = part.AddDimension2(point2.X + 0.02, 0, 0) '第一阶长标注
'                        ElseIf 标注位置 = 6 Then
'                            Displaydimention = part.AddDimension2((7 * point1.X + point2.X) / 8, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        ElseIf 标注位置 = 7 Then
'                            Displaydimention = part.AddDimension2((point1.X + 7 * point2.X) / 8, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        End If
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", True)
'                        Displaydimention.CenterText = True   '自动居中
'                    Else
'                        If 标注位置 = 1 Then
'                            Displaydimention = part.AddDimension2((point1.X + point2.X) / 2, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        ElseIf 标注位置 = 2 Then
'                            Displaydimention = part.AddDimension2((3 * point1.X + point2.X) / 4, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        ElseIf 标注位置 = 3 Then
'                            Displaydimention = part.AddDimension2((point1.X + 3 * point2.X) / 4, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        ElseIf 标注位置 = 4 Then
'                            Displaydimention = part.AddDimension2(point1.X - 0.02, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        ElseIf 标注位置 = 5 Then
'                            Displaydimention = part.AddDimension2(point2.X + 0.02, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        ElseIf 标注位置 = 6 Then
'                            Displaydimention = part.AddDimension2((7 * point1.X + point2.X) / 8, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        ElseIf 标注位置 = 7 Then
'                            Displaydimention = part.AddDimension2((point1.X + 7 * point2.X) / 8, MaxValue_diameter + 0.01 + 标注在第N层# * 0.005, 0) '第一阶长标注
'                        End If
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", True)
'                    End If
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    part.ClearSelection2(True)
'                End Function
'                Public Sub Insert_Datum(ID_Nstep#, ID_DatumSymbol$)
'                    ' Public Sub 插入基准(第N阶#, 基准符号$)
'                    If ID_Nstep = 1 Then
'                        插入基准模块(line002, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 2 Then
'                        插入基准模块(line004, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 3 Then
'                        插入基准模块(line006, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 4 Then
'                        插入基准模块(line008, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 5 Then
'                        插入基准模块(line0010, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 6 Then
'                        插入基准模块(line0012, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 7 Then
'                        插入基准模块(line0014, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 8 Then
'                        插入基准模块(line0016, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 9 Then
'                        插入基准模块(line0018, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 10 Then
'                        插入基准模块(line0020, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 11 Then
'                        插入基准模块(line0022, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 12 Then
'                        插入基准模块(line0024, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 13 Then
'                        插入基准模块(line0026, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 14 Then
'                        插入基准模块(line0028, ID_DatumSymbol$)
'                    ElseIf ID_Nstep = 15 Then
'                        插入基准模块(line0030, ID_DatumSymbol$)
'                    End If
'                End Sub
'                Public Function 插入基准模块(第N阶水平线 As SldWorks.SketchLine, 基准符号$)
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    Dim SketchSegment As SldWorks.SketchSegment
'                    Dim myDatumTag As Object
'                    Dim myAnnotation As Object
'                    point1 = 第N阶水平线.GetStartPoint2
'                    point2 = 第N阶水平线.GetEndPoint2

'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    Feature = part.SketchManager.ActiveSketch
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    SketchSegment = part.SketchManager.CreateLine(point1.X, -point1.Y, 0, point2.X, -point2.Y, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("", "EXTSKETCHSEGMENT", (point1.X + point2.X) / 2, -point1.Y, 0, False, 0, Nothing, 0)
'                    myDatumTag = part.InsertDatumTag2()
'                    myDatumTag.FilledTriangle = False
'                    myDatumTag.Shoulder = False
'                    myDatumTag.SetLabel(基准符号)
'                    myAnnotation = myDatumTag.GetAnnotation()
'                    myAnnotation.SetPosition((point1.X + point2.X) / 2, -point1.Y + 0.005, 0)
'                    part.ClearSelection2(True)
'                    part.Extension.SelectByID2("", "DATUMTAG", (point1.X + point2.X) / 2, -point1.Y + 0.005, 0, False, 0, Nothing, 0)
'                    part.Extension.MoveOrCopy(False, 1, False, 0, 0, 0, 0, -0.01, 0)
'                    part.Extension.SelectByID2("Line1@" & Feature.Name, "EXTSKETCHSEGMENT", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankSketch()
'                    part.ClearSelection2(True)
'                End Function
'                Public Shared Function 行为公差符号(公差符号$) As String
'                    Dim 直线度, 平面度, 圆度, 圆柱度, 线轮廓度, 面轮廓度, 倾斜度, 垂直度, 平行度, 位置度, 同轴度, 对称度, 圆跳动, 全跳动 As String
'                    Select Case 公差符号
'                        Case "直线度"
'                            直线度 = "<IGTOL-STRAIGHT>"
'                            行为公差符号 = 直线度
'                        Case "平面度"
'                            平面度 = "<IGTOL-FLAT>"
'                            行为公差符号 = 平面度
'                        Case "圆度"
'                            圆度 = "<IGTOL-CIRC>"
'                            行为公差符号 = 圆度
'                        Case "圆柱度"
'                            圆柱度 = "<IGTOL-CYL>"
'                            行为公差符号 = 圆柱度
'                        Case "线轮廓度"
'                            线轮廓度 = "<IGTOL-LPROF>"
'                            行为公差符号 = 线轮廓度
'                        Case "面轮廓度"
'                            面轮廓度 = "<IGTOL-SPROF>"
'                            行为公差符号 = 面轮廓度
'                        Case " 倾斜度"
'                            倾斜度 = "<IGTOL-ANGULAR>"
'                            行为公差符号 = 倾斜度
'                        Case "垂直度"
'                            垂直度 = "<IGTOL-PERP>"
'                            行为公差符号 = 垂直度
'                        Case "平行度"
'                            平行度 = "<IGTOL-PARA>"
'                            行为公差符号 = 平行度
'                        Case "位置度"
'                            位置度 = "<IGTOL-POSI>"
'                            行为公差符号 = 位置度
'                        Case "同轴度"
'                            同轴度 = "<IGTOL-CONC>"
'                            行为公差符号 = 同轴度
'                        Case "对称度"
'                            对称度 = "<IGTOL-SYMMETRY>"
'                            行为公差符号 = 对称度
'                        Case "圆跳动"
'                            圆跳动 = "<IGTOL-SRUN>"
'                            行为公差符号 = 圆跳动
'                        Case "全跳动"
'                            全跳动 = "<IGTOL-TRUN>"
'                            行为公差符号 = 全跳动
'                        Case Else
'                            Exit Select
'                    End Select
'                End Function
'                Public Sub Insert_Gtol(IG_Nstep#, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, Optional IG_TolDatum1$ = "", Optional IG_GtolSymbol2$ = "", Optional IG_GtolValue2$ = "", Optional IG_TolDatum2$ = "", Optional InsertBelowFrameTextAt$ = "")
'                    'Public Sub Insert_Gtol(公差符号1$, 公差数值1$,第N阶#, 第N类标注#, 标注在第N层#, Optional 公差基准1$ = "", Optional 公差符号2$ = "", Optional 公差数值2$ = "", Optional 公差基准2$ = "")
'                    If IG_Nstep = 1 Then
'                        插入行为公差分模块2(line002, SketchSegment002, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 2 Then
'                        插入行为公差分模块2(line004, SketchSegment004, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 3 Then
'                        插入行为公差分模块2(line006, SketchSegment006, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 4 Then
'                        插入行为公差分模块2(line008, SketchSegment008, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 5 Then
'                        插入行为公差分模块2(line0010, SketchSegment0010, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 6 Then
'                        插入行为公差分模块2(line0012, SketchSegment0012, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 7 Then
'                        插入行为公差分模块2(line0014, SketchSegment0014, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 8 Then
'                        插入行为公差分模块2(line0016, SketchSegment0016, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 9 Then
'                        插入行为公差分模块2(line0018, SketchSegment0018, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 10 Then
'                        插入行为公差分模块2(line0020, SketchSegment0020, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 11 Then
'                        插入行为公差分模块2(line0022, SketchSegment0022, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 12 Then
'                        插入行为公差分模块2(line0024, SketchSegment0024, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 13 Then
'                        插入行为公差分模块2(line0026, SketchSegment0026, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 14 Then
'                        插入行为公差分模块2(line0028, SketchSegment0028, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    ElseIf IG_Nstep = 15 Then
'                        插入行为公差分模块2(line0030, SketchSegment0030, IG_GtolSymbol1$, IG_GtolValue1$, IG_NclassMark#, IG_NlayerMark#, FramePosition#, IG_TolDatum1, IG_GtolSymbol2$, IG_GtolValue2$, IG_TolDatum2$, InsertBelowFrameTextAt$)
'                    End If
'                End Sub
'                Public Function 插入行为公差分模块1(N阶水平线 As SldWorks.SketchLine, N阶水平线Segment As SldWorks.SketchSegment, 公差符号1$, 公差数值1$, 粘附点#, 注释点#, 标注在第N层#, 公差基准1$, 公差符号2$, 公差数值2$, 公差基准2$, InsertBelowFrameTextAt$)
'                    Dim myGtol As Object
'                    Dim myAnno As Object
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    point1 = N阶水平线.GetStartPoint2
'                    point2 = N阶水平线.GetEndPoint2
'                    part.Extension.SelectByID2(N阶水平线Segment.GetName & "@草图2", "EXTSKETCHSEGMENT", 粘附点, point1.Y, 0, False, 0, Nothing, 0)
'                    myGtol = part.InsertGtol()
'                    myGtol.SetFrameSymbols2（1, 行为公差符号(公差符号1), False, "", False, "", "", "", ""）
'                    myGtol.SetFrameValues（1, 公差数值1, 公差基准1$, "", "", ""）
'                    If Not IsNothing(公差符号2$) Then   '判度是否有值传入
'                        myGtol.SetFrameSymbols2（2, 行为公差符号(公差符号2), False, "", False, "", "", "", ""）
'                        myGtol.SetFrameValues（2, 公差数值2, 公差基准2, "", "", ""）
'                    End If
'                    myAnno = myGtol.GetAnnotation()
'                    myAnno.SetPosition(注释点, point1.Y + 0.005 + 标注在第N层# * 0.01, 0)
'                    myAnno.SetLeader3(2, 0, True, True, False, False)
'                    If Not IsNothing(InsertBelowFrameTextAt$) Then
'                        myGtol.InsertBelowFrameTextAt(1, InsertBelowFrameTextAt$)
'                    End If
'                End Function
'                Public Function 插入行为公差分模块2(N阶水平线 As SldWorks.SketchLine, N阶水平线Segment As SldWorks.SketchSegment, 公差符号1$, 公差数值1$, 第N类标注#, 标注在第N层#, FramePosition#, 公差基准1$, 公差符号2$, 公差数值2$, 公差基准2$, InsertBelowFrameTextAt$)
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    point1 = N阶水平线.GetStartPoint2
'                    point2 = N阶水平线.GetEndPoint2
'                    If 第N类标注 = 1 Then
'                        插入行为公差分模块1(N阶水平线, N阶水平线Segment, 公差符号1$, 公差数值1$, （3 * point1.X + point2.X） / 4, (point1.X + point2.X) / 2 + FramePosition# * 0.01, 标注在第N层#, 公差基准1$, 公差符号2$, 公差数值2$, 公差基准2$, InsertBelowFrameTextAt$)
'                    ElseIf 第N类标注 = 2 Then
'                        插入行为公差分模块1(N阶水平线, N阶水平线Segment, 公差符号1$, 公差数值1$, （point1.X + point2.X） / 2, （3 * point1.X + point2.X） / 4 + FramePosition# * 0.01, 标注在第N层#, 公差基准1$, 公差符号2$, 公差数值2$, 公差基准2$, InsertBelowFrameTextAt$)
'                    ElseIf 第N类标注 = 3 Then
'                        插入行为公差分模块1(N阶水平线, N阶水平线Segment, 公差符号1$, 公差数值1$, （point1.X + 3 * point2.X） / 4, （point1.X + point2.X） / 2 + FramePosition# * 0.01, 标注在第N层#, 公差基准1$, 公差符号2$, 公差数值2$, 公差基准2$, InsertBelowFrameTextAt$)
'                    End If
'                End Function
'                Public Sub Insert_SurfaceRoughness(IS_Nstep#, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    'Public Sub InsertSurfaceFinishSymbol(第N阶#, 粗糙度类型#, 粗糙度数值#, 粗糙度符号$, 插入位置#)
'                    IS_RoungnessValue = IS_RoungnessValue * 1000
'                    If IS_Nstep = 1 Then
'                        插入表面粗糙度模块2(line002, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 2 Then
'                        插入表面粗糙度模块2(line004, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 3 Then
'                        插入表面粗糙度模块2(line006, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 4 Then
'                        插入表面粗糙度模块2(line008, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 5 Then
'                        插入表面粗糙度模块2(line0010, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 6 Then
'                        插入表面粗糙度模块2(line0012, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 7 Then
'                        插入表面粗糙度模块2(line0014, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 8 Then
'                        插入表面粗糙度模块2(line0016, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 9 Then
'                        插入表面粗糙度模块2(line0018, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 10 Then
'                        插入表面粗糙度模块2(line0020, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 11 Then
'                        插入表面粗糙度模块2(line0022, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 12 Then
'                        插入表面粗糙度模块2(line0024, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 13 Then
'                        插入表面粗糙度模块2(line0026, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 14 Then
'                        插入表面粗糙度模块2(line0028, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    ElseIf IS_Nstep = 15 Then
'                        插入表面粗糙度模块2(line0030, IS_RoughnessType#, IS_RoungnessValue#, IS_RounghnessSymbol$, IS_InsertPosition#)
'                    End If
'                End Sub
'                Public Function 插入表面粗糙度模块1(N阶水平线 As SldWorks.SketchLine, 表面粗糙度 As SldWorks.ISFSymbol, 插入位置#)
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    Dim mySFSymbol As SldWorks.ISFSymbol

'                    point1 = N阶水平线.GetStartPoint2
'                    point2 = N阶水平线.GetEndPoint2
'                    If 插入位置# = 1 Then
'                        表面粗糙度.GetAnnotation().SetPosition2((7 * point1.X + point2.X) / 8, point1.Y, 0)
'                    ElseIf 插入位置# = 2 Then
'                        表面粗糙度.GetAnnotation().SetPosition2((point1.X + point2.X) / 2, point1.Y, 0)
'                    ElseIf 插入位置# = 3 Then
'                        表面粗糙度.GetAnnotation().SetPosition2((point1.X + 7 * point2.X) / 8, point1.Y, 0)
'                    ElseIf 插入位置# = 4 Then
'                        表面粗糙度.GetAnnotation().SetPosition2(point1.X - 0.015, point1.Y, 0)
'                    ElseIf 插入位置# = 5 Then
'                        表面粗糙度.GetAnnotation().SetPosition2(point2.X + 0.015, point1.Y, 0)
'                    End If
'                End Function
'                Public Function 插入表面粗糙度模块2(N阶水平线 As SldWorks.SketchLine, 粗糙度类型#, 粗糙度数值#, 粗糙度符号$, 插入位置#)
'                    Dim mySFSymbol As SldWorks.ISFSymbol
'                    粗糙度数值 = 粗糙度数值 / 1000
'                    If 粗糙度类型 = 1 Then
'                        mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", 粗糙度数值, "", 粗糙度符号, "", "", "")
'                        插入表面粗糙度模块1(N阶水平线, mySFSymbol, 插入位置#)
'                    ElseIf 粗糙度类型 = 2 Then
'                        mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", "", 粗糙度数值, "")
'                        插入表面粗糙度模块1(N阶水平线, mySFSymbol, 插入位置#)
'                    End If
'                End Function
'                Public Sub Insert_Threaded_Hole(插入位置距中心距#)















'                End Sub
'                Public Sub Insert_length_Dimension（IlD_DistanceBetweenOriginAndPoint1#, IlD_DistanceFromPoint1#, IlD_NclassMark#, IlD_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")
'                    Dim point1, point2, point3 As SldWorks.SketchPoint
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim DimensionTolerance As Object
'                    IlD_DistanceBetweenOriginAndPoint1 = IlD_DistanceBetweenOriginAndPoint1 / 1000 : IlD_DistanceFromPoint1 = IlD_DistanceFromPoint1 / 1000 : TolMax = TolMax / 1000
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    Feature = part.SketchManager.ActiveSketch
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    point1 = part.SketchManager.CreatePoint(IlD_DistanceBetweenOriginAndPoint1#, 0, 0)
'                    point2 = part.SketchManager.CreatePoint(IlD_DistanceBetweenOriginAndPoint1# + IlD_DistanceFromPoint1, 0, 0)
'                    part.ClearSelection2(True)
'                    part.Extension.SelectByID2("", "SKETCHPOINT", IlD_DistanceBetweenOriginAndPoint1#, 0, 0, False, 0, Nothing, 0)
'                    part.Extension.SelectByID2("", "SKETCHPOINT", IlD_DistanceBetweenOriginAndPoint1# + IlD_DistanceFromPoint1, 0, 0, True, 0, Nothing, 0)
'                    If IlD_NclassMark = 2 Then
'                        Displaydimention = part.AddDimension2(IlD_DistanceBetweenOriginAndPoint1#, -MaxValue_diameter - 0.01 - IlD_NlayerMark * 0.01, 0) '中间标注
'                        Displaydimention.CenterText = True   '自动居中
'                    ElseIf IlD_NclassMark = 1 Then
'                        Displaydimention = part.AddDimension2(IlD_DistanceBetweenOriginAndPoint1# - 0.01 - IlD_NlayerMark * 0.01, -MaxValue_diameter - 0.01 - IlD_NlayerMark * 0.01, 0) '左边标注
'                    ElseIf IlD_NclassMark = 3 Then
'                        Displaydimention = part.AddDimension2(IlD_DistanceBetweenOriginAndPoint1# + 0.01 + IlD_NlayerMark * 0.01, -MaxValue_diameter - 0.01 - IlD_NlayerMark * 0.01, 0) '右边标注
'                    End If
'                    part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    part.SketchManager.InsertSketch(True)
'                End Sub
'                Public Function Store_Files(SF_StoreFilesType$, SF_StoreFilesName$)
'                    Dim dz1 As String
'                    dz1 = "E:\works\generator_parts_library\rotor_shaft"
'                    Dim dz2 As String
'                    dz2 = "\" & SF_StoreFilesName & ".SLDPRT"
'                    Dim dz3 As String
'                    dz3 = "\" & SF_StoreFilesName & ".SLDDRW"
'                    If SF_StoreFilesType = "三维图" Then
'                        part.SaveAs3(dz1 + dz2, 0, 2)
'                    ElseIf SF_StoreFilesType = "工程图" Then
'                        part.SaveAs3(dz1 + dz3, 0, 2)
'                    End If
'                End Function
'                Public Sub Nstep_keyway_CenterLine_Right(NkCR_Nstep#, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "")

'                    NkCR_DistanceBetweenCenterLineAndNstepR# = NkCR_DistanceBetweenCenterLineAndNstepR# / 1000 ： NkCR_KeywayCircleDiameter# = NkCR_KeywayCircleDiameter# / 1000 ： NkCR_KeywayLength# = NkCR_KeywayLength# / 1000 ： NkCR_ReducingGrooveDepthDiameter# = NkCR_ReducingGrooveDepthDiameter# / 1000 : NkCR_DistanceBetweenKeywayDomeRAndCenterLine# = NkCR_DistanceBetweenKeywayDomeRAndCenterLine# / 1000
'                    Dim point1, point2 As SldWorks.ISketchPoint
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.SketchManager.InsertSketch(True)
'                    part.Extension.SelectByID2("前视基准面", "PLANE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.BlankRefGeom()
'                    Select Case NkCR_Nstep#
'                        Case 1
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line002, line001, line003, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 2
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line004, line003, line005, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 3
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line006, line005, line007, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 4
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line008, line007, line009, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 5
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0010, line009, line0011, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 6
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0012, line0011, line0013, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 7
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0014, line0013, line0015, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 8
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0016, line0015, line0017, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 9
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0018, line0017, line0019, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 10
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0020, line0019, line0021, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 11
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0022, line0021, line0023, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 12
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0024, line0023, line0025, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 13
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0026, line0025, line0027, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                        Case 14
'                            point1 = Nstep_keyway_CenterLine_Right_Moudle(line0028, line0027, line0029, NkCR_DistanceBetweenCenterLineAndNstepR#, NkCR_NlayerMark#, TolType#, TolMax#, TolMin#, TolMaxFit$, TolMinFit$)
'                            Nstep_keyway_Right_Module(NkCR_DistanceBetweenKeywayDomeRAndCenterLine#, point1, NkCR_KeywayCircleDiameter#, NkCR_KeywayLength#, NkCR_ReducingGrooveDepthDiameter#, NkCR_NclassMark#, NkCR_NlayerMark#)
'                    End Select




'                End Sub
'                Public Function Nstep_keyway_CenterLine_Right_Moudle(NkCR_NstepHorizonalLine As SldWorks.ISketchLine, NkCR_NstepStartVerticalLine As SldWorks.ISketchSegment, NkCR_NstepEndVerticalLine As SldWorks.ISketchSegment, NkCR_DistanceBetweenCenterLineRAndNstepR#, NkCR_NlayerMark#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "") As SldWorks.SketchPoint
'                    Dim point1, point2, point3 As SldWorks.ISketchPoint
'                    Dim line1 As SldWorks.ISketchLine
'                    Dim arc1Segment, arc2Segment, line1Segment, line2Segment As SldWorks.SketchSegment
'                    Dim Displaydimention As SldWorks.DisplayDimension
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object

'                    point2 = NkCR_NstepHorizonalLine.GetEndPoint2
'                    line1 = part.SketchManager.CreateLine(point2.X - NkCR_DistanceBetweenCenterLineRAndNstepR#, point2.Y, 0, point2.X - NkCR_DistanceBetweenCenterLineRAndNstepR#, -point2.Y, 0)
'                    point3 = line1.GetStartPoint2
'                    point1 = part.SketchManager.CreatePoint(point3.X, point2.Y, 0)
'                    part.SketchManager.InsertSketch(True)
'                    line1Segment = line1
'                    line1Segment.Select4(False, Nothing)
'                    NkCR_NstepStartVerticalLine.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(point3.X - 0.002, -MaxValue_diameter - 0.03 - NkCR_NlayerMark# * 0.01, 0) '第一阶长标注
'                    part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "", "", True, "", "", True)
'                    Displaydimention.CenterText = True   '自动居中
'                    Dimension = Displaydimention.GetDimension2(0)
'                    DimensionTolerance = Dimension.Tolerance
'                    DimensionTolerance.Type = TolType
'                    DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    line1Segment.Select4(False, Nothing)
'                    NkCR_NstepEndVerticalLine.Select4(True, Nothing)
'                    Displaydimention = part.AddDimension2(point2.X - 0.002, -MaxValue_diameter - 0.03 - NkCR_NlayerMark# * 0.01, 0)
'                    Displaydimention.CenterText = True  '第一阶长标注
'                    part.ClearSelection2(True)
'                    Nstep_keyway_CenterLine_Right_Moudle = point1
'                End Function
'                Public Sub Insert_Fillet(IF_Nstep#, IF_FilletRadius#)
'                    Dim point1, point2 As SldWorks.SketchPoint
'                    IF_FilletRadius# = IF_FilletRadius# / 1000
'                    If IF_Nstep = 1 Then
'                        point1 = line002.GetEndPoint2()
'                        point2 = line003.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 2 Then
'                        point1 = line004.GetEndPoint2()
'                        point2 = line005.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 3 Then
'                        point1 = line006.GetEndPoint2()
'                        point2 = line007.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 4 Then
'                        point1 = line008.GetEndPoint2()
'                        point2 = line009.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 5 Then
'                        point1 = line0010.GetEndPoint2()
'                        point2 = line0011.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 6 Then
'                        point1 = line0012.GetEndPoint2()
'                        point2 = line0013.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 7 Then
'                        point1 = line0014.GetEndPoint2()
'                        point2 = line0015.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 8 Then
'                        point1 = line0016.GetEndPoint2()
'                        point2 = line0017.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 9 Then
'                        point1 = line0018.GetEndPoint2()
'                        point2 = line0019.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 10 Then
'                        point1 = line0020.GetEndPoint2()
'                        point2 = line0021.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 11 Then
'                        point1 = line0022.GetEndPoint2()
'                        point2 = line0023.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 12 Then
'                        point1 = line0024.GetEndPoint2()
'                        point2 = line0025.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 13 Then
'                        point1 = line0026.GetEndPoint2()
'                        point2 = line0027.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    ElseIf IF_Nstep = 14 Then
'                        point1 = line0028.GetEndPoint2()
'                        point2 = line0029.GetEndPoint2()
'                        part.Extension.SelectByID2(Feature001.Name, "SKETCH", 0, 0, 0, False, 0, Nothing, 0)
'                        part.EditSketch()
'                        If point1.Y < point2.Y Then
'                            point1.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        ElseIf point1.Y > point2.Y Then
'                            point2.Select4(False, Nothing)
'                            part.SketchManager.CreateFillet(IF_FilletRadius, 1)
'                        End If
'                    End If
'                    part.SketchManager.InsertSketch(True)
'                End Sub


'                Public Sub 轴应力分析()
'                    MsgBox(666)
'                    part = swapp.ActiveDoc
'                    Dim COSMOSWORKSObj As CosmosWorksLib.CosmosWorks 'CosmosWorksLib.CosmosWorks
'                    Dim CWAddinCallBackObj As Object
'                    CWAddinCallBackObj = swapp.GetAddInObject("CosmosWorks.CosmosWorks")
'                    COSMOSWORKSObj = CWAddinCallBackObj.COSMOSWORKS

'                    ' Redraw
'                    part.GraphicsRedraw2()
'                    Dim ActiveDocObj As Object
'                    Dim StudyManagerObj As CosmosWorksLib.CWStudyManager
'                    Dim LoadsAndRestraintsManagerObj As Object
'                    Dim ErrorCodeObj As Long
'                    Dim ContactManagerObj As Object
'                    ActiveDocObj = COSMOSWORKSObj.ActiveDoc()
'                    StudyManagerObj = ActiveDocObj.StudyManager()
'                    StudyManagerObj.ActiveStudy = 0
'                    Dim motionStudyMgr As Object
'                    motionStudyMgr = part.Extension.GetMotionStudyManager()
'                    StudyManagerObj.ActiveStudy = 0
'                    Dim NewStudyName As String
'                    NewStudyName = "静应力分析 1"
'                    Dim CWNewStudy As Object
'                    CWNewStudy = StudyManagerObj.CreateNewStudy3(NewStudyName, 0, 0, ErrorCodeObj)
'                    'CWNewStudy = StudyManagerObj.
'                    '遍历（）

'                    StudyManagerObj = Nothing
'                    ActiveDocObj = Nothing
'                    CWAddinCallBackObj = Nothing
'                    COSMOSWORKSObj = Nothing
'                    MsgBox(666)
'                End Sub
'            End Class
'            Public Class Shaft_Drawings
'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                Dim Draw As SldWorks.DrawingDoc
'                Dim part As SldWorks.ModelDoc2
'                Dim View As SldWorks.View '视图对象
'                Dim Note As SldWorks.INote
'                Dim SketchManager As SldWorks.SketchManager
'                Dim FeatureManager As SldWorks.FeatureManager
'                Dim Dimension As SldWorks.Dimension
'                Dim Feature As SldWorks.IFeature
'                Dim DisplayDimension As SldWorks.DisplayDimension
'                Dim sketcher As SldWorks.Sketch
'                Dim SelectionMgr As SldWorks.SelectionMgr
'                Dim SheetPr() As Double
'                Public Sub Drawings_Template(DT_TemplateType$, DT_StoreFilesName$, DT_TechnicalRequirements$, DT_DrawingScaleNumerator#, DT_DrawingScaleDenominator#, name$, Old_Code$, Optional material$ = "", Optional weight$ = "")
'                    Dim myNote As Object
'                    Dim Sheet1 As SldWorks.Sheet '图纸对象
'                    Dim drawingView As Object

'                    模板类型分模块(DT_TemplateType$, DT_StoreFilesName$, name$, Old_Code$, material$, weight$)
'                    Sheet1 = part.GetCurrentSheet()
'                    SheetPr = Sheet1.GetProperties2()
'                    Sheet1.SetProperties2(SheetPr(0), SheetPr(1), DT_DrawingScaleNumerator, DT_DrawingScaleDenominator, True, SheetPr(5), SheetPr(6), SheetPr(7))
'                    part.EditRebuild3()
'                    part.InsertModelAnnotations3(0, 10519023, True, False, True, True)
'                    part.ClearSelection2(True)
'                    part.ActivateView("工程图视图1")
'                    part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
'                    drawingView = part.SelectionManager.GetSelectedObject5(1)
'                    drawingView.ResetSketchVisibility

'                    myNote = part.InsertNote("技术要求"）
'                    myNote.GetAnnotation().SetPosition(SheetPr(5) / 5, 3 * SheetPr(6) / 16, 0)
'                    part.Extension.SelectByID2("细节项目255@工程图视图1", "NOTE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.FontPoints(36)
'                    myNote = part.InsertNote(DT_TechnicalRequirements$）
'                    myNote.GetAnnotation().SetPosition(SheetPr(5) / 5, 3 * SheetPr(6) / 16 - 0.02, 0)
'                    part.Extension.SelectByID2("细节项目256@工程图视图1", "NOTE", 0, 0, 0, False, 0, Nothing, 0)
'                    part.FontPoints(26)
'                End Sub
'                Public Function 模板类型分模块(模板类型$, 存储文件名$, name$, Old_Code$, material$, Optional weight$ = "")
'                    Dim Annotation As SldWorks.Annotation
'                    Dim dz1 As String
'                    dz1 = "E:\works\generator_parts_library\rotor_shaft"
'                    Dim dz2 As String
'                    dz2 = "\" & 存储文件名 & ".SLDPRT"
'                    Dim dz3 As String
'                    dz3 = "\" & 存储文件名 & ".SLDDRW"
'                    If 模板类型 = "A0" Then
'                        Draw = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a0.drwdot", 1, 0, 0)
'                        part = swapp.ActiveDoc
'                        SketchManager = part.SketchManager
'                        FeatureManager = part.FeatureManager
'                        SelectionMgr = part.SelectionManager
'                        part.CreateDrawViewFromModelView3(dz1 + dz2, "*前视", 1.198 / 2, 0.841 / 2, 0)
'                        part.InsertModelAnnotations3(0, 32768, False, True, False, True) '32768 + 4096 + 64 + 2 + 4 + 32 + 128
'                        Dim count As Double
'                        count = 1
'                        Do Until count > 16
'                            part.Extension.SelectByID2("D1@基准面" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D1@切除-拉伸" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D1@倒角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D2@倒角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            'part.Extension.SelectByID2("D1@圆角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            count = count + 1
'                        Loop
'                        part.HideDimension()
'                        part.ClearSelection2(True)
'                        part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
'                        Draw.ViewDisplayHidden()
'                        Note = part.InsertNote("江西兰叶科技有限公司")
'                        Annotation = Note.GetAnnotation()
'                        Annotation.SetPosition(1.14, 0.061, 0)
'                        part.ClearSelection2(True)
'                        模板改标注分模块(模板类型$, name$, Old_Code$, material$, weight$)
'                    ElseIf 模板类型 = "A3" Then
'                        Draw = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a3.drwdot", 1, 0, 0)
'                        part = swapp.ActiveDoc
'                        SketchManager = part.SketchManager
'                        FeatureManager = part.FeatureManager
'                        SelectionMgr = part.SelectionManager
'                        part.CreateDrawViewFromModelView3(dz1 + dz2, "*前视", 0.42 / 2, 0.297 / 2, 0)
'                        Dim count As Double
'                        count = 1
'                        Do Until count > 16
'                            part.Extension.SelectByID2("D1@基准面" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D1@切除-拉伸" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D1@倒角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D2@倒角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D1@圆角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            count = count + 1
'                        Loop
'                        part.HideDimension()
'                        part.ClearSelection2(True)
'                        part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
'                        Draw.ViewDisplayHidden()
'                        Note = part.InsertNote("江西兰叶科技有限公司")
'                        Annotation = Note.GetAnnotation()
'                        Annotation.SetPosition(0.374, 0.05457, 0)
'                        part.ClearSelection2(True)
'                        模板改标注分模块(模板类型$, name$, Old_Code$, material$, weight$)
'                    ElseIf 模板类型 = "A4" Then
'                        Draw = swapp.NewDocument("C:\ProgramData\SolidWorks\SOLIDWORKS 2019\templates\gb_a4.drwdot", 1, 0, 0)
'                        part = swapp.ActiveDoc
'                        SketchManager = part.SketchManager
'                        FeatureManager = part.FeatureManager
'                        SelectionMgr = part.SelectionManager
'                        part.CreateDrawViewFromModelView3(dz1 + dz2, "*前视", 0.297 / 2, 0.21 / 2, 0)
'                        part.InsertModelAnnotations3(0, 32768, False, True, False, True) '32768 + 4096 + 64 + 2 + 4 + 32 + 128
'                        Dim count As Double
'                        count = 1
'                        Do Until count > 16
'                            part.Extension.SelectByID2("D1@基准面" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D1@切除-拉伸" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D1@倒角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D2@倒角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            part.Extension.SelectByID2("D1@圆角" & count & "@*@工程图视图1", "DIMENSION", 0, 0, 0, True, 0, Nothing, 0)
'                            count = count + 1
'                        Loop
'                        part.HideDimension()
'                        part.ClearSelection2(True)
'                        part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
'                        Draw.ViewDisplayHidden()
'                        Note = part.InsertNote("江西兰叶科技有限公司")
'                        Annotation = Note.GetAnnotation()
'                        Annotation.SetPosition(0.165, 0.055, 0)
'                        part.ClearSelection2(True)
'                        模板改标注分模块(模板类型$, name$, Old_Code$, material$, weight$)
'                    End If
'                End Function
'                Public Function 模板改标注分模块(模板类型$, name$, Code$, material$, Optional weight$ = "")
'                    Dim Notes As Object
'                    Dim Count As Long
'                    Dim Annpos() As Double
'                    Dim Annotation As SldWorks.Annotation
'                    If 模板类型 = "A0" Then
'                        View = Draw.GetFirstView
'                        Do Until View Is Nothing
'                            Notes = View.GetNotes()
'                            Count = View.GetNoteCount()
'                            If Count > 0 Then
'                                For Each N1 In Notes
'                                    Annotation = N1.GetAnnotation()
'                                    Annpos = Annotation.GetPosition()
'                                    If Annpos(0) > 1.078 And Annpos(0) < 1.128 And Annpos(1) > 0.048 And Annpos(1) < 0.066 Then
'                                        N1.SetText(material)
'                                    End If
'                                    If Annpos(0) > 1.128 And Annpos(0) < 1.178 And Annpos(1) > 0.023 And Annpos(1) < 0.048 Then
'                                        N1.SetText(name)
'                                    End If
'                                    If Annpos(0) > 1.128 And Annpos(0) < 1.178 And Annpos(1) > 0.019 And Annpos(1) < 0.028 Then
'                                        N1.SetText(Code)
'                                    End If
'                                    If Annpos(0) > 0.025 And Annpos(0) < 0.084 And Annpos(1) > 0.819 And Annpos(1) < 0.831 Then
'                                        N1.SetText(Code)
'                                    End If
'                                    If Annpos(0) > 1.104 And Annpos(0) < 1.117 And Annpos(1) > 0.028 And Annpos(1) < 0.038 Then
'                                        N1.SetText(weight)
'                                    End If
'                                Next
'                            End If
'                            View = View.GetNextView() '获得下一个视图引用
'                        Loop
'                        Draw.EditRebuild3()
'                    ElseIf 模板类型 = "A3" Then
'                        View = Draw.GetFirstView
'                        Do Until View Is Nothing
'                            Notes = View.GetNotes()
'                            Count = View.GetNoteCount()
'                            If Count > 0 Then
'                                For Each N1 In Notes
'                                    Annotation = N1.GetAnnotation()
'                                    Annpos = Annotation.GetPosition()
'                                    If Annpos(0) > 0.31487 And Annpos(0) < 0.364 And Annpos(1) > 0.043 And Annpos(1) < 0.61 Then
'                                        N1.SetText(material)
'                                    End If
'                                    If Annpos(0) > 0.364 And Annpos(0) < 0.415 And Annpos(1) > 0.023 And Annpos(1) < 0.043 Then
'                                        N1.SetText(name)
'                                    End If
'                                    If Annpos(0) > 0.364 And Annpos(0) < 0.415 And Annpos(1) > 0.014 And Annpos(1) < 0.023 Then
'                                        N1.SetText(Code)
'                                    End If
'                                    If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
'                                        N1.SetText(Code)
'                                    End If
'                                    If Annpos(0) > 0.34 And Annpos(0) < 0.353 And Annpos(1) > 0.023 And Annpos(1) < 0.032 Then
'                                        N1.SetText(weight)
'                                    End If
'                                Next
'                            End If
'                            View = View.GetNextView() '获得下一个视图引用
'                        Loop
'                        Draw.EditRebuild3()
'                    ElseIf 模板类型 = "A4" Then
'                        View = Draw.GetFirstView
'                        Do Until View Is Nothing
'                            Notes = View.GetNotes()
'                            Count = View.GetNoteCount()
'                            If Count > 0 Then
'                                For Each N1 In Notes
'                                    Annotation = N1.GetAnnotation()
'                                    Annpos = Annotation.GetPosition()
'                                    If Annpos(0) > 52.5 / 1000 * 2 And Annpos(0) < 76.8 / 1000 * 2 And Annpos(1) > 21.5 / 1000 * 2 And Annpos(1) < 30.5 / 1000 * 2 Then
'                                        N1.SetText(material)
'                                    End If
'                                    If Annpos(0) > 76.8 / 1000 * 2 And Annpos(0) < 102.5 / 1000 * 2 And Annpos(1) > 12 / 1000 * 2 And Annpos(1) < 21.5 / 1000 * 2 Then
'                                        N1.SetText(name)
'                                    End If
'                                    If Annpos(0) > 76.8 / 1000 * 2 And Annpos(0) < 102.5 / 1000 * 2 And Annpos(1) > 6.0 / 1000 * 2 And Annpos(1) < 12 / 1000 * 2 Then
'                                        N1.SetText(Code)
'                                    End If
'                                    If Annpos(0) > 25 / 1000 And Annpos(0) < 85 / 1000 And Annpos(1) > 280 / 1000 And Annpos(1) < 292 / 1000 Then
'                                        N1.SetText(Code)
'                                    End If
'                                    If Annpos(0) > 0.13093 And Annpos(0) < 0.14281 And Annpos(1) > 0.02449 And Annpos(1) < 0.033 Then
'                                        N1.SetText(weight)
'                                    End If
'                                Next
'                            End If
'                            View = View.GetNextView() '获得下一个视图引用
'                        Loop
'                        Draw.EditRebuild3()
'                    End If

'                End Function
'                Public Function Section_View(SV_TotalSteps#, SV_Nstep#, SV_SectionDirection#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_InsertDrawingsPosition#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, Optional SV_NumberCalls% = 1, Optional SV_DatumSymbol$ = "") As Integer
'                    SV_Nstep_ReducingGrooveDepthDiameter = SV_Nstep_ReducingGrooveDepthDiameter / 1000 ： SV_NstepKeyway_Width = SV_NstepKeyway_Width / 1000 ： SV_KeywayDepth_RoughnessValue = SV_KeywayDepth_RoughnessValue / 1000 : SV_KeywayWidth_RoughnessValue = SV_KeywayWidth_RoughnessValue ： SV_KeywayDepth_RoughnessValue = SV_KeywayDepth_RoughnessValue * 1000
'                    If SV_TotalSteps = 5 Then
'                        剖视图分模块2(line0010, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 6 Then
'                        剖视图分模块2(line0012, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 7 Then
'                        剖视图分模块2(line0014, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 8 Then
'                        剖视图分模块2(line0016, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 9 Then
'                        剖视图分模块2(line0018, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 10 Then
'                        剖视图分模块2(line0020, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 11 Then
'                        剖视图分模块2(line0022, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 12 Then
'                        剖视图分模块2(line0024, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 13 Then
'                        剖视图分模块2(line0026, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 14 Then
'                        剖视图分模块2(line0028, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    ElseIf SV_TotalSteps = 15 Then
'                        剖视图分模块2(line0030, SV_Nstep#, SV_SectionDirection#, SV_Nstep_ReducingGrooveDepthDiameter#, SV_NstepKeyway_Width#, SV_InsertDrawingsPosition#, SV_NstepSectionPosition#, SV_SectionLineName$, SV_RoughnessType#, SV_KeywayWidth_RoughnessValue#, SV_KeywayDepth_RoughnessValue#, SV_NumberCalls%, SV_DatumSymbol$)
'                    End If
'                    Section_View = SV_NumberCalls + 1
'                End Function
'                Public Function 剖视图分模块1(总阶数水平线 As SldWorks.SketchLine, 第N阶水平线 As SldWorks.SketchLine, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$) As Integer
'                    Dim Displaydimention As SldWorks.IDisplayDimension
'                    Dim Parts_drawing As New Parts_drawing
'                    Dim SketchSegment As SldWorks.ISketchSegment
'                    Dim myNote As Object
'                    Dim myAnno As Object
'                    Dim mySFSymbol As SldWorks.ISFSymbol
'                    Dim point, point1, point2, point3, point4, point5, point6, point7, point8, point9, point10 As SldWorks.ISketchPoint
'                    Dim Dimension As SldWorks.Dimension
'                    Dim Displaydimention1, Displaydimention2, Displaydimention3 As SldWorks.IDisplayDimension
'                    Dim Value As Double
'                    Dim myDatumTag As Object
'                    Dim myAnnotation As Object

'                    point = 总阶数水平线.GetEndPoint2()
'                    point1 = 第N阶水平线.GetStartPoint2()
'                    point2 = 第N阶水平线.GetEndPoint2()
'                    part.ClearSelection2(True)
'                    part.ActivateSheet("图纸1")
'                    part.Extension.SelectByID2("图纸1", "SHEET", 0, 0, 0, False, 0, Nothing, 0)
'                    'part.ClearSelection2(True)
'                    'point9 = part.SketchManager.CreatePoint(插入位置 * SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0)
'                    'MsgBox(0)
'                    part.ActivateView("工程图视图1")
'                    part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
'                    If 第N阶处剖切位置 = 1 Then
'                        SketchSegment = part.SketchManager.CreateLine(-point.X / 2 + point1.X + (point2.X - point1.X) / 4, point1.Y + 0.001, 0, -point.X / 2 + point1.X + (point2.X - point1.X) / 4, -point1.Y - 0.001, 0)
'                    ElseIf 第N阶处剖切位置 = 0 Then
'                        SketchSegment = part.SketchManager.CreateLine(-point.X / 2 + point1.X, point1.Y + 0.001, 0, -point.X / 2 + point1.X, -point1.Y - 0.001, 0)
'                    ElseIf 第N阶处剖切位置 = 2 Then
'                        SketchSegment = part.SketchManager.CreateLine(-point.X / 2 + point1.X + (point2.X - point1.X) / 2, point1.Y + 0.001, 0, -point.X / 2 + point1.X + (point2.X - point1.X) / 2, -point1.Y - 0.001, 0)
'                    ElseIf 第N阶处剖切位置 = 3 Then
'                        SketchSegment = part.SketchManager.CreateLine(-point.X / 2 + point1.X + 3 * (point2.X - point1.X) / 4, point1.Y + 0.001, 0, -point.X / 2 + point1.X + 3 * (point2.X - point1.X) / 4, -point1.Y - 0.001, 0)
'                    End If
'                    If 剖切方向 = 1 Then
'                        part.CreateSectionViewAt5(插入位置 * SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0, 剖切线名, 33, Nothing, 0.001)
'                    ElseIf 剖切方向 = 2 Then
'                        part.CreateSectionViewAt5(插入位置 * SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0, 剖切线名, 33 + 4, Nothing, 0.001)
'                    End If
'                    part.Extension.SelectByID2("", "DRAWINGVIEW", 3 * SheetPr(5) / 20 + 插入位置 * SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0, False, 0, Nothing, 0)
'                    point10 = part.SketchManager.CreatePoint(0, 0, 0)
'                    point10.Select4(False, Nothing)
'                    part.Extension.SelectByID2("", "EXTSKETCHPOINT", 插入位置 * SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0, True, 0, Nothing, 0)
'                    Displaydimention = part.AddDimension2(插入位置 * SheetPr(5) / 5, 13 * SheetPr(6) / 16 - 11 * point1.Y / 9, 0)
'                    part.HideDimension()
'                    Dimension = Displaydimention.GetDimension()
'                    Value = Dimension.IGetUserValueIn2(part)     '获得尺寸数值

'                    point3 = part.SketchManager.CreatePoint(0, point1.Y, 0)
'                    point4 = part.SketchManager.CreatePoint(0, -point1.Y, 0)
'                    point3.Select4(True, Nothing)
'                    If 剖切方向 = 1 Then
'                        Displaydimention1 = part.AddDimension2(插入位置 * SheetPr(5) / 5 + point1.Y + 0.04, 13 * SheetPr(6) / 16, 0)
'                        part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", True)
'                        Displaydimention1.CenterText = True
'                        If Not 基准符号 = "" Then
'                            part.Extension.SelectByID2(Displaydimention1.GetNameForSelection, "DIMENSION", 插入位置 * SheetPr(5) / 5 + 10 * point1.Y / 9, 13 * SheetPr(6) / 16 - point1.Y, 0, False, 0, Nothing, 0)
'                            myDatumTag = part.InsertDatumTag2()
'                            myDatumTag.FilledTriangle = True
'                            myDatumTag.Shoulder = False
'                            myDatumTag.SetLabel(基准符号)
'                            myAnnotation = myDatumTag.GetAnnotation()
'                            myAnnotation.SetPosition(插入位置 * SheetPr(5) / 5 + 10 * point1.Y / 9, 13 * SheetPr(6) / 16 - point1.Y - 0.01, 0)
'                        End If
'                        point5 = part.SketchManager.CreatePoint(-第N阶去槽深直径 + point1.Y - Value * 0.001, 0, 0)
'                        point6 = part.SketchManager.CreatePoint(point1.Y - Value * 0.001, 0, 0)
'                    ElseIf 剖切方向 = 2 Then
'                        Displaydimention1 = part.AddDimension2(插入位置 * SheetPr(5) / 5 - point1.Y - 0.04, 13 * SheetPr(6) / 16, 0)
'                        part.EditDimensionProperties2(0, 0, 0, "", "", True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", True)
'                        Displaydimention1.CenterText = True
'                        If Not 基准符号 = "" Then
'                            part.Extension.SelectByID2(Displaydimention1.GetNameForSelection, "DIMENSION", 插入位置 * SheetPr(5) / 5 - 11 * point1.Y / 9, 13 * SheetPr(6) / 16 - point1.Y, 0, False, 0, Nothing, 0)
'                            myDatumTag = part.InsertDatumTag2()
'                            myDatumTag.FilledTriangle = True
'                            myDatumTag.Shoulder = False
'                            myDatumTag.SetLabel(基准符号)
'                            myAnnotation = myDatumTag.GetAnnotation()
'                            myAnnotation.SetPosition(插入位置 * SheetPr(5) / 5 - 10 * point1.Y / 9, 13 * SheetPr(6) / 16 - point1.Y - 0.01, 0)
'                        End If
'                        point5 = part.SketchManager.CreatePoint(第N阶去槽深直径 - point1.Y + Value * 0.001, 0, 0)
'                        point6 = part.SketchManager.CreatePoint(-point1.Y + Value * 0.001, 0, 0)
'                    End If
'                    point5.Select4(True, Nothing)
'                    Displaydimention2 = part.AddDimension2(插入位置 * SheetPr(5) / 5, 13 * SheetPr(6) / 16 - point1.Y - 0.04, 0)
'                    Displaydimention2.CenterText = True
'                    If 剖切方向 = 1 Then
'                        point7 = part.SketchManager.CreatePoint(-第N阶去槽深直径 + point1.Y - Value * 0.001, 第N阶键槽宽 / 2, 0)
'                        point8 = part.SketchManager.CreatePoint(-第N阶去槽深直径 + point1.Y - Value * 0.001, -第N阶键槽宽 / 2, 0)
'                        point7.Select4(True, Nothing)
'                        Displaydimention3 = part.AddDimension2(插入位置 * SheetPr(5) / 5 - point1.Y - 0.04, 13 * SheetPr(6) / 16 - 11 * point1.Y / 9, 0)
'                        Displaydimention3.CenterText = True
'                        part.ClearSelection2(True)
'                        myNote = part.InsertNote("   ")
'                        myNote.GetAnnotation().SetPosition(插入位置 * SheetPr(5) / 5 - 13 * point1.Y / 9, 13 * SheetPr(6) / 16 + point1.Y, 0)
'                        myAnno = myNote.GetAnnotation()
'                        myAnno.SetLeader3(3, 0, True, False, False, False)
'                        myAnno.SetLeaderAttachmentPointAtIndex(0, 插入位置 * SheetPr(5) / 5 - 第N阶去槽深直径 + point1.Y - Value * 0.001, 13 * SheetPr(6) / 16, 0) '改引导线位置
'                        If 粗糙度类型 = 1 Then
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", 槽宽粗糙度#, "", "Rz", "", "", "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 - 13 * point1.Y / 9, 13 * SheetPr(6) / 16 + point1.Y - 0.005, 0)
'                        ElseIf 粗糙度类型 = 2 Then
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", "", 槽宽粗糙度#, "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 - 13 * point1.Y / 9, 13 * SheetPr(6) / 16 + point1.Y - 0.005, 0)
'                        End If
'                        If 粗糙度类型 = 1 Then
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", 槽深粗糙度#, "", "Rz", "", "", "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 - 10 * point1.Y / 9, 13 * SheetPr(6) / 16 + 第N阶键槽宽 / 2, 0)
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", 槽深粗糙度#, "", "Rz", "", "", "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 - 11 * point1.Y / 9, 13 * SheetPr(6) / 16 - 第N阶键槽宽 / 2, 0)
'                        ElseIf 粗糙度类型 = 2 Then
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", "", 槽深粗糙度#, "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 - 10 * point1.Y / 9, 13 * SheetPr(6) / 16 + 第N阶键槽宽 / 2, 0)
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", "", 槽深粗糙度#, "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 - 11 * point1.Y / 9, 13 * SheetPr(6) / 16 - 第N阶键槽宽 / 2, 0)
'                        End If
'                        part.ClearSelection2(True)
'                    ElseIf 剖切方向 = 2 Then
'                        point7 = part.SketchManager.CreatePoint(第N阶去槽深直径 - point1.Y + Value * 0.001, 第N阶键槽宽 / 2, 0)
'                        point8 = part.SketchManager.CreatePoint(第N阶去槽深直径 - point1.Y + Value * 0.001, -第N阶键槽宽 / 2, 0)
'                        point7.Select4(True, Nothing)
'                        Displaydimention3 = part.AddDimension2(插入位置 * SheetPr(5) / 5 + point1.Y + 0.04, 13 * SheetPr(6) / 16 - 11 * point1.Y / 9, 0)
'                        Displaydimention3.CenterText = True
'                        part.ClearSelection2(True)
'                        myNote = part.InsertNote("   ")
'                        myNote.GetAnnotation().SetPosition(插入位置 * SheetPr(5) / 5 + 13 * point1.Y / 9, 13 * SheetPr(6) / 16 + point1.Y, 0)
'                        myAnno = myNote.GetAnnotation()
'                        myAnno.SetLeader3(3, 0, True, False, False, False)
'                        myAnno.SetLeaderAttachmentPointAtIndex(0, 插入位置 * SheetPr(5) / 5 + 第N阶去槽深直径 - point1.Y + Value * 0.001, 13 * SheetPr(6) / 16, 0) '改引导线位置
'                        myNote.LockPosition = True
'                        If 粗糙度类型 = 1 Then
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", 槽宽粗糙度#, "", "Rz", "", "", "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 + 13 * point1.Y / 9, 13 * SheetPr(6) / 16 + point1.Y - 0.005, 0)
'                        ElseIf 粗糙度类型 = 2 Then
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", "", 槽宽粗糙度#, "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 + 13 * point1.Y / 9, 13 * SheetPr(6) / 16 + point1.Y - 0.005, 0)
'                        End If
'                        If 粗糙度类型 = 1 Then
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", 槽深粗糙度#, "", "Rz", "", "", "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 + 10 * point1.Y / 9, 13 * SheetPr(6) / 16 + 第N阶键槽宽 / 2, 0)
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", 槽深粗糙度#, "", "Rz", "", "", "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 + 11 * point1.Y / 9, 13 * SheetPr(6) / 16 - 第N阶键槽宽 / 2, 0)
'                        ElseIf 粗糙度类型 = 2 Then
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", "", 槽深粗糙度#, "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 + 10 * point1.Y / 9, 13 * SheetPr(6) / 16 + 第N阶键槽宽 / 2, 0)
'                            mySFSymbol = part.Extension.InsertSurfaceFinishSymbol3(1, 0, 0, 0, 0, 0, 1, "", "", "", "", "", 槽深粗糙度#, "")
'                            mySFSymbol.GetAnnotation().SetPosition2(插入位置 * SheetPr(5) / 5 + 11 * point1.Y / 9, 13 * SheetPr(6) / 16 - 第N阶键槽宽 / 2, 0)
'                        End If
'                        part.ClearSelection2(True)
'                    End If
'                    If 调用次数 = 1 Then
'                        Displaydimention001_01 = Displaydimention1
'                        Displaydimention001_02 = Displaydimention2
'                        Displaydimention001_03 = Displaydimention3
'                    ElseIf 调用次数 = 2 Then
'                        Displaydimention002_01 = Displaydimention1
'                        Displaydimention002_02 = Displaydimention2
'                        Displaydimention002_03 = Displaydimention3
'                    ElseIf 调用次数 = 3 Then
'                        Displaydimention003_01 = Displaydimention1
'                        Displaydimention003_02 = Displaydimention2
'                        Displaydimention003_03 = Displaydimention3
'                    ElseIf 调用次数 = 4 Then
'                        Displaydimention004_01 = Displaydimention1
'                        Displaydimention004_02 = Displaydimention2
'                        Displaydimention004_03 = Displaydimention3
'                    End If
'                End Function
'                Public Function 剖视图分模块2(总阶数水平线 As SldWorks.SketchLine, 第N阶#, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    If 第N阶 = 1 Then
'                        剖视图分模块1(总阶数水平线, line002, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 2 Then
'                        剖视图分模块1(总阶数水平线, line004, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 3 Then
'                        剖视图分模块1(总阶数水平线, line006, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 4 Then
'                        剖视图分模块1(总阶数水平线, line008, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 5 Then
'                        剖视图分模块1(总阶数水平线, line0010, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 6 Then
'                        剖视图分模块1(总阶数水平线, line0012, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 7 Then
'                        剖视图分模块1(总阶数水平线, line0014, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 8 Then
'                        剖视图分模块1(总阶数水平线, line0016, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 9 Then
'                        剖视图分模块1(总阶数水平线, line0018, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 10 Then
'                        剖视图分模块1(总阶数水平线, line0020, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 11 Then
'                        剖视图分模块1(总阶数水平线, line0022, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 12 Then
'                        剖视图分模块1(总阶数水平线, line0024, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 13 Then
'                        剖视图分模块1(总阶数水平线, line0026, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 14 Then
'                        剖视图分模块1(总阶数水平线, line0028, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    ElseIf 第N阶 = 15 Then
'                        剖视图分模块1(总阶数水平线, line0030, 剖切方向#, 第N阶去槽深直径#, 第N阶键槽宽#, 插入位置#, 第N阶处剖切位置#, 剖切线名$, 粗糙度类型#, 槽宽粗糙度#, 槽深粗糙度#, 调用次数%, 基准符号$)
'                    End If
'                End Function
'                Public Function Select_sectionView_Size(SsS_NofSectionView#, SsS_NofSize#) As SldWorks.DisplayDimension '第N个尺寸# 1为直径，2为去槽深直径，3为键槽宽
'                    'Public Function Select_sectionView_Size(第N个剖视图#, 第N个尺寸#) As SldWorks.DisplayDimension
'                    Dim DisplayDimension As SldWorks.DisplayDimension
'                    If SsS_NofSectionView = 1 Then
'                        If SsS_NofSize = 1 Then
'                            part.Extension.SelectByID2(Displaydimention001_01.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        ElseIf SsS_NofSize = 2 Then
'                            part.Extension.SelectByID2(Displaydimention001_02.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        ElseIf SsS_NofSize = 3 Then
'                            part.Extension.SelectByID2(Displaydimention001_03.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        End If
'                    ElseIf SsS_NofSectionView = 2 Then
'                        If SsS_NofSize = 1 Then
'                            part.Extension.SelectByID2(Displaydimention002_01.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        ElseIf SsS_NofSize = 2 Then
'                            part.Extension.SelectByID2(Displaydimention002_02.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        ElseIf SsS_NofSize = 3 Then
'                            part.Extension.SelectByID2(Displaydimention002_03.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        End If
'                    ElseIf SsS_NofSectionView = 3 Then
'                        If SsS_NofSize = 1 Then
'                            part.Extension.SelectByID2(Displaydimention003_01.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        ElseIf SsS_NofSize = 2 Then
'                            part.Extension.SelectByID2(Displaydimention003_02.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        ElseIf SsS_NofSize = 3 Then
'                            part.Extension.SelectByID2(Displaydimention003_03.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        End If
'                    ElseIf SsS_NofSectionView = 4 Then
'                        If SsS_NofSize = 1 Then
'                            part.Extension.SelectByID2(Displaydimention004_01.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        ElseIf SsS_NofSize = 2 Then
'                            part.Extension.SelectByID2(Displaydimention004_02.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        ElseIf SsS_NofSize = 3 Then
'                            part.Extension.SelectByID2(Displaydimention004_03.GetNameForSelection, "DIMENSION", 0, 0, 0, False, 0, Nothing, 0)
'                            DisplayDimension = SelectionMgr.GetSelectedObject6(1, -1)
'                        End If
'                    End If
'                    Select_sectionView_Size = DisplayDimension
'                End Function
'                Public Sub Add_Gtol(AG_GtolSymbol1$, AG_GtolValue1$, AG_TolDatum1$)
'                    AG_GtolValue1 = AG_GtolValue1
'                    'Public Sub 行为公差(公差符号1$, 公差数值1$, 公差基准1$)
'                    Dim myGtol As Object
'                    myGtol = part.InsertGtol()
'                    myGtol.SetFrameSymbols2（1, Shaft_Parts_drawing.行为公差符号(AG_GtolSymbol1), False, "", False, "", "", "", ""）
'                    myGtol.SetFrameValues（1, AG_GtolValue1, AG_TolDatum1$, "", "", ""）
'                End Sub
'                Public Sub Add_sectionView_toleranceFit(Ast_NofSectionView#, Ast_NofSize#, Optional TolType# = 0, Optional TolMax# = 0, Optional TolMin# = 0, Optional TolMaxFit$ = "", Optional TolMinFit$ = "", Optional AddFit$ = "")
'                    TolMax = TolMax / 1000 ： TolMin = TolMin / 1000
'                    Dim Dimension As SldWorks.Dimension
'                    Dim DimensionTolerance As Object

'                    If Not TolType = 0 Then
'                        Select_sectionView_Size(Ast_NofSectionView#, Ast_NofSize#)
'                        part.EditDimensionProperties2(TolType, TolMax#, TolMin#, TolMaxFit$, TolMinFit$, True, 9, 2, True, 12, 12, "<MOD-DIAM>", "", True, "", "", True)
'                        Dimension = Select_sectionView_Size(Ast_NofSectionView#, Ast_NofSize#).GetDimension2(0)
'                        DimensionTolerance = Dimension.Tolerance
'                        DimensionTolerance.Type = TolType
'                        DimensionTolerance.SetFitValues(TolMaxFit$, TolMinFit$)
'                    End If
'                    If Not IsNothing(TolType) Then
'                        Select_sectionView_Size(Ast_NofSectionView#, Ast_NofSize#).SetLowerText(AddFit)
'                    End If
'                    part.ClearSelection2(True)
'                End Sub
'                Public Sub Modify_text_font_size(Mtfs_DimensionFontSize#, Mtfs_AnnotationFontSize#)
'                    'part.ClearSelection2(True)
'                    Dim myTextFormat As Object
'                    part = swapp.ActiveDoc
'                    myTextFormat = part.Extension.GetUserPreferenceTextFormat(SwConst.swUserPreferenceTextFormat_e.swDetailingDimensionTextFormat, 0)
'                    myTextFormat.CharHeight = Mtfs_DimensionFontSize# / 1000
'                    part.Extension.SetUserPreferenceTextFormat(SwConst.swUserPreferenceTextFormat_e.swDetailingDimensionTextFormat, 0, myTextFormat)
'                    part.EditRebuild3()
'                    part.ClearSelection2(True)
'                    part.WindowRedraw()
'                    part.ActivateSheet("图纸1")

'                    myTextFormat = part.Extension.GetUserPreferenceTextFormat(SwConst.swUserPreferenceTextFormat_e.swDetailingGeometricToleranceTextFormat, 0)
'                    myTextFormat.CharHeight = Mtfs_AnnotationFontSize# / 1000
'                    part.Extension.SetUserPreferenceTextFormat(SwConst.swUserPreferenceTextFormat_e.swDetailingGeometricToleranceTextFormat, 0, myTextFormat)
'                    myTextFormat = part.Extension.GetUserPreferenceTextFormat(SwConst.swUserPreferenceTextFormat_e.swDetailingNoteTextFormat, 0)
'                    myTextFormat.CharHeight = Mtfs_AnnotationFontSize# / 1000
'                    part.Extension.SetUserPreferenceTextFormat(SwConst.swUserPreferenceTextFormat_e.swDetailingDatumTextFormat, 0, myTextFormat)
'                    myTextFormat = part.Extension.GetUserPreferenceTextFormat(SwConst.swUserPreferenceTextFormat_e.swDetailingSurfaceFinishTextFormat, 0)
'                    myTextFormat.CharHeight = Mtfs_AnnotationFontSize# / 1000
'                    part.Extension.SetUserPreferenceTextFormat(SwConst.swUserPreferenceTextFormat_e.swDetailingSurfaceFinishTextFormat, 0, myTextFormat)
'                    part.EditRebuild3()
'                    part.ClearSelection2(True)
'                    part.WindowRedraw()
'                    part.ActivateSheet("图纸1")
'                    part.EditUndo(0)
'                End Sub
'                Public Function Store_Files(SF_StoreFilesType$, SF_StoreFilesName$)
'                    Dim dz1 As String
'                    dz1 = "E:\works\generator_parts_library\rotor_shaft"
'                    Dim dz2 As String
'                    dz2 = "\" & SF_StoreFilesName & ".SLDPRT"
'                    Dim dz3 As String
'                    dz3 = "\" & SF_StoreFilesName & ".SLDDRW"
'                    If SF_StoreFilesType = "三维图" Then
'                        part.SaveAs3(dz1 + dz2, 0, 2)
'                    ElseIf SF_StoreFilesType = "工程图" Then
'                        part.SaveAs3(dz1 + dz3, 0, 2)
'                    End If
'                End Function
'                Public Sub Detail_View(DV_TotalSteps#, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline As Boolean)
'                    DV_ZoomPointFromNstepStartPoint = DV_ZoomPointFromNstepStartPoint / 1000 : DV_ZoomCirRadius = DV_ZoomCirRadius# / 1000
'                    If DV_TotalSteps = 5 Then
'                        Detail_View_Module2(line0010, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 6 Then
'                        Detail_View_Module2(line0012, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 7 Then
'                        Detail_View_Module2(line0014, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 8 Then
'                        Detail_View_Module2(line0016, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 9 Then
'                        Detail_View_Module2(line0018, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 10 Then
'                        Detail_View_Module2(line0020, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 11 Then
'                        Detail_View_Module2(line0022, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 12 Then
'                        Detail_View_Module2(line0024, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 13 Then
'                        Detail_View_Module2(line0026, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 14 Then
'                        Detail_View_Module2(line0028, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_TotalSteps = 15 Then
'                        Detail_View_Module2(line0030, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    End If
'                End Sub
'                Public Function Insert_Drawings_Position(Position#, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, DVM_FullOutline As Boolean)
'                    If Position# = 1 Then
'                        part.CreateDetailViewAt3(SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 2 Then
'                        part.CreateDetailViewAt3(2 * SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 3 Then
'                        part.CreateDetailViewAt3(3 * SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 4 Then
'                        part.CreateDetailViewAt3(4 * SheetPr(5) / 5, 13 * SheetPr(6) / 16, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 5 Then
'                        part.CreateDetailViewAt3(8 * SheetPr(5) / 9, 21 * SheetPr(6) / 32, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 6 Then
'                        part.CreateDetailViewAt3(8 * SheetPr(5) / 9, 11 * SheetPr(6) / 32, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 7 Then
'                        part.CreateDetailViewAt3(SheetPr(5) / 9, 11 * SheetPr(6) / 32, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 8 Then
'                        part.CreateDetailViewAt3(SheetPr(5) / 9, 21 * SheetPr(6) / 32, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 9 Then
'                        part.CreateDetailViewAt3(8 * SheetPr(5) / 9, SheetPr(6) / 5, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 10 Then
'                        part.CreateDetailViewAt3(7 * SheetPr(5) / 9, SheetPr(6) / 5, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    ElseIf Position# = 11 Then
'                        part.CreateDetailViewAt3(6 * SheetPr(5) / 9, SheetPr(6) / 5, 0, 0, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, 1, DVM_FullOutline)
'                    End If
'                End Function
'                Public Function Detail_View_Module1(DVM_TotalStepsHorizontalLine As SldWorks.SketchLine, DVM_NstepHorizontalLine As SldWorks.SketchLine, DVM_ZoomPointFromNstepStartPoint#, DVM_ZoomCirRadius#, DVM_Position#, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, DVM_FullOutline As Boolean)
'                    Dim point, point1 As SldWorks.ISketchPoint
'                    Dim SketchArc As SldWorks.ISketchSegment

'                    point = DVM_TotalStepsHorizontalLine.GetEndPoint2()
'                    point1 = DVM_NstepHorizontalLine.GetStartPoint2
'                    part.ActivateView("工程图视图1")
'                    part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", -point.X / 2 + point1.X + DVM_ZoomPointFromNstepStartPoint#, point1.Y, 0, False, 0, Nothing, 0)
'                    SketchArc = part.SketchManager.CreateCircleByRadius(-point.X / 2 + point1.X + DVM_ZoomPointFromNstepStartPoint#, point1.Y, 0, DVM_ZoomCirRadius#)
'                    part.Extension.SelectByID2("", "SKETCHSEGMENT", -point.X / 2 + point1.X + DVM_ZoomPointFromNstepStartPoint#, point1.Y, 0, False, 0, Nothing, 0)
'                    Insert_Drawings_Position(DVM_Position#, DVM_Scale1#, DVM_Scale2#, DVM_LabelIn$, DVM_FullOutline)
'                    'Dim View As SldWorks.View
'                    'View = SelectionMgr.GetSelectedObject6(1, -1)
'                    'part.ClearSelection2(True)
'                    'part.ActivateView(View.GetName2)
'                    'part.Extension.SelectByID2(View.GetName2, "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
'                    'SketchArc = part.SketchManager.CreateCircleByRadius(0, 0, 0, 0.01)

'                    'View = SelectionMgr.GetSelectedObject6(1, -1)
'                    'vComponents = View.GetVisibleComponents() '获得可视组件集合
'                    'vEdges = View.GetVisibleEntities2(vComponents(0), 1) '获得特定可视实体集合
'                    'vEdgeCount = View.GetVisibleEntityCount2(vComponents(0), 1) '获得特定可视实体集合数量
'                    'part.ClearSelection2(True)
'                    'vEdgeCount = 0
'                    ''Do Until vEdgeCount > 200
'                    ''    For i = vEdgeCount To vEdgeCount + 20
'                    ''        selecmag.AddSelectionListObject(vEdges(vEdgeCount), Nothing)
'                    ''    Next
'                    ''    vEdgeCount = vEdgeCount + 20
'                    ''    MessageBox.Show(vEdgeCount)
'                    ''    part.ClearSelection2(True)
'                    ''Draw.EditRebuild()
'                    ''Loop
'                    'Do Until vEdgeCount > 200
'                    '    SelectionMgr.AddSelectionListObject(vEdges(vEdgeCount), Nothing)
'                    '    MessageBox.Show(vEdgeCount)
'                    '    part.ClearSelection2(True)
'                    '    vEdgeCount = vEdgeCount + 1
'                    '    Draw.EditRebuild()
'                    'Loop

'                    'vEdgeCount = 0
'                    ''Do Until vEdgeCount > 200
'                    ''    For i = vEdgeCount To vEdgeCount + 20
'                    ''        selecmag.AddSelectionListObject(vEdges(i), Nothing)
'                    ''    Next
'                    ''    vEdgeCount = vEdgeCount + 20
'                    ''    MessageBox.Show(vEdgeCount)
'                    ''    part.ClearSelection2(True)
'                    ''Loop
'                    'Do Until vEdgeCount > 200
'                    '    selecmag.AddSelectionListObject(vEdge(vEdgeCount), Nothing)
'                    '    MessageBox.Show(vEdgeCount)
'                    '    part.ClearSelection2(True)
'                    '    vEdgeCount = vEdgeCount + 1
'                    '    Draw.EditRebuild()
'                    'Loop


























'                    'part.ClearSelection2(True)
'                    'part.ActivateView("工程图视图1")
'                    'part.Extension.SelectByID2("工程图视图1", "DRAWINGVIEW", 0, 0, 0, False, 0, Nothing, 0)
'                    'part.InsertModelAnnotations3(0, 10519023, True, False, True, True)
'                    'part.InsertModelAnnotations3(0, 10519023, False, False, True, True)


'                End Function
'                Public Function Detail_View_Module2(DVM_TotalStepsHorizontalLine As SldWorks.SketchLine, DV_Nstep#, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline As Boolean)
'                    If DV_Nstep = 1 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line002, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 2 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line004, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 3 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line006, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 4 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line008, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 5 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0010, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 6 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0012, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 7 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0014, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 8 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0016, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 9 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0018, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 10 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0020, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 11 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0022, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 12 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0024, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 13 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0026, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 14 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0028, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    ElseIf DV_Nstep = 15 Then
'                        Detail_View_Module1(DVM_TotalStepsHorizontalLine, line0030, DV_ZoomPointFromNstepStartPoint#, DV_ZoomCirRadius#, DV_Position#, DV_Scale1#, DV_Scale2#, DV_LabelIn$, DV_FullOutline)
'                    End If

'                End Function
'            End Class
'        End Class
'    End Class
'    Public Class Run
'        Public Class Shaft
'            Public Function S(str$, number#) As String
'                Dim c() As String
'                c = Split(str, "\"）
'                S = c(number - 1)
'            End Function


'            Public Function Shaft_Update(table_name) As String()
'                'Dim PythonUtils As Object
'                'PythonUtils = CreateObject("shaft")
'                'Dim aa As Object()
'                'aa = PythonUtils.test(table_name)
'                'Shaft_Update = {aa(0)， aa(1)}
















'            End Function
'            Public Sub Shaft_200_001(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=轴;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from seven_shaft", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop
'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_200_004 As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_200_004.Step_shaft(7, r("Step1_length"), r("Step1_diameter"), r("Step2_length"), r("Step2_diameter"), r("Step3_length"), r("Step3_diameter"), r("Step4_length"), r("Step4_diameter"), r("Step5_length"), r("Step5_diameter"), r("Step6_length"), r("Step6_diameter"), r("Step7_length"), r("Step7_diameter"))
'                ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注
'                ShaftPart_200_004.Right_rightRrapezoid_cut（6, r("Rrc_TrapTopLineLeng") + r("Rrc_TrapBotMinuTop"), (r("Step6_diameter") - r("Rrc_Trap_cutDia")) / 2, r("Rrc_TrapTopLineLeng"), 1, 7, S(r("Rrc_Trap_cutDiaTolFit"), 1),,,, S(r("Rrc_Trap_cutDiaTolFit"), 5)）  '标注1为下底-上底的水平距离（在轴的下方中间）+上底距离+切除之后轴的直径（在上底的1/2处），标注2为下底-上底的水平距离（在轴的下方右间）+上底距离+切除之后轴的直径（在N阶的右边）
'                ShaftPart_200_004.Left_chamfer_cut(1, r("Lcc_Cha01_HorDis"), r("Lcc_Cha01_HorDis"), 0, 1)
'                ShaftPart_200_004.Left_chamfer_cut(2, r("Lcc_Cha02_HorDis"), r("Lcc_Cha02_HorDis"), 1, 1)
'                ShaftPart_200_004.Right_chamfer_cut（7, r("Rcc_Cha02_HorDis"), r("Rcc_Cha02_HorDis"), 0, 0）   '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注
'                ShaftPart_200_004.Standard_circle_cut(2, r("Scc_2stepCut_Wid"), r("Scc_2stepCut_Dep"), 0, 1, 0)   'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_200_004.Standard_circle_cut(3, r("Scc_3stepCut_Wid"), r("Scc_3stepCut_Dep"), 0, 1, 3)
'                ShaftPart_200_004.Standard_circle_cut(5, r("Scc_5stepCut_Wid"), r("Scc_5stepCut_Dep"), 0, 2, 3)
'                ShaftPart_200_004.Standard_circle_cut(6, r("Scc_6stepCut_Wid"), r("Scc_6stepCut_Dep"), 0, 2, 0)
'                ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                ShaftPart_200_004.Nonstandard_circle_cut_Left(6, r("NccL_DisFro6stStarP"), r("NccL_6stCut_Wid"), r("NccL_6stCut_Dep"), 1, 0, 2, 3, S(r("NccL_DisFro6stStarPTolFit"), 1), S(r("NccL_DisFro6stStarPTolFit"), 2), S(r("NccL_DisFro6stStarPTolFit"), 3))
'                ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                ShaftPart_200_004.Left_overstep_keyway(6, r("Lok_Dis02BetKeyDomAndNst"), r("Lok_KeyCir02Dia"), r("Lok_Key02Leng"), r("Lok_ReduGro02DepDia"), 1, 0)  '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                ShaftPart_200_004.Nstep_keyway_Right(2, r("NkR_DisBetKeyDomRAndNstR"), r("NkR_KeyCirDia"), r("NkR_KeyLeng"), r("NkR_ReduGroDepDia"), 2, 1)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 1, 2, 1, 6, S(r("Step1_lengTolFit"), 1),, , , S(r("Step1_lengTolFit"), 5))
'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 3, 4, 1, 3)
'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 4, 5, 1, 3)
'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 5, 6, 1, 3)
'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 6, 7, 1, 4, S(r("Step6_lengTolFit"), 1),, , , S(r("Step6_lengTolFit"), 5))

'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 7, 8, 1, 6)
'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 7, 1, 6, S(r("SlD_Line2Line7_TolFit"), 1),, , , S(r("SlD_Line2Line7_TolFit"), 5))
'                ShaftPart_200_004.Stepshaft_length_Dimension（7, 1, 8, 1, 8, S(r("SlD_Line1Line8_TolFit"), 1), S(r("SlD_Line1Line8_TolFit"), 2), S(r("SlD_Line1Line8_TolFit"), 3))

'                ShaftPart_200_004.Stepshaft_diameter_Dimension(2, 1, 0, S(r("Step2_diaTolFit"), 1), , , , S(r("Step2_diaTolFit"), 5))
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(3, 1, 0)
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0) '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右（1，2，3）位置4为轴左边延长线，5为轴右边延长线
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(6, 2, 5, S(r("Step6_diaTolFit"), 1), , , , S(r("Step6_diaTolFit"), 5))
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(7, 5, 5, S(r("Step7_diaTolFit"), 1), , , , S(r("Step7_diaTolFit"), 5))

'                ShaftPart_200_004.Insert_Gtol(1, S(r("Insert_Gtol_Step1"), 1), S(r("Insert_Gtol_Step1"), 2), 1, 3, 0, S(r("Insert_Gtol_Step1"), 3), S(r("Insert_Gtol_Step1"), 4), S(r("Insert_Gtol_Step1"), 5))
'                ShaftPart_200_004.Insert_Gtol(4, S(r("Insert_Gtol_Step4"), 1), S(r("Insert_Gtol_Step4"), 2), 1, 3, 0, S(r("Insert_Gtol_Step4"), 3))
'                ShaftPart_200_004.Insert_Gtol(7, S(r("Insert_Gtol_Step7"), 1), S(r("Insert_Gtol_Step7"), 2), 1, 3, 0)

'                ShaftPart_200_004.Insert_SurfaceRoughness(2, 1, r("IS_RouVal_2Step"), "Rz", 2)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                ShaftPart_200_004.Insert_SurfaceRoughness(4, 1, r("IS_RouVal_4Step"), "Rz", 3)
'                ShaftPart_200_004.Insert_SurfaceRoughness(7, 1, r("IS_RouVal_7Step"), "Rz", 2)
'                ShaftPart_200_004.Insert_Datum(7, "B")
'                ShaftPart_200_004.Store_Files("三维图", Code$)
'                Dim ShaftDrawings_200_004 As New Parts_drawing.Shaft.Shaft_Drawings
'                ShaftDrawings_200_004.Drawings_Template("A0", Code$, S(r("TechRequire"), 1) + Chr(13) + Chr(10) + S(r("TechRequire"), 2) + Chr(13) + Chr(10) + S(r("TechRequire"), 3) + Chr(13) + Chr(10) + S(r("TechRequire"), 4), r("scale_m"), r("scale_D"), r("name"), r("old_Code"), r("material"))
'                Dim SV_NumberCalls%
'                SV_NumberCalls% = ShaftDrawings_200_004.Section_View(7, 1, 1, 2, "E", 1, r("Rh_ReduGroDepDia"), r("Rh_KeyCirDia"), 1, S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1)
'                SV_NumberCalls% = ShaftDrawings_200_004.Section_View(7, 2, 1, 2, "F", 2, r("Lok_ReduGro01DepDia"), r("Lok_KeyCir01Dia"), 1, S(r("Section_View02_RouVal"), 2), S(r("Section_View02_RouVal"), 1), SV_NumberCalls%)
'                SV_NumberCalls% = ShaftDrawings_200_004.Section_View(7, 1, 1, 2, " ", 3, r("Lok_ReduGro02DepDia"), r("Lok_KeyCir02Dia"), 1, S(r("Section_View03_RouVal"), 2), S(r("Section_View03_RouVal"), 1), SV_NumberCalls%)
'                ShaftDrawings_200_004.Section_View(7, 6, 1, 1, " ", 4, r("NkR_ReduGroDepDia"), r("NkR_KeyCirDia"), 1, S(r("Section_View04_RouVal"), 2), S(r("Section_View04_RouVal"), 1), SV_NumberCalls%)

'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(1, 1, S(r("Step1_diaTolFit"), 1), , , , S(r("Step1_diaTolFit"), 5))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(2, 1, S(r("Step2_diaTolFit"), 1), , , , S(r("Step2_diaTolFit"), 5))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(3, 1, S(r("Step4_diaTolFit"), 1), , , , S(r("Step4_diaTolFit"), 5))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(4, 1, S(r("Step6_diaTolFit"), 1), , , , S(r("Step6_diaTolFit"), 5))

'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(1, 2, S(r("Rh_ReduGroDepDiaTolFit"), 1), S(r("Rh_ReduGroDepDiaTolFit"), 2), S(r("Rh_ReduGroDepDiaTolFit"), 3), , )
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(2, 2, S(r("NkR_ReduGroDepDiaTolFit"), 1), S(r("NkR_ReduGroDepDiaTolFit"), 2), S(r("NkR_ReduGroDepDiaTolFit"), 3), ,)
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(3, 2, S(r("Lok_ReduGro01DepDiaTolFit"), 1), S(r("Lok_ReduGro01DepDiaTolFit"), 2), S(r("Lok_ReduGro01DepDiaTolFit"), 3), , )
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(4, 2, S(r("Lok_ReduGro02DepDiaTolFit"), 1), S(r("Lok_ReduGro02DepDiaTolFit"), 2), S(r("Lok_ReduGro02DepDiaTolFit"), 3), ,)

'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(1, 3, S(r("Rh_KeyCirDiaTolFit"), 1), , , S(r("Rh_KeyCirDiaTolFit"), 4))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(2, 3, S(r("NkR_KeyCirDiaTolFit"), 1), , , S(r("NkR_KeyCirDiaTolFit"), 4))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(3, 3, S(r("Lok_KeyCir01DiaTolFit"), 1), , , S(r("Lok_KeyCir01DiaTolFit"), 4))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(4, 3, S(r("Lok_KeyCir02DiaTolFit"), 1), , , S(r("Lok_KeyCir02DiaTolFit"), 4))
'                ShaftDrawings_200_004.Select_sectionView_Size(4, 1)
'                ShaftDrawings_200_004.Add_Gtol(S(r("Section_View04_Ins_Gtol"), 1), S(r("Section_View04_Ins_Gtol"), 2), S(r("Section_View04_Ins_Gtol"), 3))
'                ShaftDrawings_200_004.Modify_text_font_size(9, 7)
'            End Sub
'            Public Sub Shaft_200_002(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=轴;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from nine_shaft", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop
'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_200_003 As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_200_003.Step_shaft(9, r("Step1_length"), r("Step1_diameter"), r("Step2_length"), r("Step2_diameter"), r("Step3_length"), r("Step3_diameter"), r("Step4_length"), r("Step4_diameter"), r("Insert_leng_Dim_five") + r("Rcc_ChaHorDis_01"), r("Step5_diameter"), r("Step6_length"), r("Step6_diameter"), r("Insert_leng_Dim_seven") + r("DisBetCirAndChaHorEndP") + r("Rcc_ChaHorDis_02"),
'                                                r("Step7_diameter"), r("Insert_leng_Dim_eight") - r("DisBetCirAndChaHorEndP") - r("Rcc_ChaHorDis_02"), r("Step8_diameter"), r("Step9_length"), r("Step9_diameter"))
'                ShaftPart_200_003.Right_chamfer_cut(5, r("Rcc_ChaHorDis_01"), (r("Step6_diameter") - r("Step7_diameter")) / 2, 3, 3) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注
'                ShaftPart_200_003.Right_chamfer_cut(7, r("Rcc_ChaHorDis_02"), (r("Step7_diameter") - r("Step8_diameter")) / 2, 4, 0)
'                ShaftPart_200_003.Right_chamfer_cut(9, r("Rcc_ChaHorDis_03"), r("Rcc_ChaHorDis_03"), 1, 1)
'                ShaftPart_200_003.Left_chamfer_cut(1, r("Lcc_ChaHorDis"), r("Lcc_ChaVerDis"), 1, 1)   '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注
'                ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_200_003.Standard_circle_cut(4, r("Scc_NstepCut_Wid_02"), r("Scc_NstepCut_Dep_02"), 0, 0, 0)
'                ShaftPart_200_003.Standard_circle_cut(6, r("Scc_NstepCut_Wid_03"), r("Scc_NstepCut_Dep_03"), 0, 2, 5)
'                ShaftPart_200_003.Standard_circle_cut(8, r("Scc_NstepCut_Wid_03"), r("Scc_NstepCut_Dep_03"), 0, 2, 8)
'                ShaftPart_200_003.Nonstandard_circle_cut_Right(3, r("NccR_DisFromNstepEndP_01"), r("NccR_NstepCut_Wid_01"), r("NccR_NstepCut_Dep_01"), 2, 0, 1, 3, S(r("NccR_ToleranceFit"), 1), S(r("NccR_ToleranceFit"), 2), S(r("NccR_ToleranceFit"), 3))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                ShaftPart_200_003.Nonstandard_circle_cut_Right(7, r("DisBetCirAndChaHorEndP") + r("Rcc_ChaHorDis_02"), r("NccR_NstepCut_Wid_02"), r("NccR_NstepCut_Dep_02"), 1, 0, 0, 5)
'                ShaftPart_200_003.Nstep_keyway_Left(2, (r("Step3_diameter") - r("NkL_KeywayLength") - r("Scc_NstepCut_Wid_01")) / 2, r("NkL_KeywayCirDia"), r("NkL_KeywayLength"), r("NkL_ReduGroDepDia"), 0, 2)
'                ShaftPart_200_003.Nstep_keyway_Right(3, r("NkR_DisBetKeyDomRAndNstepR_01"), r("NkR_KeywayCirDia_01"), r("NkR_KeywayLength_01"), r("NkR_ReduGroDepDia_01"), 1, 2)
'                ShaftPart_200_003.Nstep_keyway_Right(5, r("Rcc_ChaHorDis_01") + r（"DisKeyDomRFrChaHorEndP"), r("NkR_KeywayCirDia_02"), r("NkR_KeywayLength_02"), r("NkR_ReduGroDepDia_02"), 0, 2)
'                ShaftPart_200_003.Nstep_keyway_Right(7, r("DisBetCirAndChaHorEndP") + r("Rcc_ChaHorDis_02") + r("NccR_NstepCut_Wid_02") + r("KeyCirDomRFromCirL"), r("NkR_KeywayCirDia_03"), r("NkR_KeywayLength_03"), r("NkR_ReduGroDepDia_03"), 0, 2)
'                '0为键长，1为NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（在中间，2在右边）3为在轴里面）+键长
'                ShaftPart_200_003.Stepshaft_length_Dimension（9, 1, 2, 1, 3)
'                ShaftPart_200_003.Stepshaft_length_Dimension（9, 2, 3, 1, 3)
'                ShaftPart_200_003.Stepshaft_length_Dimension（9, 3, 4, 1, 3)
'                ShaftPart_200_003.Stepshaft_length_Dimension（9, 4, 5, 1, 3)
'                ShaftPart_200_003.Stepshaft_length_Dimension（9, 3, 9, 1, 5, S(r("Line3AndLine9_TolFit"), 1), , , , S(r("Line3AndLine9_TolFit"), 5))
'                ShaftPart_200_003.Stepshaft_length_Dimension（9, 1, 10, 1, 7, S(r("Line1AndLine10_TolFit"), 1), ,,, S(r("Line1AndLine10_TolFit"), 5))
'                ShaftPart_200_003.Insert_length_Dimension（r("Step1_length") + r("Step2_length") + r("Step3_length") + r("Step4_length") + r("Insert_leng_Dim_five"), -r("DisKeyDomRFrChaHorEndP"), 2, 1)
'                ShaftPart_200_003.Insert_length_Dimension（r("Step1_length") + r("Step2_length") + r("Step3_length") + r("Step4_length"), r("Insert_leng_Dim_five"), 2, 3)
'                ShaftPart_200_003.Stepshaft_length_Dimension（9, 6, 7, 1, 3)
'                ShaftPart_200_003.Insert_length_Dimension（r("TotalSteps_length") - r("Step9_length") - r("Insert_leng_Dim_eight"), -r("Insert_leng_Dim_seven"), 2, 3, S(r("Ins_leng_Dim_seven_TolFit"), 1), S(r("Ins_leng_Dim_seven_TolFit"), 2), S(r("Ins_leng_Dim_seven_TolFit"), 3))
'                ShaftPart_200_003.Insert_length_Dimension（r("TotalSteps_length") - r("Step9_length"), -r("Insert_leng_Dim_eight"), 2, 3)
'                ShaftPart_200_003.Insert_length_Dimension（r("TotalSteps_length") - r("Step9_length") - r("Insert_leng_Dim_eight"), r("DisBetCirAndChaHorEndP"), 3, 2)
'                ShaftPart_200_003.Insert_length_Dimension（r("TotalSteps_length") - r("Step9_length") - r("Insert_leng_Dim_eight") - r("NccR_NstepCut_Wid_02"), -r("KeyCirDomRFromCirL"), 3, 1)
'                ShaftPart_200_003.Stepshaft_diameter_Dimension(1, 4, 0, S(r("dia_DimStep1__TolFit"), 1), S(r("dia_DimStep1__TolFit"), 2), -S(r("dia_DimStep1__TolFit"), 3))  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右（1，2，3）位置。
'                ShaftPart_200_003.Stepshaft_diameter_Dimension(3, 1, 0, S(r("dia_DimStep3__TolFit"), 1),,,, S(r("dia_DimStep3__TolFit"), 5))
'                ShaftPart_200_003.Stepshaft_diameter_Dimension(4, 3, 0) '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右（1，2，3）位置4为轴左边延长线，5为轴右边延长线
'                ShaftPart_200_003.Stepshaft_diameter_Dimension(6, 2, 0)
'                ShaftPart_200_003.Stepshaft_diameter_Dimension(7, 5, 0, S(r("dia_DimStep7__TolFit"), 1),,,, S(r("dia_DimStep7__TolFit"), 5))
'                ShaftPart_200_003.Stepshaft_diameter_Dimension(8, 5, 0)
'                ShaftPart_200_003.Stepshaft_diameter_Dimension(9, 5, 0, S(r("dia_DimStep9__TolFit"), 1),,,, S(r("dia_DimStep9__TolFit"), 5))
'                ShaftPart_200_003.Insert_Gtol(2, S(r("Insert_Gtol_Step2"), 1), S(r("Insert_Gtol_Step2"), 2), 1, 5, 0)
'                ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, 0, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                ShaftPart_200_003.Insert_Gtol(5, S(r("Insert_Gtol_Step5"), 1), S(r("Insert_Gtol_Step5"), 2), 1, 3, 0, S(r("Insert_Gtol_Step5"), 3))
'                ShaftPart_200_003.Insert_Gtol(7, S(r("Insert_Gtol_Step7"), 1), S(r("Insert_Gtol_Step7"), 2), 1, 5, 0, S(r("Insert_Gtol_Step7"), 3))
'                ShaftPart_200_003.Insert_Gtol(9, S(r("Insert_Gtol_Step9"), 1), S(r("Insert_Gtol_Step9"), 2), 3, 2, 0)
'                ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                ShaftPart_200_003.Insert_SurfaceRoughness(2, r("RoughnessType"), r("IS_RouVal_2Step"), "Rz", 2)
'                ShaftPart_200_003.Insert_SurfaceRoughness(3, r("RoughnessType"), r("IS_RouVal_3_01Step"), "Rz", 1)
'                ShaftPart_200_003.Insert_SurfaceRoughness(3, r("RoughnessType"), r("IS_RouVal_3_02Step"), "Rz", 3)
'                ShaftPart_200_003.Insert_SurfaceRoughness(5, r("RoughnessType"), r("IS_RouVal_5Step"), "Rz", 2)
'                ShaftPart_200_003.Insert_SurfaceRoughness(7, r("RoughnessType"), r("IS_RouVal_7_02Step"), "Rz", 5)
'                ShaftPart_200_003.Insert_SurfaceRoughness(7, r("RoughnessType"), r("IS_RouVal_7_01Step"), "Rz", 1)
'                ShaftPart_200_003.Insert_SurfaceRoughness(9, r("RoughnessType"), r("IS_RouVal_9Step"), "Rz", 5)
'                ShaftPart_200_003.Insert_Datum(9, "B")
'                'ShaftPart_200_003.Offset_Punch(OP_OffsetCenterDis, OP_NumHole, P_SizeHole)
'                ShaftPart_200_003.Store_Files("三维图", Code$)
'                Dim ShaftDrawings_200_003 As New Parts_drawing.Shaft.Shaft_Drawings
'                ShaftDrawings_200_003.Drawings_Template("A0", Code$, S(r("TechRequire"), 1) + Chr(13) + Chr(10) + S(r("TechRequire"), 2) + Chr(13) + Chr(10) + S(r("TechRequire"), 3) + Chr(13) + Chr(10) + S(r("TechRequire"), 4) + Chr(13) + Chr(10) + S(r("TechRequire"), 5), r("scale_m"), r("scale_d"), r("name"), r("old_Code"), r("material"))
'                Dim SV_NumberCalls%
'                SV_NumberCalls% = ShaftDrawings_200_003.Section_View(9, 2, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")
'                SV_NumberCalls% = ShaftDrawings_200_003.Section_View(9, 3, 2, 3, "E", 2, r("NkR_ReduGroDepDia_01"), r("NkR_KeywayCirDia_01"), r("RoughnessType"), S(r("Section_View02_RouVal"), 2), S(r("Section_View02_RouVal"), 1), SV_NumberCalls%, "C")
'                SV_NumberCalls% = ShaftDrawings_200_003.Section_View(9, 5, 2, 3, "B", 3, r("NkR_ReduGroDepDia_02"), r("NkR_KeywayCirDia_02"), r("RoughnessType"), S(r("Section_View03_RouVal"), 2), S(r("Section_View03_RouVal"), 1), SV_NumberCalls%, "D")
'                ShaftDrawings_200_003.Section_View(9, 7, 2, 2, "C", 4, r("NkR_ReduGroDepDia_03"), r("NkR_KeywayCirDia_03"), r("RoughnessType"), S(r("Section_View04_RouVal"), 2), S(r("Section_View04_RouVal"), 1), SV_NumberCalls%, "K")
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(1, 1, S(r("Sec_Vi0101_Dia_TolFit"), 1), , , , S(r("Sec_Vi0101_Dia_TolFit"), 5))
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(2, 1, S(r("Sec_Vi0201_Dia_TolFit"), 1), , , , S(r("Sec_Vi0201_Dia_TolFit"), 5))
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(3, 1, S(r("Sec_Vi0301_Dia_TolFit"), 1), S(r("Sec_Vi0301_Dia_TolFit"), 2), S(r("Sec_Vi0301_Dia_TolFit"), 3), , )
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(4, 1, S(r("Sec_Vi0401_Dia_TolFit"), 1), , , , S(r("Sec_Vi0401_Dia_TolFit"), 5))

'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(1, 2, S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 3), , )
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(2, 2, S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 3), ,)
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(3, 2, S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 3), , )
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(4, 2, S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 3), ,)

'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(1, 3, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 1), , , S(r("Sec_Vi0103_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(2, 3, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 1), , , S(r("Sec_Vi0203_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(3, 3, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 1), , , S(r("Sec_Vi0303_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_003.Add_sectionView_toleranceFit(4, 3, S(r("Sec_Vi0403_KeyCirDia_TolFit"), 1), , , S(r("Sec_Vi0403_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_003.Select_sectionView_Size(1, 3)
'                ShaftDrawings_200_003.Add_Gtol(S(r("Sec_Vi01_Gtol"), 1), S(r("Sec_Vi01_Gtol"), 2), S(r("Sec_Vi01_Gtol"), 3))
'                ShaftDrawings_200_003.Select_sectionView_Size(2, 3)
'                ShaftDrawings_200_003.Add_Gtol(S(r("Sec_Vi02_Gtol"), 1), S(r("Sec_Vi02_Gtol"), 2), S(r("Sec_Vi02_Gtol"), 3))
'                ShaftDrawings_200_003.Select_sectionView_Size(3, 3)
'                ShaftDrawings_200_003.Add_Gtol(S(r("Sec_Vi03_Gtol"), 1), S(r("Sec_Vi03_Gtol"), 2), S(r("Sec_Vi03_Gtol"), 3))
'                ShaftDrawings_200_003.Select_sectionView_Size(4, 3)
'                ShaftDrawings_200_003.Add_Gtol(S(r("Sec_Vi04_Gtol"), 1), S(r("Sec_Vi04_Gtol"), 2), S(r("Sec_Vi04_Gtol"), 3))
'                ShaftDrawings_200_003.Modify_text_font_size(8, 7)
'                ShaftDrawings_200_003.Store_Files("工程图", Code$)
'            End Sub
'            Public Sub Shaft_200_003(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=轴;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from tenst01_04_06_08", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop

'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0) '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右（1，2，3）位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。


'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_200_004 As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_200_004.Step_shaft(10, r("Step1_length"), r("Step1_diameter"), r("Insert_lengDim_02s01") + r("Insert_lengDim_02s02"), r("Step2_diameter"), r("Line3AndLine5") - r("Step4_length"), r("Step3_diameter"),
'                                             r("Step4_length"), r("Step4_diameter"), r("Step5_length"), r("Step5_diameter"), r("Step6_length"), r("Step6_diameter"), r("LcA_Dis_ChaHorFr7stEndP") + r("LcA_ChaHorDist_07s"), r("Step7_diameter"), r("NccR_DisFrNstStartP_08s") + r("NNC_ChaHorDis") + r("NNC_Dis_ChaHEndPAndNoCirR"),
'                                             r("Step8_diameter"), r("NccR_DisFrNstAftEndP_08s") - r("NNC_ChaHorDis") - r("NNC_Dis_ChaHEndPAndNoCirR"), r("Step9_diameter"), r("Step10_length"), r("Step10_diameter"))

'                ShaftPart_200_004.Left_chamfer_Add（7, r("LcA_ChaHorDist_07s"), (r("Step6_diameter") - r("Step7_diameter")) / 2, 2, 6）
'                ShaftPart_200_004.Right_chamfer_cut(10, r("Rcc_ChaHorDis_10s"), r("Rcc_ChaHorDis_10s"), 2, 2) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注
'                ShaftPart_200_004.Left_chamfer_cut(1, r("Lcc_ChaHorDis_01s"), r("Lcc_ChaHorDis_01s"), 2, 2)   '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注
'                ShaftPart_200_004.Left_chamfer_cut(4, r("Lcc_ChaHorDis_04s"), r("Lcc_ChaHorDis_04s"), 2, 2)   '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注
'                ShaftPart_200_004.Standard_circle_cut(1, r("Scc_NstepCut_Wid_01s"), r("Scc_NstepCut_Dep_01s"), 0, 2, 20)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_200_004.Standard_circle_cut(2, r("Scc_NstepCut_Wid_02s"), r("Scc_NstepCut_Dep_02s"), 0, 2, 20)
'                ShaftPart_200_004.Standard_circle_cut(5, r("Scc_NstepCut_Wid_05s"), r("Scc_NstepCut_Dep_05s"), 0, 1, 20)
'                ShaftPart_200_004.Standard_circle_cut(7, r("Scc_NstepCut_Wid_07s"), r("Scc_NstepCut_Dep_07s"), 0, 1, 20)
'                ShaftPart_200_004.Standard_circle_cut(9, r("Scc_NstepCut_Wid_09s"), r("Scc_NstepCut_Dep_09s"), 0, 1, 5)


'                ShaftPart_200_004.Nonstandard_circle_cut_Right(4, r("NccR_DisFrNstEndP_04s"), r("NccR_NstepCut_Wid_04s"), r("NccR_NstepCut_Dep_04s"), 2, 0, 1, 5, S(r("NccR_ToleranceFit_04s"), 1), S(r("NccR_ToleranceFit_04s"), 2), S(r("NccR_ToleranceFit_04s"), 3))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 2, S(r("Rh_ToleranceFit"), 1),,,, S(r("Rh_ToleranceFit"), 5))       '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_200_004.Nstep_keyway_Right(4, r("NkR_DisBetKeyDomRAndNstR_04s"), r("NkR_KeywayCirDia_04s"), r("NkR_KeywayLength_04s"), r("NkR_ReduGroDepDia_04s"), 3, 2)  '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                ShaftPart_200_004.Nstep_keyway_Right(6, r("NkR_DisBetKeyDomRAndNstR_06s"), r("NkR_KeywayCirDia_06s"), r("NkR_KeywayLength_06s"), r("NkR_ReduGroDepDia_06s"), 1, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, r("NNC_ChaHorDis"), (r("Step8_diameter") - r("Step9_diameter")) / 2, r("NNC_Dis_ChaHEndPAndNoCirR"), r("NNC_NstepCut_Width"), r("NNC_NstepCut_Depth"), (r("NccR_DisFrNstStartP_08s") - r("Scc_NstepCut_Wid_07s") - r("NNC_NstepCut_Width") - r("NNC_KeywayLeng")) / 2,
'                                                                       r("NNC_KeyCirDia"), r("NNC_KeywayLeng"), r("NNC_ReduGroDepDia"), 0, 6, S(r("NNC_ToleranceFit"), 1), S(r("NNC_ToleranceFit"), 2), S(r("NNC_ToleranceFit"), 3))  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有

'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 1, 2, 1, 4, S(r("Line1AndLine2_TolFit"), 1),,,, S(r("Line1AndLine2_TolFit"), 5))
'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 4, 5, 1, 4)
'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 3, 5, 1, 6)
'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 5, 6, 1, 6)
'                'ShaftPart_200_005.Stepshaft_length_Dimension（10, 6, 7, 1, 6)
'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 1, 3, 1, 8, S(r("Line1AndLine3_TolFit"), 1),,,, S(r("Line1AndLine3_TolFit"), 5))
'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 1, 6, 2, 10, S(r("Line1AndLine6_TolFit"), 1), S(r("Line1AndLine6_TolFit"), 2), S(r("Line1AndLine6_TolFit"), 3))
'                'ShaftPart_200_005.Stepshaft_length_Dimension（10, 7, 8, 1, 6)
'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 10, 11, 1, 6)
'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 3, 10, 1, 8, S(r("Line3AndLine10_TolFit"), 1),,,, S(r("Line3AndLine10_TolFit"), 5))
'                ShaftPart_200_004.Stepshaft_length_Dimension（10, 1, 11, 1, 12, S(r("Line1AndLine11_TolFit"), 1),,,, S(r("Line1AndLine11_TolFit"), 5))

'                ShaftPart_200_004.Insert_length_Dimension（r("Step1_length"), r("Insert_lengDim_02s01"), 2, 4)
'                ShaftPart_200_004.Insert_length_Dimension（r("Step1_length") + r("Insert_lengDim_02s01"), r("Insert_lengDim_02s02"), 2, 4)

'                ShaftPart_200_004.Stepshaft_diameter_Dimension(2, 4, 0, S(r("dia_Step0201__TolFit"), 1),,,, S(r("dia_Step0201__TolFit"), 5))
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(2, 2, 0, S(r("dia_Step0202__TolFit"), 1),,,, S(r("dia_Step0202__TolFit"), 5))
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(3, 2, 0, S(r("dia_Step03__TolFit"), 1),,,, S(r("dia_Step03__TolFit"), 5))
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 2, 0)
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(7, 2, 0)
'                ShaftPart_200_004.Stepshaft_diameter_Dimension(10, 5, 0, S(r("dia_Step10__TolFit"), 1),,,, S(r("dia_Step10__TolFit"), 5))

'                ShaftPart_200_004.Insert_Gtol(1, S(r("Insert_Gtol_Step1"), 1), S(r("Insert_Gtol_Step1"), 2), 1, 5, 0, S(r("Insert_Gtol_Step1"), 3), S(r("Insert_Gtol_Step1"), 4), S(r("Insert_Gtol_Step1"), 5), S(r("Insert_Gtol_Step1"), 6))
'                ShaftPart_200_004.Insert_Gtol(4, S(r("Insert_Gtol_Step4"), 1), S(r("Insert_Gtol_Step4"), 2), 2, 6, 0, S(r("Insert_Gtol_Step4"), 3))
'                ShaftPart_200_004.Insert_Gtol(6, S(r("Insert_Gtol_Step6"), 1), S(r("Insert_Gtol_Step6"), 2), 2, 6, 0, S(r("Insert_Gtol_Step6"), 3))
'                ShaftPart_200_004.Insert_Gtol(8, S(r("Insert_Gtol_Step8"), 1), S(r("Insert_Gtol_Step8"), 2), 2, 6, 0, S(r("Insert_Gtol_Step8"), 3))
'                ShaftPart_200_004.Insert_Gtol(10, S(r("Insert_Gtol_Step10"), 1), S(r("Insert_Gtol_Step10"), 2), 2, 6, 0)

'                ShaftPart_200_004.Insert_SurfaceRoughness(1, 2, r("IS_RouVal_1Step"), "Rz", 1)
'                ShaftPart_200_004.Insert_SurfaceRoughness(2, 2, r("IS_RouVal_0201Step"), "Rz", 1)
'                ShaftPart_200_004.Insert_SurfaceRoughness(2, 2, r("IS_RouVal_0202Step"), "Rz", 3)
'                ShaftPart_200_004.Insert_SurfaceRoughness(3, 2, r("IS_RouVal_3Step"), "Rz", 2)
'                ShaftPart_200_004.Insert_SurfaceRoughness(4, 2, r("IS_RouVal_4Step"), "Rz", 3)
'                ShaftPart_200_004.Insert_SurfaceRoughness(6, 2, r("IS_RouVal_6Step"), "Rz", 1)
'                ShaftPart_200_004.Insert_SurfaceRoughness(8, 2, r("IS_RouVal_8Step"), "Rz", 1)
'                ShaftPart_200_004.Insert_SurfaceRoughness(10, 2, r("IS_RouVal_10Step"), "Rz", 5)
'                ShaftPart_200_004.Insert_Datum(10, "R")
'                ShaftPart_200_004.Insert_Datum(2, "A")
'                ShaftPart_200_004.Punch(0, 0.0198, 0.013, 0.0044, 0.026 - 0.0044, 1.129)

'                ShaftPart_200_004.Store_Files("三维图", r("Code"))
'                Dim ShaftDrawings_200_004 As New Parts_drawing.Shaft.Shaft_Drawings
'                ShaftDrawings_200_004.Drawings_Template("A0", r("Code"), S(r("TechRequire"), 1) + Chr(13) + Chr(10) + S(r("TechRequire"), 2) + Chr(13) + Chr(10) + S(r("TechRequire"), 3) + Chr(13) + Chr(10) + S(r("TechRequire"), 4) + Chr(13) + Chr(10) + S(r("TechRequire"), 5), r("scale_m"), r("scale_d"), r("name"), r("old_Code"), r("material"))
'                Dim SV_NumberCalls%
'                SV_NumberCalls% = ShaftDrawings_200_004.Section_View(10, 1, 2, 0, "A", 1, r("Rh_ReduGroDepDia"), r("Rh_KeyCirDia"), 2, S(r("Sec_Vi01_RouVal"), 1), S(r("Sec_Vi01_RouVal"), 2), 1, S(r("Sec_Vi_Datum"), 1))
'                SV_NumberCalls% = ShaftDrawings_200_004.Section_View(10, 4, 2, 2, "B", 2, r("NkR_ReduGroDepDia_04s"), r("NkR_KeywayCirDia_04s"), 2, S(r("Sec_Vi02_RouVal"), 1), S(r("Sec_Vi02_RouVal"), 2), SV_NumberCalls%, S(r("Sec_Vi_Datum"), 2))
'                SV_NumberCalls% = ShaftDrawings_200_004.Section_View(10, 6, 2, 2, "C", 3, r("NkR_ReduGroDepDia_06s"), r("NkR_KeywayCirDia_06s"), 2, S(r("Sec_Vi03_RouVal"), 1), S(r("Sec_Vi03_RouVal"), 2), SV_NumberCalls%, S(r("Sec_Vi_Datum"), 3))
'                SV_NumberCalls% = ShaftDrawings_200_004.Section_View(10, 8, 2, 2, "D", 4, r("NNC_ReduGroDepDia"), r("NNC_KeyCirDia"), 2, S(r("Sec_Vi04_RouVal"), 1), S(r("Sec_Vi04_RouVal"), 2), SV_NumberCalls%, S(r("Sec_Vi_Datum"), 4))

'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(1, 1, S(r("Sec_Vi0101_Dia_TolFit"), 1), , , , S(r("Sec_Vi0101_Dia_TolFit"), 5))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(2, 1, S(r("Sec_Vi0201_Dia_TolFit"), 1), , , , S(r("Sec_Vi0201_Dia_TolFit"), 5))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(3, 1, S(r("Sec_Vi0301_Dia_TolFit"), 1), S(r("Sec_Vi0301_Dia_TolFit"), 2), S(r("Sec_Vi0301_Dia_TolFit"), 3))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(4, 1, S(r("Sec_Vi0401_Dia_TolFit"), 1), , , , S(r("Sec_Vi0401_Dia_TolFit"), 5))

'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(1, 2, S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(2, 2, S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(3, 2, S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(4, 2, S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 3))

'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(1, 3, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 1), , , S(r("Sec_Vi0103_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(2, 3, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 1), , , S(r("Sec_Vi0203_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(3, 3, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 1), , , S(r("Sec_Vi0303_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_004.Add_sectionView_toleranceFit(4, 3, S(r("Sec_Vi0403_KeyCirDia_TolFit"), 1), , , S(r("Sec_Vi0403_KeyCirDia_TolFit"), 4))

'                ShaftDrawings_200_004.Select_sectionView_Size(1, 3)
'                ShaftDrawings_200_004.Add_Gtol(S(r("Sec_Vi01_Gtol"), 1), S(r("Sec_Vi01_Gtol"), 2), S(r("Sec_Vi01_Gtol"), 3))
'                ShaftDrawings_200_004.Select_sectionView_Size(2, 3)
'                ShaftDrawings_200_004.Add_Gtol(S(r("Sec_Vi02_Gtol"), 1), S(r("Sec_Vi02_Gtol"), 2), S(r("Sec_Vi02_Gtol"), 3))
'                ShaftDrawings_200_004.Select_sectionView_Size(3, 3)
'                ShaftDrawings_200_004.Add_Gtol(S(r("Sec_Vi03_Gtol"), 1), S(r("Sec_Vi03_Gtol"), 2), S(r("Sec_Vi03_Gtol"), 3))
'                ShaftDrawings_200_004.Select_sectionView_Size(4, 3)
'                ShaftDrawings_200_004.Add_Gtol(S(r("Sec_Vi04_Gtol"), 1), S(r("Sec_Vi04_Gtol"), 2), S(r("Sec_Vi04_Gtol"), 3))
'                ShaftDrawings_200_004.Detail_View(10, 4, S(r("Detail_View"), 1), S(r("Detail_View"), 2), 8, S(r("Detail_View"), 3), S(r("Detail_View"), 4), S(r("Detail_View"), 5), True)
'                ShaftDrawings_200_004.Modify_text_font_size(8, 7)
'                ShaftDrawings_200_004.Store_Files("工程图", Code$)

'            End Sub
'            Public Sub house_number_355_shaft(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("host=localhost" & ";userid=root" & ";password=123456" & ";database=shaft;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from house_number_355_shaft", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop

'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0)  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。


'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_355_house_number As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_355_house_number.Step_shaft(7, r("Step1_length"), r("Step1_diameter"), r("Line1AndLine3") - r("Step1_length"), r("Step2_diameter"), r("Line3AndLine5") - r("Step4_length"), r("Step3_diameter"), r("Step4_length"), r("Step4_diameter"), r("Dis05stStartPFrDivLine") + r("Dis05stEndPFrDivLine"), r("Step5_diameter"), r("Step6_length"), r("Step6_diameter"), r("Step7_length"), r("Step7_diameter"))


'                ShaftPart_355_house_number.Right_chamfer_cut(6, r("Rcc_6stChaHorDis"), (r("Step6_diameter") - r("Rcc_6stChaMinDia")) / 2, 5, 2,, S(r("dia_06stChaMinDia_TolFit"), 1),,,, S(r("dia_06stChaMinDia_TolFit"), 5))
'                ShaftPart_355_house_number.Right_chamfer_cut(7, r("Rcc_7stChaHorDis"), r("Rcc_7stChaHorDis"), 2, 2)
'                ShaftPart_355_house_number.Left_chamfer_cut(1, r("Lcc_01stChaHorDis"), r("Lcc_01stChaHorDis"), 2, 2)

'                ShaftPart_355_house_number.Standard_circle_cut(2, r("Scc_2stepCut_Wid"), r("Scc_2stepCut_Dep"), r("Scc_2stepFillRad"), 1, 20)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_355_house_number.Standard_circle_cut(3, r("Scc_3stepCut_Wid"), r("Scc_3stepCut_Dep"), 0, 2, 20)
'                ShaftPart_355_house_number.Standard_circle_cut(4, r("Scc_4stepCut_Wid"), r("Scc_4stepCut_Dep"), 0, 1, 20)
'                ShaftPart_355_house_number.Standard_circle_cut(5, r("Scc_5stepCut_Wid"), r("Scc_5stepCut_Dep"), 0, 1, 10)
'                ShaftPart_355_house_number.Standard_circle_cut(6, r("Scc_6stepCut_Wid"), r("Scc_6stepCut_Dep"), r("Scc_6stepFillRad"), 1, 10)

'                ShaftPart_355_house_number.Nonstandard_circle_cut_Right(3, r("NccR_DisFr03stEndP"), r("NccR_03stCut_Wid"), r("NccR_03stCut_Dep"), 2, 0, 1, 5, S(r("NccR_03stToleranceFit"), 1), S(r("NccR_03stToleranceFit"), 2), S(r("NccR_03stToleranceFit"), 3))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                ShaftPart_355_house_number.Nonstandard_circle_cut_Left(6, r("NccL_DisFro06stStarP"), r("NccL_06stCut_Wid"), r("NccL_06stCut_Dep"), 1, 0, 1, 5, S(r("NccL_06stToleranceFit"), 1), S(r("NccL_06stToleranceFit"), 2), S(r("NccL_06stToleranceFit"), 3))


'                ShaftPart_355_house_number.Nstep_keyway_Right(2, r("NkR_DisBetKeyRAnd2stR"), r("NkR_02sKeywayCirDia"), r("NkR_02sKeywayLength"), r("NkR_02sReduGroDepDia"), 3, 2)  '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                ShaftPart_355_house_number.Nstep_keyway_Right(3, r("NkR_DisBetKeyRAnd3stR"), r("NkR_03sKeywayCirDia"), r("NkR_03sKeywayLength"), r("NkR_03sReduGroDepDia"), 3, 4)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                ShaftPart_355_house_number.Nstep_keyway_Right(5, r("NkR_DisKeyRFr05stDivLine") + r("Dis05stEndPFrDivLine"), r("NkR_05sKeywayCirDia"), r("NkR_05sKeywayLength"), r("NkR_05sReduGroDepDia"), 0, 4)
'                ShaftPart_355_house_number.Nstep_keyway_Left(6, r("NkL_DisBetKeyLAnd06stL"), r("NkL_06sKeywayCirDia"), r("NkL_06sKeywayLength"), r("NkL_06sReduGroDepDia"), 1, 2)

'                ShaftPart_355_house_number.Stepshaft_length_Dimension（7, 1, 2, 1, 3)    '1为标注在下方，2为标注在上方
'                ShaftPart_355_house_number.Stepshaft_length_Dimension（7, 1, 3, 1, 8)
'                ShaftPart_355_house_number.Stepshaft_length_Dimension（7, 3, 5, 1, 6, S(r("Line3AndLine5_TolFit"), 1), S(r("Line3AndLine5_TolFit"), 2), S(r("Line3AndLine5_TolFit"), 3))
'                ShaftPart_355_house_number.Stepshaft_length_Dimension（7, 7, 8, 1, 8)
'                ShaftPart_355_house_number.Stepshaft_length_Dimension（7, 6, 7, 2, 10, S(r("Line6AndLine7_TolFit"), 1), S(r("Line6AndLine7_TolFit"), 2), S(r("Line6AndLine7_TolFit"), 3))
'                ShaftPart_355_house_number.Stepshaft_length_Dimension（7, 3, 7, 1, 8, S(r("Line3AndLine7_TolFit"), 1),,,, S(r("Line3AndLine7_TolFit"), 5))
'                ShaftPart_355_house_number.Stepshaft_length_Dimension（7, 1, 8, 1, 10, S(r("Line1AndLine8_TolFit"), 1),,,, S(r("Line1AndLine8_TolFit"), 5))
'                ShaftPart_355_house_number.Stepshaft_length_Dimension（7, 7, 8, 1, 6)

'                ShaftPart_355_house_number.Insert_length_Dimension（r("Line1AndLine3") + r("Line3AndLine5"), r("Dis05stStartPFrDivLine"), 2, 4)   '标注中间距离（1.2.3左中右）
'                ShaftPart_355_house_number.Insert_length_Dimension（r("Line1AndLine3") + r("Line3AndLine5") + r("Dis05stStartPFrDivLine"), -r("NkR_DisKeyRFr05stDivLine"), 2, 2)
'                ShaftPart_355_house_number.Insert_length_Dimension（r("Line1AndLine3") + r("Line3AndLine5") + r("Dis05stStartPFrDivLine"), r("Dis05stEndPFrDivLine"), 2, 4)
'                ShaftPart_355_house_number.Insert_length_Dimension（r("Line1AndLine8") - r("Rcc_6stChaHorDis") - r("Step7_length"), -r("DisChaHorEPFr06stStartP"), 2, 4)

'                ShaftPart_355_house_number.Stepshaft_diameter_Dimension(1, 4, 0, S(r("dia_Step01__TolFit"), 1),,,, S(r("dia_Step01__TolFit"), 5))  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                ShaftPart_355_house_number.Stepshaft_diameter_Dimension(3, 1, 0, S(r("dia_Step03__TolFit"), 1),,,, S(r("dia_Step03__TolFit"), 5))
'                ShaftPart_355_house_number.Stepshaft_diameter_Dimension(4, 2, 0)
'                ShaftPart_355_house_number.Stepshaft_diameter_Dimension(5, 7, 0, S(r("dia_Step05__TolFit"), 1), S(r("dia_Step05__TolFit"), 2), S(r("dia_Step05__TolFit"), 3))
'                ShaftPart_355_house_number.Stepshaft_diameter_Dimension(6, 3, 0, S(r("dia_Step06__TolFit"), 1),,,, S(r("dia_Step06__TolFit"), 5))
'                ShaftPart_355_house_number.Stepshaft_diameter_Dimension(7, 5, 0, S(r("dia_Step07__TolFit"), 1),,,, S(r("dia_Step07__TolFit"), 5))

'                ShaftPart_355_house_number.Insert_Gtol(2, S(r("Insert_Gtol_Step2"), 1), S(r("Insert_Gtol_Step2"), 2), 1, 3, 0)
'                ShaftPart_355_house_number.Insert_Gtol(5, S(r("Insert_Gtol_Step5"), 1), S(r("Insert_Gtol_Step5"), 2), 1, 6, 0, S(r("Insert_Gtol_Step5"), 3))
'                ShaftPart_355_house_number.Insert_Gtol(7, S(r("Insert_Gtol_Step7"), 1), S(r("Insert_Gtol_Step7"), 2), 2, 6, 0)

'                ShaftPart_355_house_number.Insert_SurfaceRoughness(2, 2, S(r("IS_RouVal_2Step"), 1), "Rz", 1)
'                ShaftPart_355_house_number.Insert_SurfaceRoughness(3, 2, S(r("IS_RouVal_3Step"), 1), "Rz", 3)
'                ShaftPart_355_house_number.Insert_SurfaceRoughness(5, 2, S(r("IS_RouVal_5Step"), 1), "Rz", 1)
'                ShaftPart_355_house_number.Insert_SurfaceRoughness(6, 2, S(r("IS_RouVal_6Step"), 1), "Rz", 1)
'                ShaftPart_355_house_number.Insert_SurfaceRoughness(7, 2, S(r("IS_RouVal_7Step"), 1), "Rz", 5)
'                ShaftPart_355_house_number.Insert_Datum(7, "B")
'                ShaftPart_355_house_number.Punch(1, 0.016, 0.016, 0.02, 0.02, r("Line1AndLine3") + r("Line3AndLine5") + r("Dis05stStartPFrDivLine") + r("Dis05stEndPFrDivLine") + r("Step6_length") + r("Step7_length"))


'                ShaftPart_355_house_number.Store_Files("三维图", r("Code"))
'                'Dim ShaftDrawings_355_house_number As New Parts_drawing.Shaft.Shaft_Drawings
'                'ShaftDrawings_355_house_number.Drawings_Template("A0", r("Code"), S(r("TechRequire"), 1) + Chr(13) + Chr(10) + S(r("TechRequire"), 2) + Chr(13) + Chr(10) + S(r("TechRequire"), 3) + Chr(13) + Chr(10) + S(r("TechRequire"), 4) + Chr(13) + Chr(10) + S(r("TechRequire"), 5), r("scale_m"), r("scale_d"), r("name"), r("old_Code"), r("material"))
'                'Dim SV_NumberCalls%
'                'SV_NumberCalls% = ShaftDrawings_355_house_number.Section_View(7, 2, 2, 2, "G1", 1, r("NkR_02sReduGroDepDia"), r("NkR_02sKeywayCirDia"), 2, S(r("Sec_Vi01_RouVal"), 1), S(r("Sec_Vi01_RouVal"), 2), 1, S(r("Sec_Vi01_RouVal"), 1))
'                'SV_NumberCalls% = ShaftDrawings_355_house_number.Section_View(7, 3, 2, 3, "G2", 2, r("NkR_03sReduGroDepDia"), r("NkR_03sKeywayCirDia"), 2, S(r("Sec_Vi02_RouVal"), 1), S(r("Sec_Vi02_RouVal"), 2), SV_NumberCalls%, "")
'                'SV_NumberCalls% = ShaftDrawings_355_house_number.Section_View(7, 5, 2, 2, "G3", 3, r("NkR_05sReduGroDepDia"), r("NkR_05sKeywayCirDia"), 2, S(r("Sec_Vi03_RouVal"), 1), S(r("Sec_Vi03_RouVal"), 2), SV_NumberCalls%, "")
'                'SV_NumberCalls% = ShaftDrawings_355_house_number.Section_View(7, 6, 2, 1, "G4", 4, r("NkL_06sReduGroDepDia"), r("NkL_06sKeywayCirDia"), 2, S(r("Sec_Vi04_RouVal"), 1), S(r("Sec_Vi04_RouVal"), 2), SV_NumberCalls%, "")

'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(1, 1, S(r("Sec_Vi0101_Dia_TolFit"), 1),,,, S(r("Sec_Vi0101_Dia_TolFit"), 5))
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(2, 1, S(r("Sec_Vi0201_Dia_TolFit"), 1), S(r("Sec_Vi0201_Dia_TolFit"), 2), S(r("Sec_Vi0201_Dia_TolFit"), 3))
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(3, 1)
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(4, 1, S(r("Sec_Vi0401_Dia_TolFit"), 1),,,, S(r("Sec_Vi0401_Dia_TolFit"), 5))

'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(1, 2, S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 3))
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(2, 2, S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 3))
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(3, 2, S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 3))
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(4, 2, S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 3))

'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(1, 3, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 4))
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(2, 3, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 4))
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(3, 3, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 4))
'                'ShaftDrawings_355_house_number.Add_sectionView_toleranceFit(4, 3, S(r("Sec_Vi0403_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0403_KeyCirDia_TolFit"), 4))

'                'ShaftDrawings_355_house_number.Select_sectionView_Size(1, 3)
'                'ShaftDrawings_355_house_number.Add_Gtol(S(r("Sec_Vi01_Gtol"), 1), S(r("Sec_Vi01_Gtol"), 2), S(r("Sec_Vi01_Gtol"), 3))
'                'ShaftDrawings_355_house_number.Select_sectionView_Size(2, 3)
'                'ShaftDrawings_355_house_number.Add_Gtol(S(r("Sec_Vi02_Gtol"), 1), S(r("Sec_Vi02_Gtol"), 2), S(r("Sec_Vi02_Gtol"), 3))
'                'ShaftDrawings_355_house_number.Select_sectionView_Size(3, 3)
'                'ShaftDrawings_355_house_number.Add_Gtol(S(r("Sec_Vi03_Gtol"), 1), S(r("Sec_Vi03_Gtol"), 2), S(r("Sec_Vi03_Gtol"), 3))
'                'ShaftDrawings_355_house_number.Select_sectionView_Size(4, 3)
'                'ShaftDrawings_355_house_number.Add_Gtol(S(r("Sec_Vi04_Gtol"), 1), S(r("Sec_Vi04_Gtol"), 2), S(r("Sec_Vi04_Gtol"), 3))
'                'ShaftDrawings_355_house_number.Detail_View(7, 3, S(r("Detail_View07st"), 1), S(r("Detail_View07st"), 2), 9, S(r("Detail_View07st"), 3), S(r("Detail_View07st"), 4), S(r("Detail_View07st"), 5), True)
'                'ShaftDrawings_355_house_number.Detail_View(7, 7, S(r("Detail_View03st"), 1), S(r("Detail_View03st"), 2), 10, S(r("Detail_View03st"), 3), S(r("Detail_View03st"), 4), S(r("Detail_View03st"), 5), True)
'                'ShaftDrawings_355_house_number.Modify_text_font_size(8, 7)
'                'ShaftDrawings_355_house_number.Store_Files("工程图", Code$)

'            End Sub
'            Public Sub Shaft_200_005(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=轴;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from eight01_04_06_07", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop

'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0)  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。
'                'ShaftPart_200_004.Right_rightRrapezoid_cut（）  '标注1为下底-上底的水平距离（在轴的下方中间）+上底距离+切除之后轴的直径（在上底的1/2处），标注2为下底-上底的水平距离（在轴的下方右间）+上底距离+切除之后轴的直径（在N阶的右边）
'                '3为上底的水平距离（在轴的下方中间）+下底距离+切除之后轴的直径（在N阶的右边）+下底终点距N阶起点距离（中间）
'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_200_006 As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_200_006.Step_shaft(8, r("Step1_length"), r("Step1_diameter"), r("Dis02stStartPFrDivLine") + r("Dis02stEndPFrDivLine"), r("Step2_diameter"), r("Step3_length"), r("Step3_diameter"), r("Line3AndLine6") - r("Step3_length") - r("Step5_length"), r("Step4_diameter"), r("Step5_length"), r("Step5_diameter"), r("Dis06stStartPFrDivLine") + r("Dis06stEndPFrDivLine"), r("Step6_diameter"), r("Step7_length"), r("Step7_diameter"), r("Step8_length"), r("Step8_diameter"))
'                ShaftPart_200_006.Right_chamfer_cut(6, r("Rcc_6stChaHorDis"), r("Rcc_6stChaHorDis"), 2, 2) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                ShaftPart_200_006.Right_chamfer_cut(8, r("Rcc_8stChaHorDis"), r("Rcc_8stChaHorDis"), 2, 2)
'                ShaftPart_200_006.Left_chamfer_cut(1, r("Lcc_01stChaHorDis"), r("Lcc_01stChaHorDis"), 2, 2)

'                ShaftPart_200_006.Standard_circle_cut(1, r("Scc_1stepCut_Wid"), r("Scc_1stepCut_Dep"), 0, 1, 10)
'                ShaftPart_200_006.Standard_circle_cut(2, r("Scc_2stepCut_Wid"), r("Scc_2stepCut_Dep"), 0, 1, 20)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_200_006.Standard_circle_cut(4, r("Scc_4stepCut_Wid"), r("Scc_4stepCut_Dep"), 0, 1, 20)
'                ShaftPart_200_006.Standard_circle_cut(5, r("Scc_5stepCut_Wid"), r("Scc_5stepCut_Dep"), 0, 1, 10)
'                ShaftPart_200_006.Standard_circle_cut(6, r("Scc_6stepCut_Wid"), r("Scc_6stepCut_Dep"), 0, 1, 10)
'                ShaftPart_200_006.Standard_circle_cut(7, r("Scc_7stepCut_Wid"), r("Scc_7stepCut_Dep"), r("Scc_7stepCutBotFillRad"), 1, 10)

'                ShaftPart_200_006.Nonstandard_circle_cut_Right(4, r("NccR_DisFr04stEndP"), r("NccR_04stCut_Wid"), r("NccR_04stCut_Dep"), 2, r("NccR_04stBotFillRad"), 1, 5, S(r("NccR_04stToleranceFit"), 1), S(r("NccR_04stToleranceFit"), 2), S(r("NccR_04stToleranceFit"), 3))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                ShaftPart_200_006.Nonstandard_circle_cut_Left(7, r("NccL_DisFro07stStarP"), r("NccL_07stCut_Wid"), r("NccL_07stCut_Dep"), 1, 0, 1, 5, S(r("NccL_07stToleranceFit"), 1), S(r("NccL_07stToleranceFit"), 2), S(r("NccL_07stToleranceFit"), 3), , , 1, r("NccL_07sTopChaLeng"))

'                ShaftPart_200_006.Right_rightRrapezoid_cut（7, r("Rrc_TraBaseLineLeng"), (r("Step7_diameter") - r("Rrc_TraMinDia")) / 2, r("Rrc_TraTopLineLeng"), 3, 8, S(r("Rrc_TraMinDiaToleranceFit"), 1),,,, S(r("Rrc_TraMinDiaToleranceFit"), 5))

'                ShaftPart_200_006.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_200_006.Nstep_keyway_Right(4, r("NkR_DisBetKeyRAnd4stR"), r("NkR_04sKeywayCirDia"), r("NkR_04sKeywayLength"), r("NkR_04sReduGroDepDia"), 3, 4)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                ShaftPart_200_006.Nstep_keyway_Right(6, r("NkR_DisKeyRFr06stDivLine") + r("Dis06stEndPFrDivLine"), r("NkR_06sKeywayCirDia"), r("NkR_06sKeywayLength"), r("NkR_06sReduGroDepDia"), 0, 4)
'                ShaftPart_200_006.Nstep_keyway_Left(7, r("NkL_DisBetKeyLAnd07stL"), r("NkL_07sKeywayCirDia"), r("NkL_07sKeywayLength"), r("NkL_07sReduGroDepDia"), 1, 2)

'                ShaftPart_200_006.Stepshaft_length_Dimension（8, 1, 2, 1, 8, S(r("SlD_Line1AndLine2_TolFit"), 1),,,, S(r("SlD_Line1AndLine2_TolFit"), 5))    '1为标注在下方，2为标注在上方
'                ShaftPart_200_006.Stepshaft_length_Dimension（8, 3, 4, 1, 2)
'                ShaftPart_200_006.Stepshaft_length_Dimension（8, 3, 6, 1, 6, S(r("SlD_Line3AndLine6_TolFit"), 1), S(r("SlD_Line3AndLine6_TolFit"), 2), S(r("SlD_Line3AndLine6_TolFit"), 3))
'                ShaftPart_200_006.Stepshaft_length_Dimension（8, 5, 6, 1, 4)
'                ShaftPart_200_006.Stepshaft_length_Dimension（8, 8, 9, 1, 8)
'                ShaftPart_200_006.Stepshaft_length_Dimension（8, 7, 8, 2, 10, S(r("SlD_Line7AndLine8_TolFit"), 1), S(r("SlD_Line7AndLine8_TolFit"), 2), S(r("SlD_Line7AndLine8_TolFit"), 3))
'                ShaftPart_200_006.Stepshaft_length_Dimension（8, 3, 8, 1, 8, S(r("SlD_Line3AndLine8_TolFit"), 1),,,, S(r("SlD_Line3AndLine8_TolFit"), 5))
'                ShaftPart_200_006.Stepshaft_length_Dimension（8, 1, 9, 1, 10, S(r("SlD_Line1AndLine9_TolFit"), 1),,,, S(r("SlD_Line1AndLine9_TolFit"), 5))

'                ShaftPart_200_006.Insert_length_Dimension（r("Step1_length"), r("Dis02stStartPFrDivLine"), 2, 8)   '标注中间距离（1.2.3左中右）
'                ShaftPart_200_006.Insert_length_Dimension（r("Step1_length") + r("Dis02stStartPFrDivLine"), r("Dis02stEndPFrDivLine"), 2, 8)
'                ShaftPart_200_006.Insert_length_Dimension（r("Step1_length") + r("Dis02stStartPFrDivLine") + r("Dis02stEndPFrDivLine") + r("Line3AndLine6"), r("Dis06stStartPFrDivLine"), 2, 6)
'                ShaftPart_200_006.Insert_length_Dimension（r("Step1_length") + r("Dis02stStartPFrDivLine") + r("Dis02stEndPFrDivLine") + r("Line3AndLine6") + r("Dis06stStartPFrDivLine"), -r("NkR_DisKeyRFr06stDivLine"), 2, 4)
'                ShaftPart_200_006.Insert_length_Dimension（r("Step1_length") + r("Dis02stStartPFrDivLine") + r("Dis02stEndPFrDivLine") + r("Line3AndLine6") + r("Dis06stStartPFrDivLine"), r("Dis06stEndPFrDivLine"), 2, 6)

'                ShaftPart_200_006.Stepshaft_diameter_Dimension(1, 2, 0, S(r("dia_Step01__TolFit"), 1),,,, S(r("dia_Step01__TolFit"), 5)) '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                ShaftPart_200_006.Stepshaft_diameter_Dimension(2, 6, 0, S(r("dia_02stStaPFrDivLine__TolFit"), 1),,,, S(r("dia_02stStaPFrDivLine__TolFit"), 5))
'                ShaftPart_200_006.Stepshaft_diameter_Dimension(2, 7, 3, S(r("dia_02stEndPFrDivLine__TolFit"), 1),,,, S(r("dia_02stEndPFrDivLine__TolFit"), 5))
'                ShaftPart_200_006.Stepshaft_diameter_Dimension(3, 5, 0, S(r("dia_Step03__TolFit"), 1),,,, S(r("dia_Step03__TolFit"), 5))
'                ShaftPart_200_006.Stepshaft_diameter_Dimension(4, 2, 0, S(r("dia_Step04__TolFit"), 1),,,, S(r("dia_Step04__TolFit"), 5))
'                ShaftPart_200_006.Stepshaft_diameter_Dimension(5, 2, 0)
'                ShaftPart_200_006.Stepshaft_diameter_Dimension(6, 3, 0, S(r("dia_Step06__TolFit"), 1), S(r("dia_Step06__TolFit"), 2), S(r("dia_Step06__TolFit"), 3))
'                ShaftPart_200_006.Stepshaft_diameter_Dimension(7, 3, 0, S(r("dia_Step07__TolFit"), 1),,,, S(r("dia_Step07__TolFit"), 5))
'                ShaftPart_200_006.Stepshaft_diameter_Dimension(8, 5, 0, S(r("dia_Step08__TolFit"), 1),,,, S(r("dia_Step08__TolFit"), 5))

'                ShaftPart_200_006.Insert_Gtol(1, S(r("Insert_Gtol_Step1"), 1), S(r("Insert_Gtol_Step1"), 2), 1, 6, 0, S(r("Insert_Gtol_Step1"), 3), S(r("Insert_Gtol_Step1"), 4), S(r("Insert_Gtol_Step1"), 5), S(r("Insert_Gtol_Step1"), 6))
'                ShaftPart_200_006.Insert_Gtol(6, S(r("Insert_Gtol_Step6"), 1), S(r("Insert_Gtol_Step6"), 2), 1, 3, 0, S(r("Insert_Gtol_Step6"), 3))
'                ShaftPart_200_006.Insert_Gtol(8, S(r("Insert_Gtol_Step8"), 1), S(r("Insert_Gtol_Step8"), 2), 3, 6, 0)

'                ShaftPart_200_006.Insert_SurfaceRoughness(1, 2, S(r("IS_RouVal_1Step"), 1), "Rz", 1)
'                ShaftPart_200_006.Insert_SurfaceRoughness(2, 2, S(r("IS_RouVal_2Step"), 1), "Rz", 1)
'                ShaftPart_200_006.Insert_SurfaceRoughness(2, 2, S(r("IS_RouVal_2Step"), 2), "Rz", 3)
'                ShaftPart_200_006.Insert_SurfaceRoughness(3, 2, S(r("IS_RouVal_3Step"), 1), "Rz", 2)
'                ShaftPart_200_006.Insert_SurfaceRoughness(4, 2, S(r("IS_RouVal_4Step"), 1), "Rz", 1)
'                ShaftPart_200_006.Insert_SurfaceRoughness(4, 2, S(r("IS_RouVal_4Step"), 2), "Rz", 3)
'                ShaftPart_200_006.Insert_SurfaceRoughness(6, 2, S(r("IS_RouVal_6Step"), 1), "Rz", 2)
'                ShaftPart_200_006.Insert_SurfaceRoughness(7, 2, S(r("IS_RouVal_7Step"), 1), "Rz", 1)
'                ShaftPart_200_006.Insert_SurfaceRoughness(7, 2, S(r("IS_RouVal_7Step"), 2), "Rz", 3)
'                ShaftPart_200_006.Insert_SurfaceRoughness(7, 2, S(r("IS_RouVal_7Step"), 3), "Rz", 5)
'                ShaftPart_200_006.Insert_SurfaceRoughness(8, 2, S(r("IS_RouVal_8Step"), 1), "Rz", 5)
'                ShaftPart_200_006.Insert_Datum(8, "B")

'                ShaftPart_200_006.Store_Files("三维图", r("Code"))
'                Dim ShaftDrawings_200_006 As New Parts_drawing.Shaft.Shaft_Drawings
'                ShaftDrawings_200_006.Drawings_Template("A0", r("Code"), S(r("TechRequire"), 1) + Chr(13) + Chr(10) + S(r("TechRequire"), 2) + Chr(13) + Chr(10) + S(r("TechRequire"), 3) + Chr(13) + Chr(10) + S(r("TechRequire"), 4) + Chr(13) + Chr(10) + S(r("TechRequire"), 5), r("scale_m"), r("scale_d"), r("name"), r("old_Code"), r("material"))
'                Dim SV_NumberCalls%
'                SV_NumberCalls% = ShaftDrawings_200_006.Section_View(8, 1, 2, 0, "G1", 1, S(r("Rh_ReduGroDepDia"), 1), S(r("Rh_KeyCirDia"), 1), 2, S(r("Sec_Vi01_RouVal"), 1), S(r("Sec_Vi01_RouVal"), 2), 1, "")
'                SV_NumberCalls% = ShaftDrawings_200_006.Section_View(8, 4, 2, 3, "G2", 2, S(r("NkR_04sReduGroDepDia"), 1), S(r("NkR_04sKeywayCirDia"), 1), 2, S(r("Sec_Vi02_RouVal"), 1), S(r("Sec_Vi02_RouVal"), 2), SV_NumberCalls%, "")
'                SV_NumberCalls% = ShaftDrawings_200_006.Section_View(8, 6, 2, 2, "G3", 3, S(r("NkR_06sReduGroDepDia"), 1), S(r("NkR_06sKeywayCirDia"), 1), 2, S(r("Sec_Vi03_RouVal"), 1), S(r("Sec_Vi03_RouVal"), 2), SV_NumberCalls%, "")
'                SV_NumberCalls% = ShaftDrawings_200_006.Section_View(8, 7, 2, 1, "G4", 4, S(r("NkL_07sReduGroDepDia"), 1), S(r("NkL_07sKeywayCirDia"), 1), 2, S(r("Sec_Vi04_RouVal"), 1), S(r("Sec_Vi04_RouVal"), 2), SV_NumberCalls%, "")

'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(1, 1, S(r("Sec_Vi0101_Dia_TolFit"), 1),,,, S(r("Sec_Vi0101_Dia_TolFit"), 5))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(2, 1, S(r("Sec_Vi0201_Dia_TolFit"), 1),,,, S(r("Sec_Vi0201_Dia_TolFit"), 5))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(3, 1, S(r("Sec_Vi0301_Dia_TolFit"), 1), S(r("Sec_Vi0301_Dia_TolFit"), 2), S(r("Sec_Vi0301_Dia_TolFit"), 3))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(4, 1, S(r("Sec_Vi0401_Dia_TolFit"), 1),,,, S(r("Sec_Vi0401_Dia_TolFit"), 5))

'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(1, 2, S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(2, 2, S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(3, 2, S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(4, 2, S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 3))

'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(1, 3, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(2, 3, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(3, 3, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_006.Add_sectionView_toleranceFit(4, 3, S(r("Sec_Vi0403_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0403_KeyCirDia_TolFit"), 4))

'                ShaftDrawings_200_006.Select_sectionView_Size(1, 3)
'                ShaftDrawings_200_006.Add_Gtol(S(r("Sec_Vi01_Gtol"), 1), S(r("Sec_Vi01_Gtol"), 2), S(r("Sec_Vi01_Gtol"), 3))
'                ShaftDrawings_200_006.Select_sectionView_Size(2, 3)
'                ShaftDrawings_200_006.Add_Gtol(S(r("Sec_Vi02_Gtol"), 1), S(r("Sec_Vi02_Gtol"), 2), S(r("Sec_Vi02_Gtol"), 3))
'                ShaftDrawings_200_006.Select_sectionView_Size(3, 3)
'                ShaftDrawings_200_006.Add_Gtol(S(r("Sec_Vi03_Gtol"), 1), S(r("Sec_Vi03_Gtol"), 2), S(r("Sec_Vi03_Gtol"), 3))
'                ShaftDrawings_200_006.Select_sectionView_Size(4, 3)
'                ShaftDrawings_200_006.Add_Gtol(S(r("Sec_Vi04_Gtol"), 1), S(r("Sec_Vi04_Gtol"), 2), S(r("Sec_Vi04_Gtol"), 3))

'                ShaftDrawings_200_006.Detail_View(8, 4, S(r("Detail_View04st"), 1), S(r("Detail_View04st"), 2), 9, S(r("Detail_View04st"), 3), S(r("Detail_View04st"), 4), S(r("Detail_View04st"), 5), True)
'                ShaftDrawings_200_006.Detail_View(8, 8, S(r("Detail_View08st"), 1), S(r("Detail_View08st"), 2), 10, S(r("Detail_View08st"), 3), S(r("Detail_View08st"), 4), S(r("Detail_View08st"), 5), True)
'                ShaftDrawings_200_006.Detail_View(8, 7, S(r("Detail_View07st"), 1), S(r("Detail_View07st"), 2), 11, S(r("Detail_View07st"), 3), S(r("Detail_View07st"), 4), S(r("Detail_View07st"), 5), True)
'                ShaftDrawings_200_006.Modify_text_font_size(8, 7)
'                ShaftDrawings_200_006.Store_Files("工程图", Code$)

'            End Sub
'            Public Sub Shaft_200_006(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=轴;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from six_02_04_05", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop

'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0)  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。
'                'ShaftPart_200_004.Right_rightRrapezoid_cut（）  '标注1为下底-上底的水平距离（在轴的下方中间）+上底距离+切除之后轴的直径（在上底的1/2处），标注2为下底-上底的水平距离（在轴的下方右间）+上底距离+切除之后轴的直径（在N阶的右边）
'                '3为上底的水平距离（在轴的下方中间）+下底距离+切除之后轴的直径（在N阶的右边）+下底终点距N阶起点距离（中间）
'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_200_007 As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_200_007.Step_shaft(6, r("Step1_length"), r("Step1_diameter"), r("Step2_length"), r("Step2_diameter"), r("Step3_length"), r("Step3_diameter"), r("Dis04stStartPFrDivLine") + r("Dis04stEndPFrDivLine"), r("Step4_diameter"), r("Dis05stNCCutLFr05stSP") + r("NccR_DisFr05stEndP"), r("Step5_diameter"), r("Step6_length"), r("Step6_diameter"))
'                ShaftPart_200_007.Right_chamfer_cut(5, r("NccR_DisFr05stEndP") - r("5stDisChaHorSPFr5sNccR") - r("NccR_05stCut_Wid"), (r("Step5_diameter") - r("5stChaMinDia")) / 2, 6, 2)   '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径,6为小径直径
'                ShaftPart_200_007.Right_chamfer_cut(6, r("Rcc_6stChaHorDis"), r("Rcc_6stChaHorDis"), 2, 2)
'                ShaftPart_200_007.Left_chamfer_cut(1, r("Lcc_01stChaHorDis"), r("Lcc_01stChaHorDis"), 2, 2)

'                ShaftPart_200_007.Standard_circle_cut(5, r("Scc_5stepCut_Wid"), r("Scc_5stepCut_Dep"), 0, 1, 6)

'                ShaftPart_200_007.Nonstandard_circle_cut_Right(2, r("NccR_DisFr02stEndP"), r("NccR_02stCut_Wid"), r("NccR_02stCut_Dep"), 1, 0, 1, 5, S(r("NccR_02stToleranceFit"), 1),,, S(r("NccR_02stToleranceFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注
'                ShaftPart_200_007.Nonstandard_circle_cut_Right(5, r("NccR_DisFr05stEndP"), r("NccR_05stCut_Wid"), r("NccR_05stCut_Dep"), 2, 0, 1, 5)

'                ShaftPart_200_007.Right_halfKeyway（2, r("Rh_KeyCirDia"), r("Step2_length") + r("Rh_DisKeyRFr2sAfter"), r("Rh_ReduGroDepDia"), 2, 1)   '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_200_007.Nstep_keyway_Right(4, r("Dis04stEndPFrDivLine") + r("NkR_DisKeyRFr04stDivLine"), r("NkR_04sKeywayCirDia"), r("NkR_04sKeywayLength"), r("NkR_04sReduGroDepDia"), 0, 2)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                ShaftPart_200_007.Nstep_keyway_Left(5, (r("Dis05stNCCutLFr05stSP") - r("NkL_05sKeywayLength")) / 2, r("NkL_05sKeywayCirDia"), r("NkL_05sKeywayLength"), r("NkL_05sReduGroDepDia"), 0, 0)

'                ShaftPart_200_007.Stepshaft_length_Dimension（6, 1, 2, 1, 6)    '1为标注在下方，2为标注在上方
'                ShaftPart_200_007.Stepshaft_length_Dimension（6, 2, 3, 1, 6)
'                ShaftPart_200_007.Stepshaft_length_Dimension（6, 3, 4, 1, 6)
'                ShaftPart_200_007.Stepshaft_length_Dimension（6, 6, 7, 1, 6)
'                ShaftPart_200_007.Stepshaft_length_Dimension（6, 2, 6, 1, 8, S(r("SlD_Line2AndLine6_TolFit"), 1),,,, S(r("SlD_Line2AndLine6_TolFit"), 5))
'                ShaftPart_200_007.Stepshaft_length_Dimension（6, 1, 7, 1, 10, S(r("SlD_Line1AndLine7_TolFit"), 1),,,, S(r("SlD_Line1AndLine7_TolFit"), 5))

'                ShaftPart_200_007.Insert_length_Dimension（r("Step1_length") + r("Step2_length") + r("Step3_length"), r("Dis04stStartPFrDivLine"), 2, 6, S(r("Dis04stStartPFrDivLine_TolFit"), 1),,, S(r("Dis04stStartPFrDivLine_TolFit"), 4))   '标注中间距离（1.2.3左中右）
'                ShaftPart_200_007.Insert_length_Dimension（r("Step1_length") + r("Step2_length") + r("Step3_length") + r("Dis04stStartPFrDivLine"), r("Dis04stEndPFrDivLine"), 2, 2)
'                ShaftPart_200_007.Insert_length_Dimension（r("Step1_length") + r("Step2_length") + r("Step3_length") + r("Dis04stStartPFrDivLine"), -r("NkR_DisKeyRFr04stDivLine"), 2, 0)
'                ShaftPart_200_007.Insert_length_Dimension（r("Step1_length") + r("Step2_length") + r("Step3_length") + r("Dis04stStartPFrDivLine") + r("Dis04stEndPFrDivLine"), r("Dis05stNCCutLFr05stSP"), 2, 4, S(r("Dis05stStartPFr05sNccL_TolFit"), 1),,, S(r("Dis05stStartPFr05sNccL_TolFit"), 4))

'                ShaftPart_200_007.Stepshaft_diameter_Dimension(1, 4, 3, S(r("dia_Step01__TolFit"), 1),,,, S(r("dia_Step01__TolFit"), 5)) '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                ShaftPart_200_007.Stepshaft_diameter_Dimension(2, 2, 0, S(r("dia_Step02__TolFit"), 1),,,, S(r("dia_Step02__TolFit"), 5))
'                ShaftPart_200_007.Stepshaft_diameter_Dimension(3, 3, 0)
'                ShaftPart_200_007.Stepshaft_diameter_Dimension(4, 3, 0, S(r("dia_Step04__TolFit"), 1),,,, S(r("dia_Step04__TolFit"), 5))
'                ShaftPart_200_007.Stepshaft_diameter_Dimension(5, 7, 0, S(r("dia_Step05__TolFit"), 1),,,, S(r("dia_Step05__TolFit"), 5))
'                ShaftPart_200_007.Stepshaft_diameter_Dimension(6, 5, 0, S(r("dia_Step06__TolFit"), 1),,,, S(r("dia_Step06__TolFit"), 5))

'                ShaftPart_200_007.Insert_Gtol(2, S(r("Insert_Gtol_Step2"), 1), S(r("Insert_Gtol_Step2"), 2), 1, 6, 0, S(r("Insert_Gtol_Step2"), 3))
'                ShaftPart_200_007.Insert_Gtol(4, S(r("Insert_Gtol_Step4"), 1), S(r("Insert_Gtol_Step4"), 2), 2, 3, 0, S(r("Insert_Gtol_Step4"), 3))
'                ShaftPart_200_007.Insert_Gtol(5, S(r("Insert_Gtol_Step5"), 1), S(r("Insert_Gtol_Step5"), 2), 1, 6, 0)
'                ShaftPart_200_007.Insert_Gtol(6, S(r("Insert_Gtol_Step6"), 1), S(r("Insert_Gtol_Step6"), 2), 3, 6, 0, , S(r("Insert_Gtol_Step6"), 4), S(r("Insert_Gtol_Step6"), 5), S(r("Insert_Gtol_Step6"), 6))

'                ShaftPart_200_007.Insert_SurfaceRoughness(1, 2, S(r("IS_RouVal_1Step"), 1), "Rz", 2)
'                ShaftPart_200_007.Insert_SurfaceRoughness(2, 2, S(r("IS_RouVal_2Step"), 1), "Rz", 2)
'                ShaftPart_200_007.Insert_SurfaceRoughness(2, 2, S(r("IS_RouVal_2Step"), 2), "Rz", 3)
'                ShaftPart_200_007.Insert_SurfaceRoughness(4, 2, S(r("IS_RouVal_4Step"), 1), "Rz", 1)
'                ShaftPart_200_007.Insert_SurfaceRoughness(4, 2, S(r("IS_RouVal_4Step"), 2), "Rz", 3)
'                ShaftPart_200_007.Insert_SurfaceRoughness(5, 2, S(r("IS_RouVal_5Step"), 1), "Rz", 1)
'                ShaftPart_200_007.Insert_SurfaceRoughness(5, 2, S(r("IS_RouVal_5Step"), 2), "Rz", 2)
'                ShaftPart_200_007.Insert_SurfaceRoughness(6, 2, S(r("IS_RouVal_6Step"), 1), "Rz", 2)
'                ShaftPart_200_007.Insert_Datum(6, "B")

'                ShaftPart_200_007.Store_Files("三维图", r("Code"))
'                Dim ShaftDrawings_200_007 As New Parts_drawing.Shaft.Shaft_Drawings
'                ShaftDrawings_200_007.Drawings_Template("A0", r("Code"), S(r("TechRequire"), 1) + Chr(13) + Chr(10) + S(r("TechRequire"), 2) + Chr(13) + Chr(10) + S(r("TechRequire"), 3) + Chr(13) + Chr(10) + S(r("TechRequire"), 4) + Chr(13) + Chr(10) + S(r("TechRequire"), 5), r("scale_m"), r("scale_d"), r("name"), r("old_Code"), r("material"))
'                Dim SV_NumberCalls%
'                SV_NumberCalls% = ShaftDrawings_200_007.Section_View(6, 2, 1, 2, "A", 2, r("Rh_ReduGroDepDia"), r("Rh_KeyCirDia"), 2, S(r("Sec_Vi01_RouVal"), 1), S(r("Sec_Vi01_RouVal"), 2), 1, S(r("Sec_Vi_Datum"), 1))
'                SV_NumberCalls% = ShaftDrawings_200_007.Section_View(6, 4, 1, 2, "B", 3, r("NkR_04sReduGroDepDia"), r("NkR_04sKeywayCirDia"), 2, S(r("Sec_Vi02_RouVal"), 1), S(r("Sec_Vi02_RouVal"), 2), SV_NumberCalls%, S(r("Sec_Vi_Datum"), 1))
'                ShaftDrawings_200_007.Section_View(6, 5, 1, 1, "C", 4, r("NkL_05sReduGroDepDia"), r("NkL_05sKeywayCirDia"), 2, S(r("Sec_Vi03_RouVal"), 1), S(r("Sec_Vi03_RouVal"), 2), SV_NumberCalls%, S(r("Sec_Vi_Datum"), 1))

'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(1, 1, S(r("Sec_Vi0101_Dia_TolFit"), 1),,,, S(r("Sec_Vi0101_Dia_TolFit"), 5))
'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(2, 1,,,,,, S(r("Sec_Vi0201_Dia_TolFit"), 1) + Chr(13) + Chr(10) + S(r("Sec_Vi0201_Dia_TolFit"), 2))
'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(3, 1,,,,,, S(r("Sec_Vi0201_Dia_TolFit"), 1) + Chr(13) + Chr(10) + S(r("Sec_Vi0201_Dia_TolFit"), 2))

'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(1, 2, S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(2, 2, S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(3, 2, S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 3))

'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(1, 3, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(2, 3, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_007.Add_sectionView_toleranceFit(3, 3, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 4))

'                ShaftDrawings_200_007.Select_sectionView_Size(1, 3)
'                ShaftDrawings_200_007.Add_Gtol(S(r("Sec_Vi01_Gtol"), 1), S(r("Sec_Vi01_Gtol"), 2), S(r("Sec_Vi01_Gtol"), 3))
'                ShaftDrawings_200_007.Select_sectionView_Size(2, 3)
'                ShaftDrawings_200_007.Add_Gtol(S(r("Sec_Vi02_Gtol"), 1), S(r("Sec_Vi02_Gtol"), 2), S(r("Sec_Vi02_Gtol"), 3))
'                ShaftDrawings_200_007.Select_sectionView_Size(3, 3)
'                ShaftDrawings_200_007.Add_Gtol(S(r("Sec_Vi03_Gtol"), 1), S(r("Sec_Vi03_Gtol"), 2), S(r("Sec_Vi03_Gtol"), 3))

'                ShaftDrawings_200_007.Modify_text_font_size(8, 7)
'                ShaftDrawings_200_007.Store_Files("工程图", Code$)
'            End Sub
'            Public Sub Shaft_200_007(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=轴;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from seven_01_03_05_06", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop

'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径,6为只标注小径
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注,4为和1相同，但是中间标注有公差，距离N阶终点距离标注无公差
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0)  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。
'                'ShaftPart_200_004.Right_ri 'ghtRrapezoid_cut（）  '标注1为下底-上底的水平距离（在轴的下方中间）+上底距离+切除之后轴的直径（在上底的1/2处），标注2为下底-上底的水平距离（在轴的下方右间）+上底距离+切除之后轴的直径（在N阶的右边）
'                '3为上底的水平距离（在轴的下方中间）+下底距离+切除之后轴的直径（在N阶的右边）+下底终点距N阶起点距离（中间）
'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_200_008 As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_200_008.Step_shaft(7, r("Step1_length"), r("Step1_diameter"), r("Step2_length"), r("Step2_diameter"), r("Step3_length"), r("Step3_diameter"), r("Step4_length"), r("Step4_diameter"), r("Dis05stStartPFrDivLine") + r("Dis05stEndPFrDivLine"), r("Step5_diameter"), r("Dis06stNCCutLFr06stEP") + r("NccL_DisFr06stSP"), r("Step6_diameter"), r("Step7_length"), r("Step7_diameter"))
'                ShaftPart_200_008.Right_chamfer_cut(6, r("Dis06stNCCutLFr06stEP") - r("6stDisChaHorSPFr5sNccR") - r("NccL_06stCut_Wid"), (r("Step6_diameter") - r("6stChaMinDia")) / 2, 6, 2)   '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                ShaftPart_200_008.Right_chamfer_cut(7, r("Rcc_7stChaHorDis"), r("Rcc_7stChaHorDis"), 2, 2)
'                ShaftPart_200_008.Left_chamfer_cut(1, r("Lcc_01stChaHorDis"), r("Lcc_01stChaHorDis"), 2, 2)

'                ShaftPart_200_008.Insert_Fillet(1, r("IF_1stFilletRadius"))

'                ShaftPart_200_008.Standard_circle_cut(2, r("Scc_2stepCut_Wid"), r("Scc_2stepCut_Dep"), 0, 1, 20)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_200_008.Standard_circle_cut(3, r("Scc_3stepCut_Wid"), r("Scc_3stepCut_Dep"), 0, 1, 20)
'                ShaftPart_200_008.Standard_circle_cut(6, r("Scc_6stepCut_Wid"), r("Scc_6stepCut_Dep"), 0, 1, 10)

'                ShaftPart_200_008.Nonstandard_circle_cut_Right(3, r("NccR_DisFr03stEndP"), r("NccR_03stCut_Wid"), r("NccR_03stCut_Dep"), 1, 0, 4, 5, S(r("NccR_03stToleranceFit"), 1), S(r("NccR_03stToleranceFit"), 2), S(r("NccR_03stToleranceFit"), 3))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注,4为和1相同，但是中间标注有公差，距离N阶终点距离标注无公差
'                ShaftPart_200_008.Nonstandard_circle_cut_Left(6, r("NccL_DisFr06stSP"), r("NccL_06stCut_Wid"), r("NccL_06stCut_Dep"), 2, 0, 1, 5, S(r("NccL_06stToleranceFit"), 1),,, S(r("NccL_06stToleranceFit"), 4))

'                ShaftPart_200_008.Right_halfKeyway（1, r("Rh_1stKeyCirDia"), r("Rh_1stKeyLeng"), r("Rh_1stReduGroDepDia"), 1, 4)
'                ShaftPart_200_008.Right_halfKeyway（3, r("Rh_3stKeyCirDia"), r("Rh_3stKeyLeng"), r("Rh_3stReduGroDepDia"), 1, 4)
'                ShaftPart_200_008.Nstep_keyway_CenterLine_Right(5, r("Dis05stEndPFrDivLine"), r("NkCR_05sDisKeyRFrDivLine"), r("NkCR_05sKeyCirDia"), r("NkCR_05sKeyLeng"), r("NkCR_05sReduGroDepDia"), 4, 2, S(r("NccL_06stToleranceFit"), 1),,, S(r("NccL_06stToleranceFit"), 4)) '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_200_008.Nstep_keyway_Left(6, (r("NccL_DisFr06stSP") - r("NkL_06sKeywayLength")) / 2, r("NkL_06sKeywayCirDia"), r("NkL_06sKeywayLength"), r("NkL_06sReduGroDepDia"), 0, 2)            '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长

'                ShaftPart_200_008.Stepshaft_length_Dimension（7, 1, 2, 1, 6, S(r("SlD_Line1AndLine2_TolFit"), 1), S(r("SlD_Line1AndLine2_TolFit"), 2))    '1为标注在下方，2为标注在上方
'                ShaftPart_200_008.Stepshaft_length_Dimension（7, 2, 3, 1, 6)
'                ShaftPart_200_008.Stepshaft_length_Dimension（7, 3, 4, 1, 6)
'                ShaftPart_200_008.Stepshaft_length_Dimension（7, 4, 5, 1, 6)
'                ShaftPart_200_008.Stepshaft_length_Dimension（7, 7, 8, 1, 6)
'                ShaftPart_200_008.Stepshaft_length_Dimension（7, 1, 3, 1, 8, S(r("SlD_Line1AndLine3_TolFit"), 1),,,, S(r("SlD_Line1AndLine3_TolFit"), 5))
'                ShaftPart_200_008.Stepshaft_length_Dimension（7, 3, 7, 1, 8, S(r("SlD_Line3AndLine7_TolFit"), 1),,,, S(r("SlD_Line3AndLine7_TolFit"), 5))
'                ShaftPart_200_008.Stepshaft_length_Dimension（7, 1, 8, 1, 10, S(r("SlD_Line1AndLine8_TolFit"), 1),,,, S(r("SlD_Line1AndLine8_TolFit"), 5))

'                ShaftPart_200_008.Insert_length_Dimension（r("IlD_Line1AndLine8") - r("Step7_length"), -r("Dis06stNCCutLFr06stEP"), 2, 6)   '标注中间距离（1.2.3左中右）
'                ShaftPart_200_008.Insert_length_Dimension（r("Step1_length") + r("Step2_length"), -r("Dis2stEPFr2sDivLine"), 2, 6)
'                'ShaftPart_200_008.Insert_length_Dimension（609.5 - 19 - 41 - 2.7, 25, 0, 4)
'                ShaftPart_200_008.Insert_length_Dimension（r("IlD_Line1AndLine8") - r("Step7_length") - r("Dis06stNCCutLFr06stEP"), r("6stDisChaHorSPFr5sNccR"), 2, 4)

'                ShaftPart_200_008.Stepshaft_diameter_Dimension(2, 4, 0, S(r("dia_Step01__TolFit"), 1),,,, S(r("dia_Step01__TolFit"), 5))       '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                ShaftPart_200_008.Stepshaft_diameter_Dimension(2, 2, 0, S(r("dia_Step02__TolFit"), 1),,,, S(r("dia_Step02__TolFit"), 5))
'                ShaftPart_200_008.Stepshaft_diameter_Dimension(3, 1, 0, S(r("dia_Step03__TolFit"), 1),,,, S(r("dia_Step03__TolFit"), 5))
'                ShaftPart_200_008.Stepshaft_diameter_Dimension(4, 3, 0)
'                ShaftPart_200_008.Stepshaft_diameter_Dimension(5, 3, 0, S(r("dia_Step05__TolFit"), 1),,,, S(r("dia_Step05__TolFit"), 5))
'                ShaftPart_200_008.Stepshaft_diameter_Dimension(6, 7, 0, S(r("dia_Step06__TolFit"), 1),,,, S(r("dia_Step06__TolFit"), 5))
'                ShaftPart_200_008.Stepshaft_diameter_Dimension(7, 5, 0, S(r("dia_Step07__TolFit"), 1),,,, S(r("dia_Step07__TolFit"), 5))

'                ShaftPart_200_008.Insert_Gtol(1, S(r("Insert_Gtol_Step1"), 1), S(r("Insert_Gtol_Step1"), 2), 2, 6, -3, , S(r("Insert_Gtol_Step1"), 4), S(r("Insert_Gtol_Step1"), 5), S(r("Insert_Gtol_Step1"), 6))
'                ShaftPart_200_008.Insert_Gtol(2, S(r("Insert_Gtol_Step2"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 6, -2, , S(r("Insert_Gtol_Step2"), 4), S(r("Insert_Gtol_Step2"), 5), S(r("Insert_Gtol_Step2"), 6), S(r("Insert_Gtol_Step2"), 7))
'                ShaftPart_200_008.Insert_Gtol(5, S(r("Insert_Gtol_Step5"), 1), S(r("Insert_Gtol_Step5"), 2), 2, 6, 0, S(r("Insert_Gtol_Step5"), 3))
'                ShaftPart_200_008.Insert_Gtol(6, S(r("Insert_Gtol_Step6"), 1), S(r("Insert_Gtol_Step6"), 2), 3, 6, 2, S(r("Insert_Gtol_Step6"), 3))
'                ShaftPart_200_008.Insert_Gtol(7, S(r("Insert_Gtol_Step7"), 1), S(r("Insert_Gtol_Step7"), 2), 3, 6, 3, , S(r("Insert_Gtol_Step7"), 4), S(r("Insert_Gtol_Step7"), 5), S(r("Insert_Gtol_Step7"), 6))

'                ShaftPart_200_008.Insert_SurfaceRoughness(1, 2, S(r("IS_RouVal_1Step"), 1), "Rz", 2)
'                ShaftPart_200_008.Insert_SurfaceRoughness(2, 2, S(r("IS_RouVal_2Step"), 1), "Rz", 4)
'                ShaftPart_200_008.Insert_SurfaceRoughness(2, 2, S(r("IS_RouVal_2Step"), 2), "Rz", 2)
'                ShaftPart_200_008.Insert_SurfaceRoughness(3, 2, S(r("IS_RouVal_3Step"), 1), "Rz", 1)
'                ShaftPart_200_008.Insert_SurfaceRoughness(3, 2, S(r("IS_RouVal_3Step"), 2), "Rz", 3)
'                ShaftPart_200_008.Insert_SurfaceRoughness(5, 2, S(r("IS_RouVal_5Step"), 1), "Rz", 1)
'                ShaftPart_200_008.Insert_SurfaceRoughness(5, 2, S(r("IS_RouVal_5Step"), 2), "Rz", 3)
'                ShaftPart_200_008.Insert_SurfaceRoughness(6, 2, S(r("IS_RouVal_6Step"), 1), "Rz", 1)
'                ShaftPart_200_008.Insert_SurfaceRoughness(6, 2, S(r("IS_RouVal_6Step"), 2), "Rz", 2)
'                ShaftPart_200_008.Insert_SurfaceRoughness(7, 2, S(r("IS_RouVal_7Step"), 1), "Rz", 5)
'                ShaftPart_200_008.Insert_Datum(7, "B")
'                ShaftPart_200_008.Insert_Datum(2, "A")

'                ShaftPart_200_008.Store_Files("三维图", r("Code"))
'                Dim ShaftDrawings_200_008 As New Parts_drawing.Shaft.Shaft_Drawings
'                ShaftDrawings_200_008.Drawings_Template("A0", r("Code"), S(r("TechRequire"), 1) + Chr(13) + Chr(10) + S(r("TechRequire"), 2) + Chr(13) + Chr(10) + S(r("TechRequire"), 3) + Chr(13) + Chr(10) + S(r("TechRequire"), 4) + Chr(13) + Chr(10) + S(r("TechRequire"), 5), r("scale_m"), r("scale_d"), r("name"), r("old_Code"), r("material"))
'                Dim SV_NumberCalls%
'                SV_NumberCalls% = ShaftDrawings_200_008.Section_View(7, 1, 1, 2, "A", 1, r("Rh_1stReduGroDepDia"), r("Rh_1stKeyCirDia"), 2, S(r("Sec_Vi01_RouVal"), 1), S(r("Sec_Vi01_RouVal"), 2), 1, S(r("Sec_Vi_Datum"), 1))
'                SV_NumberCalls% = ShaftDrawings_200_008.Section_View(7, 3, 1, 2, "B", 2, r("Rh_3stReduGroDepDia"), r("Rh_3stKeyCirDia"), 2, S(r("Sec_Vi02_RouVal"), 1), S(r("Sec_Vi02_RouVal"), 2), SV_NumberCalls%, S(r("Sec_Vi_Datum"), 2))
'                SV_NumberCalls% = ShaftDrawings_200_008.Section_View(7, 5, 1, 2, "C", 3, r("NkCR_05sReduGroDepDia"), r("NkCR_05sKeyCirDia"), 2, S(r("Sec_Vi03_RouVal"), 1), S(r("Sec_Vi03_RouVal"), 2), SV_NumberCalls%, S(r("Sec_Vi_Datum"), 3))
'                SV_NumberCalls% = ShaftDrawings_200_008.Section_View(7, 6, 1, 1, "D", 4, r("NkL_06sReduGroDepDia"), r("NkL_06sKeywayCirDia"), 2, S(r("Sec_Vi04_RouVal"), 1), S(r("Sec_Vi04_RouVal"), 2), SV_NumberCalls%, S(r("Sec_Vi_Datum"), 4))

'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(1, 1, S(r("Sec_Vi0101_Dia_TolFit"), 1),,,, S(r("Sec_Vi0101_Dia_TolFit"), 5))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(2, 1, S(r("Sec_Vi0201_Dia_TolFit"), 1),,,, S(r("Sec_Vi0201_Dia_TolFit"), 5))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(3, 1, , , ,,, S(r("Sec_Vi0301_Dia_TolFit"), 1) + Chr(13) + Chr(10) + S(r("Sec_Vi0301_Dia_TolFit"), 2))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(4, 1, , , , , , S(r("Sec_Vi0401_Dia_TolFit"), 1) + Chr(13) + Chr(10) + S(r("Sec_Vi0401_Dia_TolFit"), 2))

'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(1, 2, S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0102_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(2, 2, S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0202_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(3, 2, S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0302_ReduGroDepDia_TolFit"), 3))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(4, 2, S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 1), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 2), S(r("Sec_Vi0402_ReduGroDepDia_TolFit"), 3))

'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(1, 3, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0103_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(2, 3, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0203_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(3, 3, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0303_KeyCirDia_TolFit"), 4))
'                ShaftDrawings_200_008.Add_sectionView_toleranceFit(4, 3, S(r("Sec_Vi0403_KeyCirDia_TolFit"), 1),,, S(r("Sec_Vi0403_KeyCirDia_TolFit"), 4))

'                ShaftDrawings_200_008.Select_sectionView_Size(1, 3)
'                ShaftDrawings_200_008.Add_Gtol(S(r("Sec_Vi01_Gtol"), 1), S(r("Sec_Vi01_Gtol"), 2), S(r("Sec_Vi01_Gtol"), 3))
'                ShaftDrawings_200_008.Select_sectionView_Size(2, 3)
'                ShaftDrawings_200_008.Add_Gtol(S(r("Sec_Vi01_Gtol"), 1), S(r("Sec_Vi01_Gtol"), 2), S(r("Sec_Vi01_Gtol"), 3))
'                ShaftDrawings_200_008.Select_sectionView_Size(3, 3)
'                ShaftDrawings_200_008.Add_Gtol(S(r("Sec_Vi03_Gtol"), 1), S(r("Sec_Vi03_Gtol"), 2), S(r("Sec_Vi03_Gtol"), 3))
'                ShaftDrawings_200_008.Select_sectionView_Size(4, 3)
'                ShaftDrawings_200_008.Add_Gtol(S(r("Sec_Vi04_Gtol"), 1), S(r("Sec_Vi04_Gtol"), 2), S(r("Sec_Vi04_Gtol"), 3))

'                ShaftDrawings_200_008.Detail_View(7, 7, S(r("Detail_View07st"), 1), S(r("Detail_View07st"), 2), 7, S(r("Detail_View07st"), 3), S(r("Detail_View07st"), 4), S(r("Detail_View07st"), 5), True)

'                ShaftDrawings_200_008.Modify_text_font_size(8, 7)
'                ShaftDrawings_200_008.Store_Files("工程图", Code$)

'            End Sub
'            Public Sub Shaft_200_008(Code$)
'                'Dim mysqlcon As MySqlConnection = New MySqlConnection("server=localhost" & ";userid=root" & ";password=123456" & ";database=轴;pooling=false")
'                'Dim mysqlcom As MySqlCommand
'                'Dim r As MySqlDataReader
'                ''//打开数据库连接
'                'mysqlcon.Open()
'                ''//sql查询表
'                'mysqlcom = New MySqlCommand("select * from nine_shaft", mysqlcon)

'                'r = mysqlcom.ExecuteReader()
'                'r.Read()
'                'Do Until r("Code") = Code$
'                '    r.Read()
'                'Loop


'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注,4为和1相同，但是中间标注有公差，距离N阶终点距离标注无公差
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0)  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。
'                'ShaftPart_200_004.Right_ri 'ghtRrapezoid_cut（）  '标注1为下底-上底的水平距离（在轴的下方中间）+上底距离+切除之后轴的直径（在上底的1/2处），标注2为下底-上底的水平距离（在轴的下方右间）+上底距离+切除之后轴的直径（在N阶的右边）
'                '3为上底的水平距离（在轴的下方中间）+下底距离+切除之后轴的直径（在N阶的右边）+下底终点距N阶起点距离（中间）

'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_200_009 As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_200_009.Step_shaft(10, 170, 80, 33 + 42, 85, 101 - 65, 95, 65, 100, 76.4, 103, 387, 95, 158 + 9, 93, 57.7 + 57.9, 80, 62, 75, 140, 80)
'                ShaftPart_200_009.Left_chamfer_Add（7, 9, (95 - 93) / 2, 2, 6）
'                ShaftPart_200_009.Right_chamfer_cut(10, 2, 2, 2, 2)
'                ShaftPart_200_009.Left_chamfer_cut(1, 2, 2, 2, 2)
'                ShaftPart_200_009.Left_chamfer_cut(4, 2, 2, 2, 2)

'                ShaftPart_200_009.Standard_circle_cut(1, 4, 1, 0, 2, 20)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_200_009.Standard_circle_cut(2, 4, 1.5, 0, 2, 20)
'                ShaftPart_200_009.Standard_circle_cut(5, 4, 0.5, 0, 1, 20)
'                ShaftPart_200_009.Standard_circle_cut(7, 2.2, 0.5, 0, 1, 20)
'                ShaftPart_200_009.Standard_circle_cut(9, 2.2, 0.5, 0, 1, 5)


'                ShaftPart_200_009.Nonstandard_circle_cut_Right(4, 57.7, 2.7, 2, 2, 0, 1, 5, 2, +0.22, 0)

'                ShaftPart_200_009.Right_halfKeyway（1, 22, 160, 71, 1, 2, 8,,,, "js14")       '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_200_009.Nstep_keyway_Right(4, 2.5, 18, 50, 93, 3, 2)
'                ShaftPart_200_009.Nstep_keyway_Right(6, 5, 22, 240, 86, 1, 3)
'                ShaftPart_200_009.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 6, 2, +0.22, 0)   '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有

'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 1, 2, 1, 4, 8,,,, "js14")
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 4, 5, 1, 4)
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 3, 5, 1, 6)
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 5, 6, 1, 6)
'                'ShaftPart_200_005.Stepshaft_length_Dimension（10, 6, 7, 1, 6)
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 1, 3, 1, 8, 8,,,, "h11")
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 1, 6, 2, 10, 2, 0, -0.63)
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 7, 8, 1, 6)
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 10, 11, 1, 6)
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 3, 10, 1, 8, 8,,,, "h11")
'                ShaftPart_200_009.Stepshaft_length_Dimension（10, 1, 11, 1, 12, 8,,,, "js12")

'                ShaftPart_200_009.Insert_length_Dimension（170, 33, 2, 4)
'                ShaftPart_200_009.Insert_length_Dimension（170 + 33, 42, 2, 4)

'                ShaftPart_200_009.Stepshaft_diameter_Dimension(2, 4, 0, 8,,,, "a11")
'                ShaftPart_200_009.Stepshaft_diameter_Dimension(2, 2, 0, 8,,,, "k6")
'                ShaftPart_200_009.Stepshaft_diameter_Dimension(3, 2, 0, 8,,,, "a11")
'                ShaftPart_200_009.Stepshaft_diameter_Dimension(5, 2, 0)
'                ShaftPart_200_009.Stepshaft_diameter_Dimension(7, 2, 0)
'                ShaftPart_200_009.Stepshaft_diameter_Dimension(10, 5, 0, 8,,,, "k6")

'                ShaftPart_200_009.Insert_Gtol(1, "圆度", 0.01, 1, 5, 0, "(▲)", "圆跳动", 0.04, "A-B")
'                ShaftPart_200_009.Insert_Gtol(4, "圆跳动", 0.075, 2, 6, 0, "A-B")
'                ShaftPart_200_009.Insert_Gtol(6, "圆跳动", 0.075, 2, 6, 0, "A-B")
'                ShaftPart_200_009.Insert_Gtol(8, "圆跳动", 0.075, 2, 6, 0, "A-B")
'                ShaftPart_200_009.Insert_Gtol(10, "圆柱度", 0.005, 2, 6, 0)

'                ShaftPart_200_009.Insert_SurfaceRoughness(1, 2, 0.8, "Rz", 1)
'                ShaftPart_200_009.Insert_SurfaceRoughness(2, 2, 6.3, "Rz", 1)
'                ShaftPart_200_009.Insert_SurfaceRoughness(2, 2, 0.8, "Rz", 3)
'                ShaftPart_200_009.Insert_SurfaceRoughness(3, 2, 6.3, "Rz", 2)
'                ShaftPart_200_009.Insert_SurfaceRoughness(4, 2, 0.8, "Rz", 3)
'                ShaftPart_200_009.Insert_SurfaceRoughness(6, 2, 0.8, "Rz", 1)
'                ShaftPart_200_009.Insert_SurfaceRoughness(8, 2, 0.8, "Rz", 1)
'                ShaftPart_200_009.Insert_SurfaceRoughness(10, 2, 0.8, "Rz", 5)
'                ShaftPart_200_009.Insert_Datum(10, "R")
'                ShaftPart_200_009.Insert_Datum(2, "A")

'                ShaftPart_200_009.Store_Files("三维图", 123)
'                Dim ShaftDrawings_200_009 As New Parts_drawing.Shaft.Shaft_Drawings
'                ShaftDrawings_200_009.Drawings_Template("A0", 123, 123, 1, 1.5, 0, 0, 0)
'                Dim SV_NumberCalls%
'                SV_NumberCalls% = ShaftDrawings_200_009.Section_View(10, 1, 2, 0, "A", 1, 71, 22, 2, 6.3, 3.2, 1, "E")
'                SV_NumberCalls% = ShaftDrawings_200_009.Section_View(10, 4, 2, 2, "B", 2, 93, 18, 2, 6.3, 3.2, SV_NumberCalls%, "C")
'                SV_NumberCalls% = ShaftDrawings_200_009.Section_View(10, 6, 2, 2, "C", 3, 86, 22, 2, 6.3, 3.2, SV_NumberCalls%, "D")
'                SV_NumberCalls% = ShaftDrawings_200_009.Section_View(10, 8, 2, 2, "D", 4, 73, 18, 2, 6.3, 3.2, SV_NumberCalls%, "K")

'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(1, 1, 8, , , , "m6")
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(2, 1, 8, , , , "n6")
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(3, 1, 2, +0.12, +0.1)
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(4, 1, 8, , , , "k6")

'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(1, 2, 2, 0, -0.2)
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(2, 2, 2, 0, -0.2)
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(3, 2, 2, 0, -0.2)
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(4, 2, 2, 0, -0.2)

'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(1, 3, 8, , , "N9")
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(2, 3, 8, , , "N9")
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(3, 3, 8, , , "N9")
'                ShaftDrawings_200_009.Add_sectionView_toleranceFit(4, 3, 8, , , "N9")

'                ShaftDrawings_200_009.Select_sectionView_Size(1, 3)
'                ShaftDrawings_200_009.Add_Gtol("对称度", 0.037, "E")
'                ShaftDrawings_200_009.Select_sectionView_Size(2, 3)
'                ShaftDrawings_200_009.Add_Gtol("对称度", 0.03, "C")
'                ShaftDrawings_200_009.Select_sectionView_Size(3, 3)
'                ShaftDrawings_200_009.Add_Gtol("对称度", 0.03, "D")
'                ShaftDrawings_200_009.Select_sectionView_Size(4, 3)
'                ShaftDrawings_200_009.Add_Gtol("对称度", 0.03, "K")
'                ShaftDrawings_200_009.Detail_View(10, 4, 0, 0.02, 8, 2.25, 1, "I", True)
'                ShaftDrawings_200_009.Modify_text_font_size(8, 7)
'                ShaftDrawings_200_009.Store_Files("工程图", Code$)

'            End Sub
'            Public Sub house_number_280_shaft(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("host=localhost" & ";userid=root" & ";password=123456" & ";database=shaft;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from house_number_280_shaft", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop


'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注,4为和1相同，但是中间标注有公差，距离N阶终点距离标注无公差
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0)  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。
'                'ShaftPart_200_004.Right_ri 'ghtRrapezoid_cut（）  '标注1为下底-上底的水平距离（在轴的下方中间）+上底距离+切除之后轴的直径（在上底的1/2处），标注2为下底-上底的水平距离（在轴的下方右间）+上底距离+切除之后轴的直径（在N阶的右边）
'                '3为上底的水平距离（在轴的下方中间）+下底距离+切除之后轴的直径（在N阶的右边）+下底终点距N阶起点距离（中间）

'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_280_house_number As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_280_house_number.Step_shaft(7, r("Step1_length"), 90, r("Step2_length"), 100, r("Step3_length"), 105, r("Step4_length"), 95, r("Step5_length"), 90, r("Step6_length"), 85, r("Step7_length"), 75)

'                ShaftPart_280_house_number.Right_halfKeyway（1, 25, 133, 81, 1, 2, 8,,,, "js14")       '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_280_house_number.Nstep_keyway_Left(2, 62 - 55, 20, 55, 92.5, 3, 2)

'                ShaftPart_280_house_number.Nstep_keyway_Left(4, -11, 22, 165, 86, 1, 3)
'                ShaftPart_280_house_number.Nstep_keyway_Left(6, 0, 20, 45, 77.5, 1, 3)

'                ShaftPart_280_house_number.Standard_circle_cut(1, 2.2, 1, 0.5, 2, 20)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_280_house_number.Standard_circle_cut(2, 2.2, 1, 0.5, 2, 20)
'                ShaftPart_280_house_number.Standard_circle_cut(3, 2.2, 1, 0.5, 2, 20)
'                ShaftPart_280_house_number.Standard_circle_cut(4, 2.2, 1, 0.5, 2, 20)
'                ShaftPart_280_house_number.Standard_circle_cut(5, 2.2, 1, 0.5, 2, 20)
'                ShaftPart_280_house_number.Standard_circle_cut(6, 2.2, 1, 0.5, 2, 20)


'                ShaftPart_280_house_number.Nonstandard_circle_cut_Right(2, 55 + 0.001, 2.7, (100 - 96.5) / 2, 1, 0, 1, 5, 2, +0.22, 0)
'                ShaftPart_280_house_number.Nonstandard_circle_cut_Left(4, r("NkL_04sKeywayLength") - 11 + 0.001, 2.7, (95 - 91.5) / 2, 2, 0, 2, 5, 2, +0.22, 0)
'                ShaftPart_280_house_number.Nonstandard_circle_cut_Left(6, 45 + 0.001, 2.7, (85 - 81.5) / 2, 2, 0, 2, 5, 2, +0.22, 0)
'                ShaftPart_280_house_number.Punch(1, 0.012, 0.012, 0.025, 0.025, r("Step1_length") + r("Step2_length") + r("Step3_length") + r("Step4_length") + r("Step5_length") + r("Step6_length") + r("Step7_length"))  '0是沉头孔，1是直孔
'                'MsgBox(0)
'                'ShaftPart_280_house_number.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 6, 2, +0.22, 0)   '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                ShaftPart_280_house_number.Store_Files("三维图", r("Code"))




'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 1, 2, 1, 4, 8,,,, "js14")
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 4, 5, 1, 4)
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 3, 5, 1, 6)
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 5, 6, 1, 6)
'                ''ShaftPart_200_005.Stepshaft_length_Dimension（10, 6, 7, 1, 6)
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 1, 3, 1, 8, 8,,,, "h11")
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 1, 6, 2, 10, 2, 0, -0.63)
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 7, 8, 1, 6)
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 10, 11, 1, 6)
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 3, 10, 1, 8, 8,,,, "h11")
'                'ShaftPart_280_house_number.Stepshaft_length_Dimension（10, 1, 11, 1, 12, 8,,,, "js12")

'                'ShaftPart_280_house_number.Insert_length_Dimension（170, 33, 2, 4)
'                'ShaftPart_280_house_number.Insert_length_Dimension（170 + 33, 42, 2, 4)

'                'ShaftPart_280_house_number.Stepshaft_diameter_Dimension(2, 4, 0, 8,,,, "a11")
'                'ShaftPart_280_house_number.Stepshaft_diameter_Dimension(2, 2, 0, 8,,,, "k6")
'                'ShaftPart_280_house_number.Stepshaft_diameter_Dimension(3, 2, 0, 8,,,, "a11")
'                'ShaftPart_280_house_number.Stepshaft_diameter_Dimension(5, 2, 0)
'                'ShaftPart_280_house_number.Stepshaft_diameter_Dimension(7, 2, 0)
'                'ShaftPart_280_house_number.Stepshaft_diameter_Dimension(10, 5, 0, 8,,,, "k6")

'                'ShaftPart_280_house_number.Insert_Gtol(1, "圆度", 0.01, 1, 5, 0, "(▲)", "圆跳动", 0.04, "A-B")
'                'ShaftPart_280_house_number.Insert_Gtol(4, "圆跳动", 0.075, 2, 6, 0, "A-B")
'                'ShaftPart_280_house_number.Insert_Gtol(6, "圆跳动", 0.075, 2, 6, 0, "A-B")
'                'ShaftPart_280_house_number.Insert_Gtol(8, "圆跳动", 0.075, 2, 6, 0, "A-B")
'                'ShaftPart_280_house_number.Insert_Gtol(10, "圆柱度", 0.005, 2, 6, 0)

'                'ShaftPart_280_house_number.Insert_SurfaceRoughness(1, 2, 0.8, "Rz", 1)
'                'ShaftPart_280_house_number.Insert_SurfaceRoughness(2, 2, 6.3, "Rz", 1)
'                'ShaftPart_280_house_number.Insert_SurfaceRoughness(2, 2, 0.8, "Rz", 3)
'                'ShaftPart_280_house_number.Insert_SurfaceRoughness(3, 2, 6.3, "Rz", 2)
'                'ShaftPart_280_house_number.Insert_SurfaceRoughness(4, 2, 0.8, "Rz", 3)
'                'ShaftPart_280_house_number.Insert_SurfaceRoughness(6, 2, 0.8, "Rz", 1)
'                'ShaftPart_280_house_number.Insert_SurfaceRoughness(8, 2, 0.8, "Rz", 1)
'                'ShaftPart_280_house_number.Insert_SurfaceRoughness(10, 2, 0.8, "Rz", 5)
'                'ShaftPart_280_house_number.Insert_Datum(10, "R")
'                'ShaftPart_280_house_number.Insert_Datum(2, "A")

'                'ShaftPart_280_house_number.Store_Files("三维图", 123)
'                'Dim ShaftDrawings_280_house_number As New Parts_drawing.Shaft.Shaft_Drawings
'                'ShaftDrawings_280_house_number.Drawings_Template("A0", 123, 123, 1, 1.5, 0, 0, 0)
'                'Dim SV_NumberCalls%
'                'SV_NumberCalls% = ShaftDrawings_280_house_number.Section_View(10, 1, 2, 0, "A", 1, 71, 22, 2, 6.3, 3.2, 1, "E")
'                'SV_NumberCalls% = ShaftDrawings_280_house_number.Section_View(10, 4, 2, 2, "B", 2, 93, 18, 2, 6.3, 3.2, SV_NumberCalls%, "C")
'                'SV_NumberCalls% = ShaftDrawings_280_house_number.Section_View(10, 6, 2, 2, "C", 3, 86, 22, 2, 6.3, 3.2, SV_NumberCalls%, "D")
'                'SV_NumberCalls% = ShaftDrawings_280_house_number.Section_View(10, 8, 2, 2, "D", 4, 73, 18, 2, 6.3, 3.2, SV_NumberCalls%, "K")

'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(1, 1, 8, , , , "m6")
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(2, 1, 8, , , , "n6")
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(3, 1, 2, +0.12, +0.1)
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(4, 1, 8, , , , "k6")

'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(1, 2, 2, 0, -0.2)
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(2, 2, 2, 0, -0.2)
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(3, 2, 2, 0, -0.2)
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(4, 2, 2, 0, -0.2)

'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(1, 3, 8, , , "N9")
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(2, 3, 8, , , "N9")
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(3, 3, 8, , , "N9")
'                'ShaftDrawings_280_house_number.Add_sectionView_toleranceFit(4, 3, 8, , , "N9")

'                'ShaftDrawings_280_house_number.Select_sectionView_Size(1, 3)
'                'ShaftDrawings_280_house_number.Add_Gtol("对称度", 0.037, "E")
'                'ShaftDrawings_280_house_number.Select_sectionView_Size(2, 3)
'                'ShaftDrawings_280_house_number.Add_Gtol("对称度", 0.03, "C")
'                'ShaftDrawings_280_house_number.Select_sectionView_Size(3, 3)
'                'ShaftDrawings_280_house_number.Add_Gtol("对称度", 0.03, "D")
'                'ShaftDrawings_280_house_number.Select_sectionView_Size(4, 3)
'                'ShaftDrawings_280_house_number.Add_Gtol("对称度", 0.03, "K")
'                'ShaftDrawings_280_house_number.Detail_View(10, 4, 0, 0.02, 8, 2.25, 1, "I", True)
'                'ShaftDrawings_280_house_number.Modify_text_font_size(8, 7)
'                'ShaftDrawings_280_house_number.Store_Files("工程图", Code$)

'            End Sub
'            Public Sub house_number_250_shaft(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("host=localhost" & ";userid=root" & ";password=123456" & ";database=shaft;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from house_number_250_shaft", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop


'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注,4为和1相同，但是中间标注有公差，距离N阶终点距离标注无公差
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0)  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。
'                'ShaftPart_200_004.Right_ri 'ghtRrapezoid_cut（）  '标注1为下底-上底的水平距离（在轴的下方中间）+上底距离+切除之后轴的直径（在上底的1/2处），标注2为下底-上底的水平距离（在轴的下方右间）+上底距离+切除之后轴的直径（在N阶的右边）
'                '3为上底的水平距离（在轴的下方中间）+下底距离+切除之后轴的直径（在N阶的右边）+下底终点距N阶起点距离（中间）

'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_250_house_number As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_250_house_number.Step_shaft(8, r("Step1_length"), 78, r("Step2_length"), 85, r("Step3_length"), 93, r("Step4_length"), 90, r("Step5_length"), 86, r("Line6AndLine8") - r("Step7_length"), 80, r("Step7_length"), 68, r("Step8_length"), 55)

'                ShaftPart_250_house_number.Right_chamfer_cut(4, 4, (90 - 86) / 2, 2, 2)
'                ShaftPart_250_house_number.Right_chamfer_cut(6, 6, (80 - 68) / 2, 2, 2)
'                ShaftPart_250_house_number.Right_chamfer_cut(8, 2, 2, 2, 2)
'                ShaftPart_250_house_number.Left_chamfer_cut(1, 2, 2, 2, 2)

'                ShaftPart_250_house_number.Standard_circle_cut(2, 3, 0.5, 0, 2, 20)   'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_250_house_number.Standard_circle_cut(3, 3, 0.5, 0, 2, 20)
'                ShaftPart_250_house_number.Standard_circle_cut(5, 3, 0.5, 0, 2, 20)
'                ShaftPart_250_house_number.Standard_circle_cut(7, 3, 0.5, 0, 2, 20)

'                ShaftPart_250_house_number.Nonstandard_circle_cut_Right(2, 57, 2.7, 1.8, 1, 0, 1, 5, 2, +0.22, 0)
'                ShaftPart_250_house_number.Nonstandard_circle_cut_Right(5, 67, 12, (86 - 85) / 2, 1, 0, 2, 5, 2, +0.22, 0)
'                ShaftPart_250_house_number.Nonstandard_circle_cut_Left(6, 27, 2.7, 1.75, 1, 0, 2, 5, 2, +0.22, 0)

'                ShaftPart_250_house_number.Right_halfKeyway（1, 18, 100, 71, 1, 2, 8,,,, "js14")       '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_250_house_number.Nstep_keyway_Right(2, 10, 18, 40, 78, 3, 2)

'                ShaftPart_250_house_number.Nstep_keyway_Left(4, 5, 18, r("NkL_04sKeywayLength"), 83, 1, 3)
'                ShaftPart_250_house_number.Nstep_keyway_Left(6, -14, 18, 45, 73, 1, 3)

'                ShaftPart_250_house_number.Punch(1, 0.012, 0.012, 0.015, 0.015, r("Step1_length") + r("Step2_length") + r("Step3_length") + r("Step4_length") + r("Step5_length") + r("Line6AndLine8") + r("Step8_length"))  '0是沉头孔，1是直孔
'                ShaftPart_250_house_number.Store_Files("三维图", r("Code"))

'            End Sub
'            Public Sub house_number_200_shaft(Code$)
'                Dim mysqlcon As MySqlConnection = New MySqlConnection("host=localhost" & ";userid=root" & ";password=123456" & ";database=shaft;pooling=false")
'                Dim mysqlcom As MySqlCommand
'                Dim r As MySqlDataReader
'                '//打开数据库连接
'                mysqlcon.Open()
'                '//sql查询表
'                mysqlcom = New MySqlCommand("select * from house_number_200_shaft", mysqlcon)

'                r = mysqlcom.ExecuteReader()
'                r.Read()
'                Do Until r("Code") = Code$
'                    r.Read()
'                Loop


'                'ShaftPart_200_004.Right_chamfer_cut(4, r("Rcc_Cha01_HorDis"), (r("Step4_diameter") - r("Step5_diameter")) / 2, 4, 1) '标注1为" * 45°"，标注3为倒角水平(中间)距离，标注4为倒角水平(右边)距离标注，2为"C+数字",标注0或者其他数为不标注,5为标注中间距离加直径小径
'                'ShaftPart_200_003.Standard_circle_cut(2, r("Scc_NstepCut_Wid_01"), r("Scc_NstepCut_Dep_01"), 0, 1, 7)  'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                'ShaftPart_200_004.Nonstandard_circle_cut_Right(2, r("NccR_DisFro2stEndP"), r("NccR_2stCut_Wid"), r("NccR_2stCut_Dep"), 1, 0, 1, 3, S(r("NccR_DisFro2stEndPTolFit"), 1),,, S(r("NccR_DisFro2stEndPTolFit"), 4))
'                '切除方向1为左边，2为右边。非标准环切圆右为距离N阶终点处开始。上倒角1为左轴肩的倒角2为右。底圆角半径为凹槽的圆倒角，两边倒角大小一样。
'                ' NccR_NclassMark#为0为只标注中间标注（在上方）1为中间标注（在轴的上方）+距离N阶终点距离标注，2为中间标注（在轴的下方左边）+距离N阶终点距离标注，3为为中间标注（在轴的下方右边）+距离N阶终点距离标注,4为和1相同，但是中间标注有公差，距离N阶终点距离标注无公差
'                'ShaftPart_200_004.Nstep_keyway_Right(6, 5, 22, 240, 86, 2, 3)   '0为键长，NkRM_DistanceBetweenKeywayDomeRAndNstepR#距离（在轴的下方（1为左边，2为在中间，3在右边）4为在轴里面）+键长
'                'ShaftPart_200_004.Right_halfKeyway（1, r("Rh_KeyCirDia"), r("Rh_KeyLeng"), r("Rh_ReduGroDepDia"), 1, 1)  '1为键长标注，2为键槽圆顶距N阶终点距离
'                'ShaftPart_200_004.Left_overstep_keyway(4, r("Lok_Dis01BetKeyDomAndNst"), r("Lok_KeyCir01Dia"), r("Lok_Key01Leng"), r("Lok_ReduGro01DepDia"), 1, 0) '1为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴内部）。2为 Lok_DistanceBetweenKeywayDomeAndNstep#距离+键长（键长标注在轴下面）
'                'ShaftPart_200_004.Stepshaft_length_Dimension（7, 2, 3, 1, 3)   '1为标注在下方，2为标注在上方
'                'ShaftPart_200_004.Stepshaft_diameter_Dimension(5, 1, 0)  '标注在第N层为0时在轴里面，其他为在轴外面。标注位置为轴的左中右1/4（1，2，3）位置4为轴左边延长线，5为轴右边延长线,6为1/8，7为7/8
'                'ShaftPart_200_003.Insert_Gtol(3, S(r("Insert_Gtol_Step3"), 1), S(r("Insert_Gtol_Step2"), 2), 3, 5, S(r("Insert_Gtol_Step3"), 3))   '标注类型为1，2，3为轴上左中右
'                'ShaftPart_200_003.Insert_SurfaceRoughness(1, r("RoughnessType"), r("IS_RouVal_1Step"), "Rz", 4)     '插入位置为1，2，3为轴上左中右，位置4为轴左边延长线，5为轴右边延长线
'                'ShaftPart_200_004.NstepKeyway_NonCircleCut_ChamferCut(8, 2, (80 - 76) / 2, 4, 2.7, 2, (57.7 - 2.7 - 2.2 - 32) / 2, 18, 32, 73, 0, 5, 2, +0.22, 0,, )  '标注0为没有 NNC_Distance_NonCircleLAndKeywayDomerR#，1为有
'                'ShaftDrawings_200_004.Section_View(10, 1, 2, 2, "A", 1, r("NkL_ReduGroDepDia"), r("NkL_KeywayCirDia"), r("RoughnessType"), S(r("Section_View01_RouVal"), 2), S(r("Section_View01_RouVal"), 1), 1, "A")  '0为N阶起点，123为左中右。
'                'ShaftPart_200_004.Right_ri 'ghtRrapezoid_cut（）  '标注1为下底-上底的水平距离（在轴的下方中间）+上底距离+切除之后轴的直径（在上底的1/2处），标注2为下底-上底的水平距离（在轴的下方右间）+上底距离+切除之后轴的直径（在N阶的右边）
'                '3为上底的水平距离（在轴的下方中间）+下底距离+切除之后轴的直径（在N阶的右边）+下底终点距N阶起点距离（中间）

'                Dim swapp As SldWorks.SldWorks = CreateObject("Sldworks.application")
'                swapp.Visible = True
'                Dim ShaftPart_200_house_number As New Parts_drawing.Shaft.Shaft_Parts_drawing
'                swapp.FrameState = 1
'                ShaftPart_200_house_number.Step_shaft(7, r("Step1_length"), 35, r("Step2_length"), 70, r("Step3_length"), 74, r("Step4_length"), 70, r("DisChamEndStFr05sEnd") + r("LcA_ChaHorDist_05s"), 68, r("Step6_length"), 55, r("Step7_length"), 35)

'                ShaftPart_200_house_number.Left_chamfer_Add（5, r("LcA_ChaHorDist_05s"), (70 - 68) / 2, 2, 6）

'                ShaftPart_200_house_number.Right_chamfer_cut(6, 20, （55 - 43） / 2, 2, 2)
'                ShaftPart_200_house_number.Right_chamfer_cut(7, 2, 2, 2, 2)
'                ShaftPart_200_house_number.Left_chamfer_cut(1, 2, 2, 2, 2)


'                ShaftPart_200_house_number.Standard_circle_cut(3, 4, 0.5, 0, 2, 20)   'SccFM_FilletRadius#  0为无倒角圆、其它为倒角圆，标注1为中间标注（在轴上方右边）、标注2为中间标注（在轴上方左边）,3为中间标注（在轴中线1/2处）,4为中间标注（在轴下方处）
'                ShaftPart_200_house_number.Standard_circle_cut(5, 3, 0.5, 0, 2, 20)
'                ShaftPart_200_house_number.Standard_circle_cut(6, 3, 0.5, 0, 2, 20)

'                ShaftPart_200_house_number.Nonstandard_circle_cut_Right(2, 47.7, 3, 0.5, 2, 0, 1, 5, 2, +0.22, 0)
'                ShaftPart_200_house_number.Nonstandard_circle_cut_Left(6, 34.7, 2.7, 1.5, 1, 0, 2, 5, 2, +0.22, 0)

'                ShaftPart_200_house_number.Right_halfKeyway（2, 14, r("Step2_length") + 7, 65, 1, 2, 8,,,, "js14")       '1为键长标注，2为键槽圆顶距N阶终点距离
'                ShaftPart_200_house_number.Nstep_keyway_Right(4, 10, 14, r("NkR_04sKeywayLength"), 64.5, 3, 2)
'                ShaftPart_200_house_number.Nstep_keyway_Left(6, 2, 10, 28, 50, 3, 2)
'                ShaftPart_200_house_number.Punch(1, 0.01, 0.01, 0.01, 0.01, r("Step1_length") + r("Step2_length") + r("Step3_length") + r("Step4_length") + r("DisChamEndStFr05sEnd") + r("LcA_ChaHorDist_05s") + r("Step6_length") + r("Step7_length"))  '0是沉头孔，1是直孔
'                ShaftPart_200_house_number.Store_Files("三维图", r("Code"))
'            End Sub
'        End Class
'    End Class
'End Class
